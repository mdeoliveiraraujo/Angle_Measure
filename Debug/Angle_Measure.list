
Angle_Measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d42c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001000  0800d540  0800d540  0001d540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e540  0800e540  0002029c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e540  0800e540  0002029c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e540  0800e540  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e540  0800e540  0001e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e544  0800e544  0001e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800e548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  200002a0  0800e7e4  000202a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200023bc  0800e7e4  000223bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d790  00000000  00000000  000202c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ece  00000000  00000000  0003da55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00041928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  00042ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c240  00000000  00000000  00044540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c578  00000000  00000000  00060780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a7c  00000000  00000000  0007ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  0010f7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a0 	.word	0x200002a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d524 	.word	0x0800d524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a4 	.word	0x200002a4
 800014c:	0800d524 	.word	0x0800d524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <Ringbuf_init+0x38>)
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <Ringbuf_init+0x3c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <Ringbuf_init+0x40>)
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <Ringbuf_init+0x44>)
 8000f52:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <Ringbuf_init+0x48>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <Ringbuf_init+0x48>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <Ringbuf_init+0x48>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <Ringbuf_init+0x48>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	60da      	str	r2, [r3, #12]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000660 	.word	0x20000660
 8000f80:	200002bc 	.word	0x200002bc
 8000f84:	2000065c 	.word	0x2000065c
 8000f88:	20000304 	.word	0x20000304
 8000f8c:	20000664 	.word	0x20000664

08000f90 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d007      	beq.n	8000fc2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	79f9      	ldrb	r1, [r7, #7]
 8000fba:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <Uart_read>:

int Uart_read(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <Uart_read+0x48>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <Uart_read+0x48>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d102      	bne.n	8000fe8 <Uart_read+0x1c>
  {
    return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e010      	b.n	800100a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <Uart_read+0x48>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Uart_read+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <Uart_read+0x48>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <Uart_read+0x48>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001008:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	20000660 	.word	0x20000660

08001018 <IsDataAvailable>:
		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
	}
}

int IsDataAvailable(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <IsDataAvailable+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <IsDataAvailable+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	b29b      	uxth	r3, r3
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	b29b      	uxth	r3, r3
 8001030:	3340      	adds	r3, #64	; 0x40
 8001032:	b29b      	uxth	r3, r3
 8001034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000660 	.word	0x20000660

08001044 <Get_string>:

  while(*s) Uart_write(*s++);
}

void Get_string (char *buffer)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	int index=0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

	while (_rx_buffer->tail>_rx_buffer->head)
 8001050:	e01e      	b.n	8001090 <Get_string+0x4c>
	{
		if ((_rx_buffer->buffer[_rx_buffer->head-1] == '\n')||((_rx_buffer->head == 0) && (_rx_buffer->buffer[UART_BUFFER_SIZE-1] == '\n')))
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <Get_string+0xac>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <Get_string+0xac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	3b01      	subs	r3, #1
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	d00a      	beq.n	800107a <Get_string+0x36>
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Get_string+0xac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d110      	bne.n	8001090 <Get_string+0x4c>
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Get_string+0xac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001076:	2b0a      	cmp	r3, #10
 8001078:	d10a      	bne.n	8001090 <Get_string+0x4c>
			{
				buffer[index] = Uart_read();
 800107a:	f7ff ffa7 	bl	8000fcc <Uart_read>
 800107e:	4601      	mov	r1, r0
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
				index++;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
	while (_rx_buffer->tail>_rx_buffer->head)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <Get_string+0xac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <Get_string+0xac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	429a      	cmp	r2, r3
 800109e:	d8d8      	bhi.n	8001052 <Get_string+0xe>
			}
	}
	unsigned int start = _rx_buffer->tail;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <Get_string+0xac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	60fb      	str	r3, [r7, #12]
	unsigned int end = (_rx_buffer->head);
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <Get_string+0xac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	60bb      	str	r3, [r7, #8]
	if ((_rx_buffer->buffer[end-1] == '\n'))
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <Get_string+0xac>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d114      	bne.n	80010e8 <Get_string+0xa4>
	{

		for (unsigned int i=start; i<end; i++)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e00d      	b.n	80010e0 <Get_string+0x9c>
		{
			buffer[index] = Uart_read();
 80010c4:	f7ff ff82 	bl	8000fcc <Uart_read>
 80010c8:	4601      	mov	r1, r0
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	b2ca      	uxtb	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
			index++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
		for (unsigned int i=start; i<end; i++)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <Get_string+0x80>
		}
	}
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000660 	.word	0x20000660

080010f4 <Uart_isr>:
	return 0;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <Uart_isr+0x4a>
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <Uart_isr+0xac>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff2a 	bl	8000f90 <store_char>
        return;
 800113c:	e02c      	b.n	8001198 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001144:	2b00      	cmp	r3, #0
 8001146:	d027      	beq.n	8001198 <Uart_isr+0xa4>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	2b00      	cmp	r3, #0
 8001150:	d022      	beq.n	8001198 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Uart_isr+0xb0>)
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <Uart_isr+0xb0>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	429a      	cmp	r2, r3
 800115c:	d108      	bne.n	8001170 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800116c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800116e:	e012      	b.n	8001196 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <Uart_isr+0xb0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <Uart_isr+0xb0>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <Uart_isr+0xb0>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	3301      	adds	r3, #1
 8001180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <Uart_isr+0xb0>)
 8001186:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7bba      	ldrb	r2, [r7, #14]
 8001194:	605a      	str	r2, [r3, #4]
    	return;
 8001196:	bf00      	nop
    }
}
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000660 	.word	0x20000660
 80011a4:	20000304 	.word	0x20000304

080011a8 <initADS>:

// -------------------------------------------------------------
// Code to configure and to communicate with ADS1256 through SPI
// -------------------------------------------------------------

void initADS(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 0); // Put RST pin to LOW
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	4851      	ldr	r0, [pc, #324]	; (80012f8 <initADS+0x150>)
 80011b4:	f002 fec0 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_Delay(10); // LOW at least 4 clock cycles of onboard clock. 100 microseconds is enough
 80011b8:	200a      	movs	r0, #10
 80011ba:	f002 fc07 	bl	80039cc <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 1); // Put RST pin to HIGH
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	484d      	ldr	r0, [pc, #308]	; (80012f8 <initADS+0x150>)
 80011c4:	f002 feb8 	bl	8003f38 <HAL_GPIO_WritePin>

	HAL_Delay(1000); // Waits approximately 1 second to continue the process
 80011c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011cc:	f002 fbfe 	bl	80039cc <HAL_Delay>

	// Reseting the ADS1256
	ADS1256_Reset();
 80011d0:	f000 f8cc 	bl	800136c <ADS1256_Reset>

	// Let the system settle. According to the datasheet, it takes up to 800.4ms. (datasheet pg 24)
	HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f002 fbf8 	bl	80039cc <HAL_Delay>

	// The following command activates the entrance buffer. Theoretically, it allows more stable readings
	// SetRegisterValue(STATUS,0b00110010);
	uint8_t RegisterValue = GetRegisterValue(STATUS);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f8f5 	bl	80013cc <GetRegisterValue>
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4944      	ldr	r1, [pc, #272]	; (80012fc <initADS+0x154>)
 80011ec:	4844      	ldr	r0, [pc, #272]	; (8001300 <initADS+0x158>)
 80011ee:	f009 fc13 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <initADS+0x158>)
 80011f4:	f000 ff7a 	bl	80020ec <send_uart>

	//next set the mux register
	//we are only trying to read differential values from pins 0 and 1. your needs may vary.
	//this is the default setting so we can just reset it
	SetRegisterValue(MUX, 0b00001000); //set the mux register
 80011f8:	2108      	movs	r1, #8
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f952 	bl	80014a4 <SetRegisterValue>
	//B00001000 for single ended measurement

	//now set the ADCON register
	//set the PGA to 64x
	//you need to adjust the constants for the other ones according to datasheet pg 31 if you need other values
	SetRegisterValue(ADCON, PGA_1); //set the adcon register
 8001200:	2120      	movs	r1, #32
 8001202:	2002      	movs	r0, #2
 8001204:	f000 f94e 	bl	80014a4 <SetRegisterValue>

	//next set the data rate
	SetRegisterValue(DRATE, DR_1000); //set the drate register
 8001208:	21a1      	movs	r1, #161	; 0xa1
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f94a 	bl	80014a4 <SetRegisterValue>
	//we're going to ignore the GPIO for now...

	//lastly, we need to calibrate the system

	//let it settle
	HAL_Delay(2000);
 8001210:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001214:	f002 fbda 	bl	80039cc <HAL_Delay>

	//then do calibration
	SendCMD(SELFCAL); //send the calibration command
 8001218:	20f0      	movs	r0, #240	; 0xf0
 800121a:	f000 f917 	bl	800144c <SendCMD>

	//then print out the values
	HAL_Delay(5);
 800121e:	2005      	movs	r0, #5
 8001220:	f002 fbd4 	bl	80039cc <HAL_Delay>

	send_uart("\nOFC0: ");
 8001224:	4837      	ldr	r0, [pc, #220]	; (8001304 <initADS+0x15c>)
 8001226:	f000 ff61 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(OFC0);
 800122a:	2005      	movs	r0, #5
 800122c:	f000 f8ce 	bl	80013cc <GetRegisterValue>
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	461a      	mov	r2, r3
 8001238:	4930      	ldr	r1, [pc, #192]	; (80012fc <initADS+0x154>)
 800123a:	4831      	ldr	r0, [pc, #196]	; (8001300 <initADS+0x158>)
 800123c:	f009 fbec 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 8001240:	482f      	ldr	r0, [pc, #188]	; (8001300 <initADS+0x158>)
 8001242:	f000 ff53 	bl	80020ec <send_uart>
	send_uart("\nOFC1: ");
 8001246:	4830      	ldr	r0, [pc, #192]	; (8001308 <initADS+0x160>)
 8001248:	f000 ff50 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(OFC1);
 800124c:	2006      	movs	r0, #6
 800124e:	f000 f8bd 	bl	80013cc <GetRegisterValue>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	461a      	mov	r2, r3
 800125a:	4928      	ldr	r1, [pc, #160]	; (80012fc <initADS+0x154>)
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <initADS+0x158>)
 800125e:	f009 fbdb 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 8001262:	4827      	ldr	r0, [pc, #156]	; (8001300 <initADS+0x158>)
 8001264:	f000 ff42 	bl	80020ec <send_uart>
	send_uart("\nOFC2: ");
 8001268:	4828      	ldr	r0, [pc, #160]	; (800130c <initADS+0x164>)
 800126a:	f000 ff3f 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(OFC2);
 800126e:	2007      	movs	r0, #7
 8001270:	f000 f8ac 	bl	80013cc <GetRegisterValue>
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	461a      	mov	r2, r3
 800127c:	491f      	ldr	r1, [pc, #124]	; (80012fc <initADS+0x154>)
 800127e:	4820      	ldr	r0, [pc, #128]	; (8001300 <initADS+0x158>)
 8001280:	f009 fbca 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 8001284:	481e      	ldr	r0, [pc, #120]	; (8001300 <initADS+0x158>)
 8001286:	f000 ff31 	bl	80020ec <send_uart>
	send_uart("\nFSC0: ");
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <initADS+0x168>)
 800128c:	f000 ff2e 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(FSC0);
 8001290:	2008      	movs	r0, #8
 8001292:	f000 f89b 	bl	80013cc <GetRegisterValue>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	461a      	mov	r2, r3
 800129e:	4917      	ldr	r1, [pc, #92]	; (80012fc <initADS+0x154>)
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <initADS+0x158>)
 80012a2:	f009 fbb9 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <initADS+0x158>)
 80012a8:	f000 ff20 	bl	80020ec <send_uart>
	send_uart("\nFSC1: ");
 80012ac:	4819      	ldr	r0, [pc, #100]	; (8001314 <initADS+0x16c>)
 80012ae:	f000 ff1d 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(FSC1);
 80012b2:	2009      	movs	r0, #9
 80012b4:	f000 f88a 	bl	80013cc <GetRegisterValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	461a      	mov	r2, r3
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <initADS+0x154>)
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <initADS+0x158>)
 80012c4:	f009 fba8 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <initADS+0x158>)
 80012ca:	f000 ff0f 	bl	80020ec <send_uart>
	send_uart("\nFSC2: ");
 80012ce:	4812      	ldr	r0, [pc, #72]	; (8001318 <initADS+0x170>)
 80012d0:	f000 ff0c 	bl	80020ec <send_uart>
	RegisterValue = GetRegisterValue(FSC2);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f000 f879 	bl	80013cc <GetRegisterValue>
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4906      	ldr	r1, [pc, #24]	; (80012fc <initADS+0x154>)
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <initADS+0x158>)
 80012e6:	f009 fb97 	bl	800aa18 <siprintf>
	send_uart(uart_buffer);
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <initADS+0x158>)
 80012ec:	f000 fefe 	bl	80020ec <send_uart>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	0800d540 	.word	0x0800d540
 8001300:	200006a4 	.word	0x200006a4
 8001304:	0800d544 	.word	0x0800d544
 8001308:	0800d54c 	.word	0x0800d54c
 800130c:	0800d554 	.word	0x0800d554
 8001310:	0800d55c 	.word	0x0800d55c
 8001314:	0800d564 	.word	0x0800d564
 8001318:	0800d56c 	.word	0x0800d56c

0800131c <waitforDRDY>:

// -------------------------------------------------------------
// Some cool interruptions
// -------------------------------------------------------------

void waitforDRDY(void) {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	while (DRDY_state) {
 8001320:	e000      	b.n	8001324 <waitforDRDY+0x8>
		continue;
 8001322:	bf00      	nop
	while (DRDY_state) {
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <waitforDRDY+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1fa      	bne.n	8001322 <waitforDRDY+0x6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
	}
	__disable_irq();
	DRDY_state = 1;
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <waitforDRDY+0x28>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001336:	b662      	cpsie	i
}
 8001338:	bf00      	nop
	__enable_irq();
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_GPIO_EXTI_Callback>:
// Interrupt function
void DRDY_Interuppt(void) {
	DRDY_state = 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SPI1_RDY_Pin) {
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_GPIO_EXTI_Callback+0x16>
		// Write your code here
		DRDY_state = 0;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GPIO_EXTI_Callback+0x20>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	}
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000

0800136c <ADS1256_Reset>:

// -------------------------------------------------------------
// Function to reset the ADS1256
// -------------------------------------------------------------

void ADS1256_Reset(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2102      	movs	r1, #2
 8001374:	4812      	ldr	r0, [pc, #72]	; (80013c0 <ADS1256_Reset+0x54>)
 8001376:	f002 fddf 	bl	8003f38 <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 800137a:	200a      	movs	r0, #10
 800137c:	f001 fc1c 	bl	8002bb8 <delayMicroseconds>
	exchange_buffer[0] = (char*) RESET1;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <ADS1256_Reset+0x58>)
 8001382:	22fe      	movs	r2, #254	; 0xfe
 8001384:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); //Reset
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	2201      	movs	r2, #1
 800138a:	490e      	ldr	r1, [pc, #56]	; (80013c4 <ADS1256_Reset+0x58>)
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <ADS1256_Reset+0x5c>)
 800138e:	f004 faa1 	bl	80058d4 <HAL_SPI_Transmit>
	HAL_Delay(2); //Minimum 0.6ms required for Reset to finish.
 8001392:	2002      	movs	r0, #2
 8001394:	f002 fb1a 	bl	80039cc <HAL_Delay>
	exchange_buffer[0] = (char*) SDATAC;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <ADS1256_Reset+0x58>)
 800139a:	220f      	movs	r2, #15
 800139c:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); //Issue SDATAC
 800139e:	2364      	movs	r3, #100	; 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <ADS1256_Reset+0x58>)
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <ADS1256_Reset+0x5c>)
 80013a6:	f004 fa95 	bl	80058d4 <HAL_SPI_Transmit>
	delayMicroseconds(100);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f001 fc04 	bl	8002bb8 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2102      	movs	r1, #2
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <ADS1256_Reset+0x54>)
 80013b6:	f002 fdbf 	bl	8003f38 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	2000073c 	.word	0x2000073c
 80013c8:	200006e4 	.word	0x200006e4

080013cc <GetRegisterValue>:

// -------------------------------------------------------------
// Function to get the value of a given register
// -------------------------------------------------------------

uint8_t GetRegisterValue(uint8_t regAdress) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t bufr;
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <GetRegisterValue+0x74>)
 80013dc:	f002 fdac 	bl	8003f38 <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 fbe9 	bl	8002bb8 <delayMicroseconds>
	exchange_buffer[0] = (char*) (RREG | regAdress);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <GetRegisterValue+0x78>)
 80013f2:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	2201      	movs	r2, #1
 80013f8:	4912      	ldr	r1, [pc, #72]	; (8001444 <GetRegisterValue+0x78>)
 80013fa:	4813      	ldr	r0, [pc, #76]	; (8001448 <GetRegisterValue+0x7c>)
 80013fc:	f004 fa6a 	bl	80058d4 <HAL_SPI_Transmit>
	exchange_buffer[0] = (char*) 0x00;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <GetRegisterValue+0x78>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // send 2nd command byte, read only one register
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	2201      	movs	r2, #1
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <GetRegisterValue+0x78>)
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <GetRegisterValue+0x7c>)
 800140e:	f004 fa61 	bl	80058d4 <HAL_SPI_Transmit>
	delayMicroseconds(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f001 fbd0 	bl	8002bb8 <delayMicroseconds>
	HAL_SPI_Receive(&hspi1, &bufr, 1, 100); // Read the 3 bytes transmitted by the ADS1256
 8001418:	f107 010f 	add.w	r1, r7, #15
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2201      	movs	r2, #1
 8001420:	4809      	ldr	r0, [pc, #36]	; (8001448 <GetRegisterValue+0x7c>)
 8001422:	f004 fb93 	bl	8005b4c <HAL_SPI_Receive>
	delayMicroseconds(10);
 8001426:	200a      	movs	r0, #10
 8001428:	f001 fbc6 	bl	8002bb8 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <GetRegisterValue+0x74>)
 8001432:	f002 fd81 	bl	8003f38 <HAL_GPIO_WritePin>
	return bufr;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
//
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010800 	.word	0x40010800
 8001444:	2000073c 	.word	0x2000073c
 8001448:	200006e4 	.word	0x200006e4

0800144c <SendCMD>:

// -------------------------------------------------------------
// Sending commands to ADS1256
// -------------------------------------------------------------

void SendCMD(uint8_t command) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	waitforDRDY();
 8001456:	f7ff ff61 	bl	800131c <waitforDRDY>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2110      	movs	r1, #16
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <SendCMD+0x4c>)
 8001460:	f002 fd6a 	bl	8003f38 <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f001 fba7 	bl	8002bb8 <delayMicroseconds>
	exchange_buffer[0] = (char*) command;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <SendCMD+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	2201      	movs	r2, #1
 8001476:	4909      	ldr	r1, [pc, #36]	; (800149c <SendCMD+0x50>)
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <SendCMD+0x54>)
 800147a:	f004 fa2b 	bl	80058d4 <HAL_SPI_Transmit>
	delayMicroseconds(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f001 fb9a 	bl	8002bb8 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <SendCMD+0x4c>)
 800148a:	f002 fd55 	bl	8003f38 <HAL_GPIO_WritePin>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010800 	.word	0x40010800
 800149c:	2000073c 	.word	0x2000073c
 80014a0:	200006e4 	.word	0x200006e4

080014a4 <SetRegisterValue>:

// -------------------------------------------------------------
// Writing certain values to ADS1256 registers
// -------------------------------------------------------------

void SetRegisterValue(uint8_t regAdress, uint8_t regValue) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	; 0x50
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]

	uint8_t regValuePre = GetRegisterValue(regAdress);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff88 	bl	80013cc <GetRegisterValue>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
//	send_uart("Cheguei aqui feraaaa!\n");
	HAL_Delay(10);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f002 fa82 	bl	80039cc <HAL_Delay>
	if (regValue != regValuePre) {
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d04f      	beq.n	8001572 <SetRegisterValue+0xce>
		//digitalWrite(_START, HIGH);
		delayMicroseconds(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f001 fb70 	bl	8002bb8 <delayMicroseconds>
//		send_uart("E entrei aqui!\n");
		waitforDRDY(); // Does it work?
 80014d8:	f7ff ff20 	bl	800131c <waitforDRDY>
		HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2110      	movs	r1, #16
 80014e0:	4826      	ldr	r0, [pc, #152]	; (800157c <SetRegisterValue+0xd8>)
 80014e2:	f002 fd29 	bl	8003f38 <HAL_GPIO_WritePin>
		delayMicroseconds(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f001 fb66 	bl	8002bb8 <delayMicroseconds>
		exchange_buffer[0] = (char*) (WREG | regAdress);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <SetRegisterValue+0xdc>)
 80014f8:	601a      	str	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // 1st write command byte is sent with the register to be written on
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	2201      	movs	r2, #1
 80014fe:	4920      	ldr	r1, [pc, #128]	; (8001580 <SetRegisterValue+0xdc>)
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <SetRegisterValue+0xe0>)
 8001502:	f004 f9e7 	bl	80058d4 <HAL_SPI_Transmit>
		exchange_buffer[0] = (char*) 0x00;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <SetRegisterValue+0xdc>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // 2nd command byte, write only one register
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2201      	movs	r2, #1
 8001510:	491b      	ldr	r1, [pc, #108]	; (8001580 <SetRegisterValue+0xdc>)
 8001512:	481c      	ldr	r0, [pc, #112]	; (8001584 <SetRegisterValue+0xe0>)
 8001514:	f004 f9de 	bl	80058d4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &regValue, sizeof(regValue), 100); // write data (1 Byte) for the register
 8001518:	1db9      	adds	r1, r7, #6
 800151a:	2364      	movs	r3, #100	; 0x64
 800151c:	2201      	movs	r2, #1
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <SetRegisterValue+0xe0>)
 8001520:	f004 f9d8 	bl	80058d4 <HAL_SPI_Transmit>
		delayMicroseconds(10);
 8001524:	200a      	movs	r0, #10
 8001526:	f001 fb47 	bl	8002bb8 <delayMicroseconds>
		HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <SetRegisterValue+0xd8>)
 8001530:	f002 fd02 	bl	8003f38 <HAL_GPIO_WritePin>
		//digitalWrite(_START, LOW);
		if (regValue != GetRegisterValue(regAdress)) { //Check if write was succesfull
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff48 	bl	80013cc <GetRegisterValue>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d012      	beq.n	800156c <SetRegisterValue+0xc8>
			send_uart("Escrevendo registrador 0x");
 8001546:	4810      	ldr	r0, [pc, #64]	; (8001588 <SetRegisterValue+0xe4>)
 8001548:	f000 fdd0 	bl	80020ec <send_uart>
			char regAddress_char[64];
			sprintf(regAddress_char, "%d", regAdress);
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <SetRegisterValue+0xe8>)
 8001554:	4618      	mov	r0, r3
 8001556:	f009 fa5f 	bl	800aa18 <siprintf>
			send_uart(regAddress_char);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fdc4 	bl	80020ec <send_uart>
			send_uart("Falha ao inicializar dispositivo. Reinicie o sistema.\n");
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <SetRegisterValue+0xec>)
 8001566:	f000 fdc1 	bl	80020ec <send_uart>
		} else {
			send_uart("Sucesso ao inicializar o dispositivo.\n");
		}
	}

}
 800156a:	e002      	b.n	8001572 <SetRegisterValue+0xce>
			send_uart("Sucesso ao inicializar o dispositivo.\n");
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <SetRegisterValue+0xf0>)
 800156e:	f000 fdbd 	bl	80020ec <send_uart>
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	; 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010800 	.word	0x40010800
 8001580:	2000073c 	.word	0x2000073c
 8001584:	200006e4 	.word	0x200006e4
 8001588:	0800d574 	.word	0x0800d574
 800158c:	0800d590 	.word	0x0800d590
 8001590:	0800d594 	.word	0x0800d594
 8001594:	0800d5cc 	.word	0x0800d5cc

08001598 <read_Value>:

// -------------------------------------------------------------
// Reading one value from a given channel
// -------------------------------------------------------------

uint32_t read_Value(uint8_t channel) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
//	static const uint32_t* adc_val;
	uint8_t adc_val[3];
	uint32_t adc_conv;
//	uint8_t adc_val2;
//	uint8_t adc_val3;
	waitforDRDY(); // Wait until DRDY is LOW
 80015a2:	f7ff febb 	bl	800131c <waitforDRDY>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0); // Pull SS Low to Enable Communications with ADS1247
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	4830      	ldr	r0, [pc, #192]	; (800166c <read_Value+0xd4>)
 80015ac:	f002 fcc4 	bl	8003f38 <HAL_GPIO_WritePin>
	//delayMicroseconds(5); // RD: Wait 25ns for ADC12xx to get ready

	exchange_buffer[0] = (char*) (WREG | MUX);
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <read_Value+0xd8>)
 80015b2:	2251      	movs	r2, #81	; 0x51
 80015b4:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Transmit change of MUX register
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	2201      	movs	r2, #1
 80015ba:	492d      	ldr	r1, [pc, #180]	; (8001670 <read_Value+0xd8>)
 80015bc:	482d      	ldr	r0, [pc, #180]	; (8001674 <read_Value+0xdc>)
 80015be:	f004 f989 	bl	80058d4 <HAL_SPI_Transmit>
	exchange_buffer[0] = (char*) 0x00;
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <read_Value+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // One byte to be written
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	2201      	movs	r2, #1
 80015cc:	4928      	ldr	r1, [pc, #160]	; (8001670 <read_Value+0xd8>)
 80015ce:	4829      	ldr	r0, [pc, #164]	; (8001674 <read_Value+0xdc>)
 80015d0:	f004 f980 	bl	80058d4 <HAL_SPI_Transmit>
//	send_uart("Enviando buffer...\n");
	exchange_buffer[0] = (char*) channel;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <read_Value+0xd8>)
 80015da:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Declaring that we want AIN 7 - AINCOM
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	2201      	movs	r2, #1
 80015e0:	4923      	ldr	r1, [pc, #140]	; (8001670 <read_Value+0xd8>)
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <read_Value+0xdc>)
 80015e4:	f004 f976 	bl	80058d4 <HAL_SPI_Transmit>

	delayMicroseconds(2);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f001 fae5 	bl	8002bb8 <delayMicroseconds>

	exchange_buffer[0] = (char*) SYNC;
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <read_Value+0xd8>)
 80015f0:	22fc      	movs	r2, #252	; 0xfc
 80015f2:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Issue the SYNC command
 80015f4:	2364      	movs	r3, #100	; 0x64
 80015f6:	2201      	movs	r2, #1
 80015f8:	491d      	ldr	r1, [pc, #116]	; (8001670 <read_Value+0xd8>)
 80015fa:	481e      	ldr	r0, [pc, #120]	; (8001674 <read_Value+0xdc>)
 80015fc:	f004 f96a 	bl	80058d4 <HAL_SPI_Transmit>
	delayMicroseconds(5);
 8001600:	2005      	movs	r0, #5
 8001602:	f001 fad9 	bl	8002bb8 <delayMicroseconds>
	exchange_buffer[0] = (char*) WAKEUP;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <read_Value+0xd8>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Issue the wake up command
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2201      	movs	r2, #1
 8001610:	4917      	ldr	r1, [pc, #92]	; (8001670 <read_Value+0xd8>)
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <read_Value+0xdc>)
 8001614:	f004 f95e 	bl	80058d4 <HAL_SPI_Transmit>
	delayMicroseconds(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f001 facd 	bl	8002bb8 <delayMicroseconds>
	exchange_buffer[0] = (char*) RDATA;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <read_Value+0xd8>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	2201      	movs	r2, #1
 8001628:	4911      	ldr	r1, [pc, #68]	; (8001670 <read_Value+0xd8>)
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <read_Value+0xdc>)
 800162c:	f004 f952 	bl	80058d4 <HAL_SPI_Transmit>

	delayMicroseconds(8);
 8001630:	2008      	movs	r0, #8
 8001632:	f001 fac1 	bl	8002bb8 <delayMicroseconds>

//	send_uart("Tentando ler valores...\n");
	HAL_SPI_Receive(&hspi1,  adc_val, 3, 100);
 8001636:	f107 0108 	add.w	r1, r7, #8
 800163a:	2364      	movs	r3, #100	; 0x64
 800163c:	2203      	movs	r2, #3
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <read_Value+0xdc>)
 8001640:	f004 fa84 	bl	8005b4c <HAL_SPI_Receive>
	adc_conv = (uint32_t)adc_val[0] << 24 | (uint32_t)adc_val[1] << 16 | (uint32_t)adc_val[2] << 8;
 8001644:	7a3b      	ldrb	r3, [r7, #8]
 8001646:	061a      	lsls	r2, r3, #24
 8001648:	7a7b      	ldrb	r3, [r7, #9]
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	431a      	orrs	r2, r3
 800164e:	7abb      	ldrb	r3, [r7, #10]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
//	HAL_SPI_Receive(&hspi1, &adc_val[1], 1, 100);
//	HAL_SPI_Receive(&hspi1, &adc_val[2], 1, 100);
//	send_uart("Valores lidos.\n");

	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1); //Pull SS High to Disable Communications with ADS1247
 8001656:	2201      	movs	r2, #1
 8001658:	2110      	movs	r1, #16
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <read_Value+0xd4>)
 800165c:	f002 fc6c 	bl	8003f38 <HAL_GPIO_WritePin>
//	if (adc_val3 > 0x7fffff) { //if MSB == 1
//		adc_val3 = adc_val1 - 16777216; //do 2's complement, keep the sign this time!
//	}

//	return (ReverseBytes(adc_val) >> 8);
	return adc_conv >> 8;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	0a1b      	lsrs	r3, r3, #8
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010800 	.word	0x40010800
 8001670:	2000073c 	.word	0x2000073c
 8001674:	200006e4 	.word	0x200006e4

08001678 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2110      	movs	r1, #16
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <SELECT+0x14>)
 8001682:	f002 fc59 	bl	8003f38 <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40010800 	.word	0x40010800

08001690 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2110      	movs	r1, #16
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DESELECT+0x14>)
 800169a:	f002 fc4d 	bl	8003f38 <HAL_GPIO_WritePin>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010800 	.word	0x40010800

080016a8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80016b2:	bf00      	nop
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <SPI_TxByte+0x30>)
 80016b6:	f004 fcfc 	bl	80060b2 <HAL_SPI_GetState>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d1f9      	bne.n	80016b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80016c0:	1df9      	adds	r1, r7, #7
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	2201      	movs	r2, #1
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <SPI_TxByte+0x30>)
 80016ca:	f004 f903 	bl	80058d4 <HAL_SPI_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20001a40 	.word	0x20001a40

080016dc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80016e2:	23ff      	movs	r3, #255	; 0xff
 80016e4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80016ea:	bf00      	nop
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <SPI_RxByte+0x38>)
 80016ee:	f004 fce0 	bl	80060b2 <HAL_SPI_GetState>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d1f9      	bne.n	80016ec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80016f8:	1dba      	adds	r2, r7, #6
 80016fa:	1df9      	adds	r1, r7, #7
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <SPI_RxByte+0x38>)
 8001706:	f004 fb32 	bl	8005d6e <HAL_SPI_TransmitReceive>

  return data;
 800170a:	79bb      	ldrb	r3, [r7, #6]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20001a40 	.word	0x20001a40

08001718 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001720:	f7ff ffdc 	bl	80016dc <SPI_RxByte>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	701a      	strb	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <SD_ReadyWait+0x34>)
 800173c:	2232      	movs	r2, #50	; 0x32
 800173e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001740:	f7ff ffcc 	bl	80016dc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001744:	f7ff ffca 	bl	80016dc <SPI_RxByte>
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	d004      	beq.n	800175c <SD_ReadyWait+0x28>
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SD_ReadyWait+0x34>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f3      	bne.n	8001744 <SD_ReadyWait+0x10>

  return res;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20001b40 	.word	0x20001b40

0800176c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001772:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001776:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001778:	f7ff ff8a 	bl	8001690 <DESELECT>

  for(int i = 0; i < 10; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	e005      	b.n	800178e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001782:	20ff      	movs	r0, #255	; 0xff
 8001784:	f7ff ff90 	bl	80016a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	3301      	adds	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b09      	cmp	r3, #9
 8001792:	ddf6      	ble.n	8001782 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001794:	f7ff ff70 	bl	8001678 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017ac:	2395      	movs	r3, #149	; 0x95
 80017ae:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e009      	b.n	80017ca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff72 	bl	80016a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	ddf2      	ble.n	80017b6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80017d0:	e002      	b.n	80017d8 <SD_PowerOn+0x6c>
  {
    Count--;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80017d8:	f7ff ff80 	bl	80016dc <SPI_RxByte>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d002      	beq.n	80017e8 <SD_PowerOn+0x7c>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f4      	bne.n	80017d2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80017e8:	f7ff ff52 	bl	8001690 <DESELECT>
  SPI_TxByte(0XFF);
 80017ec:	20ff      	movs	r0, #255	; 0xff
 80017ee:	f7ff ff5b 	bl	80016a8 <SPI_TxByte>

  PowerFlag = 1;
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <SD_PowerOn+0x94>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000034d 	.word	0x2000034d

08001804 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <SD_PowerOff+0x14>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000034d 	.word	0x2000034d

0800181c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <SD_CheckPower+0x10>)
 8001822:	781b      	ldrb	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	2000034d 	.word	0x2000034d

08001830 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <SD_RxDataBlock+0x68>)
 800183c:	220a      	movs	r2, #10
 800183e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001840:	f7ff ff4c 	bl	80016dc <SPI_RxByte>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d104      	bne.n	8001858 <SD_RxDataBlock+0x28>
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <SD_RxDataBlock+0x68>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f3      	bne.n	8001840 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2bfe      	cmp	r3, #254	; 0xfe
 800185c:	d001      	beq.n	8001862 <SD_RxDataBlock+0x32>
    return FALSE;
 800185e:	2300      	movs	r3, #0
 8001860:	e016      	b.n	8001890 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff55 	bl	8001718 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff4f 	bl	8001718 <SPI_RxBytePtr>
  } while(btr -= 2);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3b02      	subs	r3, #2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ed      	bne.n	8001862 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001886:	f7ff ff29 	bl	80016dc <SPI_RxByte>
  SPI_RxByte();
 800188a:	f7ff ff27 	bl	80016dc <SPI_RxByte>

  return TRUE;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20001b41 	.word	0x20001b41

0800189c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018ac:	f7ff ff42 	bl	8001734 <SD_ReadyWait>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d001      	beq.n	80018ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e040      	b.n	800193c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fef3 	bl	80016a8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	2bfd      	cmp	r3, #253	; 0xfd
 80018c6:	d031      	beq.n	800192c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fee7 	bl	80016a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fee0 	bl	80016a8 <SPI_TxByte>
    } while (--wc);
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	73bb      	strb	r3, [r7, #14]
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1eb      	bne.n	80018cc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80018f4:	f7ff fef2 	bl	80016dc <SPI_RxByte>
    SPI_RxByte();
 80018f8:	f7ff fef0 	bl	80016dc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80018fc:	e00b      	b.n	8001916 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80018fe:	f7ff feed 	bl	80016dc <SPI_RxByte>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b05      	cmp	r3, #5
 800190e:	d006      	beq.n	800191e <SD_TxDataBlock+0x82>
        break;

      i++;
 8001910:	7b7b      	ldrb	r3, [r7, #13]
 8001912:	3301      	adds	r3, #1
 8001914:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001916:	7b7b      	ldrb	r3, [r7, #13]
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	d9f0      	bls.n	80018fe <SD_TxDataBlock+0x62>
 800191c:	e000      	b.n	8001920 <SD_TxDataBlock+0x84>
        break;
 800191e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001920:	bf00      	nop
 8001922:	f7ff fedb 	bl	80016dc <SPI_RxByte>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0fa      	beq.n	8001922 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b05      	cmp	r3, #5
 8001934:	d101      	bne.n	800193a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001950:	f7ff fef0 	bl	8001734 <SD_ReadyWait>
 8001954:	4603      	mov	r3, r0
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d001      	beq.n	800195e <SD_SendCmd+0x1a>
    return 0xFF;
 800195a:	23ff      	movs	r3, #255	; 0xff
 800195c:	e040      	b.n	80019e0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fea1 	bl	80016a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	0e1b      	lsrs	r3, r3, #24
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe9b 	bl	80016a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe95 	bl	80016a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fe8f 	bl	80016a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe8a 	bl	80016a8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d101      	bne.n	80019a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800199e:	2395      	movs	r3, #149	; 0x95
 80019a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b48      	cmp	r3, #72	; 0x48
 80019a6:	d101      	bne.n	80019ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019a8:	2387      	movs	r3, #135	; 0x87
 80019aa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fe7a 	bl	80016a8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b4c      	cmp	r3, #76	; 0x4c
 80019b8:	d101      	bne.n	80019be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019ba:	f7ff fe8f 	bl	80016dc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80019be:	230a      	movs	r3, #10
 80019c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019c2:	f7ff fe8b 	bl	80016dc <SPI_RxByte>
 80019c6:	4603      	mov	r3, r0
 80019c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80019ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da05      	bge.n	80019de <SD_SendCmd+0x9a>
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	73bb      	strb	r3, [r7, #14]
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f1      	bne.n	80019c2 <SD_SendCmd+0x7e>

  return res;
 80019de:	7b7b      	ldrb	r3, [r7, #13]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d5      	b.n	8001ba8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <SD_disk_initialize+0x1c8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <SD_disk_initialize+0x2a>
    return Stat;
 8001a0a:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <SD_disk_initialize+0x1c8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	e0ca      	b.n	8001ba8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001a12:	f7ff feab 	bl	800176c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001a16:	f7ff fe2f 	bl	8001678 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2040      	movs	r0, #64	; 0x40
 8001a22:	f7ff ff8f 	bl	8001944 <SD_SendCmd>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	f040 80a5 	bne.w	8001b78 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a2e:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <SD_disk_initialize+0x1cc>)
 8001a30:	2264      	movs	r2, #100	; 0x64
 8001a32:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a38:	2048      	movs	r0, #72	; 0x48
 8001a3a:	f7ff ff83 	bl	8001944 <SD_SendCmd>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d158      	bne.n	8001af6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e00c      	b.n	8001a64 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a4a:	7bfc      	ldrb	r4, [r7, #15]
 8001a4c:	f7ff fe46 	bl	80016dc <SPI_RxByte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4423      	add	r3, r4
 8001a5a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	3301      	adds	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d9ef      	bls.n	8001a4a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a6a:	7abb      	ldrb	r3, [r7, #10]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 8083 	bne.w	8001b78 <SD_disk_initialize+0x190>
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	2baa      	cmp	r3, #170	; 0xaa
 8001a76:	d17f      	bne.n	8001b78 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2077      	movs	r0, #119	; 0x77
 8001a7c:	f7ff ff62 	bl	8001944 <SD_SendCmd>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d807      	bhi.n	8001a96 <SD_disk_initialize+0xae>
 8001a86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a8a:	2069      	movs	r0, #105	; 0x69
 8001a8c:	f7ff ff5a 	bl	8001944 <SD_SendCmd>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <SD_disk_initialize+0x1cc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1eb      	bne.n	8001a78 <SD_disk_initialize+0x90>
 8001aa0:	e000      	b.n	8001aa4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001aa2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <SD_disk_initialize+0x1cc>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d064      	beq.n	8001b78 <SD_disk_initialize+0x190>
 8001aae:	2100      	movs	r1, #0
 8001ab0:	207a      	movs	r0, #122	; 0x7a
 8001ab2:	f7ff ff47 	bl	8001944 <SD_SendCmd>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d15d      	bne.n	8001b78 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e00c      	b.n	8001adc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001ac2:	7bfc      	ldrb	r4, [r7, #15]
 8001ac4:	f7ff fe0a 	bl	80016dc <SPI_RxByte>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4423      	add	r3, r4
 8001ad2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d9ef      	bls.n	8001ac2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ae2:	7a3b      	ldrb	r3, [r7, #8]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SD_disk_initialize+0x108>
 8001aec:	2306      	movs	r3, #6
 8001aee:	e000      	b.n	8001af2 <SD_disk_initialize+0x10a>
 8001af0:	2302      	movs	r3, #2
 8001af2:	73bb      	strb	r3, [r7, #14]
 8001af4:	e040      	b.n	8001b78 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001af6:	2100      	movs	r1, #0
 8001af8:	2077      	movs	r0, #119	; 0x77
 8001afa:	f7ff ff23 	bl	8001944 <SD_SendCmd>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d808      	bhi.n	8001b16 <SD_disk_initialize+0x12e>
 8001b04:	2100      	movs	r1, #0
 8001b06:	2069      	movs	r0, #105	; 0x69
 8001b08:	f7ff ff1c 	bl	8001944 <SD_SendCmd>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d801      	bhi.n	8001b16 <SD_disk_initialize+0x12e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e000      	b.n	8001b18 <SD_disk_initialize+0x130>
 8001b16:	2301      	movs	r3, #1
 8001b18:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d10e      	bne.n	8001b3e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b20:	2100      	movs	r1, #0
 8001b22:	2077      	movs	r0, #119	; 0x77
 8001b24:	f7ff ff0e 	bl	8001944 <SD_SendCmd>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d80e      	bhi.n	8001b4c <SD_disk_initialize+0x164>
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2069      	movs	r0, #105	; 0x69
 8001b32:	f7ff ff07 	bl	8001944 <SD_SendCmd>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b3c:	e00d      	b.n	8001b5a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2041      	movs	r0, #65	; 0x41
 8001b42:	f7ff feff 	bl	8001944 <SD_SendCmd>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <SD_disk_initialize+0x1cc>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1e1      	bne.n	8001b1a <SD_disk_initialize+0x132>
 8001b56:	e000      	b.n	8001b5a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b58:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <SD_disk_initialize+0x1cc>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <SD_disk_initialize+0x18c>
 8001b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b68:	2050      	movs	r0, #80	; 0x50
 8001b6a:	f7ff feeb 	bl	8001944 <SD_SendCmd>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <SD_disk_initialize+0x1d0>)
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001b7e:	f7ff fd87 	bl	8001690 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b82:	f7ff fdab 	bl	80016dc <SPI_RxByte>

  if (type)
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <SD_disk_initialize+0x1c8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SD_disk_initialize+0x1c8>)
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e001      	b.n	8001ba2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b9e:	f7ff fe31 	bl	8001804 <SD_PowerOff>
  }

  return Stat;
 8001ba2:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <SD_disk_initialize+0x1c8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	20001b41 	.word	0x20001b41
 8001bb8:	2000034c 	.word	0x2000034c

08001bbc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e002      	b.n	8001bd6 <SD_disk_status+0x1a>

  return Stat;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <SD_disk_status+0x24>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000004 	.word	0x20000004

08001be4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <SD_disk_read+0x1c>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c00:	2304      	movs	r3, #4
 8001c02:	e051      	b.n	8001ca8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <SD_disk_read+0xcc>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e048      	b.n	8001ca8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <SD_disk_read+0xd0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c28:	f7ff fd26 	bl	8001678 <SELECT>

  if (count == 1)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d111      	bne.n	8001c56 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	2051      	movs	r0, #81	; 0x51
 8001c36:	f7ff fe85 	bl	8001944 <SD_SendCmd>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d129      	bne.n	8001c94 <SD_disk_read+0xb0>
 8001c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff fdf3 	bl	8001830 <SD_RxDataBlock>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <SD_disk_read+0xb0>
      count = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	e01e      	b.n	8001c94 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2052      	movs	r0, #82	; 0x52
 8001c5a:	f7ff fe73 	bl	8001944 <SD_SendCmd>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d117      	bne.n	8001c94 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	68b8      	ldr	r0, [r7, #8]
 8001c6a:	f7ff fde1 	bl	8001830 <SD_RxDataBlock>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ed      	bne.n	8001c64 <SD_disk_read+0x80>
 8001c88:	e000      	b.n	8001c8c <SD_disk_read+0xa8>
          break;
 8001c8a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	204c      	movs	r0, #76	; 0x4c
 8001c90:	f7ff fe58 	bl	8001944 <SD_SendCmd>
    }
  }

  DESELECT();
 8001c94:	f7ff fcfc 	bl	8001690 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c98:	f7ff fd20 	bl	80016dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	2000034c 	.word	0x2000034c

08001cb8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <SD_disk_write+0x1c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <SD_disk_write+0x20>
    return RES_PARERR;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e06b      	b.n	8001db0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001cd8:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <SD_disk_write+0x100>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e062      	b.n	8001db0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <SD_disk_write+0x100>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SD_disk_write+0x44>
    return RES_WRPRT;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e059      	b.n	8001db0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <SD_disk_write+0x104>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d0e:	f7ff fcb3 	bl	8001678 <SELECT>

  if (count == 1)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d110      	bne.n	8001d3a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	2058      	movs	r0, #88	; 0x58
 8001d1c:	f7ff fe12 	bl	8001944 <SD_SendCmd>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13a      	bne.n	8001d9c <SD_disk_write+0xe4>
 8001d26:	21fe      	movs	r1, #254	; 0xfe
 8001d28:	68b8      	ldr	r0, [r7, #8]
 8001d2a:	f7ff fdb7 	bl	800189c <SD_TxDataBlock>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d033      	beq.n	8001d9c <SD_disk_write+0xe4>
      count = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	e030      	b.n	8001d9c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <SD_disk_write+0x104>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d46:	2100      	movs	r1, #0
 8001d48:	2077      	movs	r0, #119	; 0x77
 8001d4a:	f7ff fdfb 	bl	8001944 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	2057      	movs	r0, #87	; 0x57
 8001d52:	f7ff fdf7 	bl	8001944 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2059      	movs	r0, #89	; 0x59
 8001d5a:	f7ff fdf3 	bl	8001944 <SD_SendCmd>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d11b      	bne.n	8001d9c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d64:	21fc      	movs	r1, #252	; 0xfc
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f7ff fd98 	bl	800189c <SD_TxDataBlock>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <SD_disk_write+0xac>
 8001d86:	e000      	b.n	8001d8a <SD_disk_write+0xd2>
          break;
 8001d88:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001d8a:	21fd      	movs	r1, #253	; 0xfd
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fd85 	bl	800189c <SD_TxDataBlock>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <SD_disk_write+0xe4>
      {
        count = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001d9c:	f7ff fc78 	bl	8001690 <DESELECT>
  SPI_RxByte();
 8001da0:	f7ff fc9c 	bl	80016dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	2000034c 	.word	0x2000034c

08001dc0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	603a      	str	r2, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e11b      	b.n	8002016 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001de4:	79bb      	ldrb	r3, [r7, #6]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d129      	bne.n	8001e3e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d017      	beq.n	8001e22 <SD_disk_ioctl+0x62>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	dc1f      	bgt.n	8001e36 <SD_disk_ioctl+0x76>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <SD_disk_ioctl+0x40>
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d00b      	beq.n	8001e16 <SD_disk_ioctl+0x56>
 8001dfe:	e01a      	b.n	8001e36 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e00:	f7ff fd0c 	bl	800181c <SD_CheckPower>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e0a:	f7ff fcfb 	bl	8001804 <SD_PowerOff>
      res = RES_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e14:	e0fd      	b.n	8002012 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e16:	f7ff fca9 	bl	800176c <SD_PowerOn>
      res = RES_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e20:	e0f7      	b.n	8002012 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	1c5c      	adds	r4, r3, #1
 8001e26:	f7ff fcf9 	bl	800181c <SD_CheckPower>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e34:	e0ed      	b.n	8002012 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e3c:	e0e9      	b.n	8002012 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001e3e:	4b78      	ldr	r3, [pc, #480]	; (8002020 <SD_disk_ioctl+0x260>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0e2      	b.n	8002016 <SD_disk_ioctl+0x256>

    SELECT();
 8001e50:	f7ff fc12 	bl	8001678 <SELECT>

    switch (ctrl)
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b0d      	cmp	r3, #13
 8001e58:	f200 80cc 	bhi.w	8001ff4 <SD_disk_ioctl+0x234>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <SD_disk_ioctl+0xa4>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001f5f 	.word	0x08001f5f
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	08001f4f 	.word	0x08001f4f
 8001e70:	08001ff5 	.word	0x08001ff5
 8001e74:	08001ff5 	.word	0x08001ff5
 8001e78:	08001ff5 	.word	0x08001ff5
 8001e7c:	08001ff5 	.word	0x08001ff5
 8001e80:	08001ff5 	.word	0x08001ff5
 8001e84:	08001ff5 	.word	0x08001ff5
 8001e88:	08001ff5 	.word	0x08001ff5
 8001e8c:	08001ff5 	.word	0x08001ff5
 8001e90:	08001f71 	.word	0x08001f71
 8001e94:	08001f95 	.word	0x08001f95
 8001e98:	08001fb9 	.word	0x08001fb9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2049      	movs	r0, #73	; 0x49
 8001ea0:	f7ff fd50 	bl	8001944 <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80a8 	bne.w	8001ffc <SD_disk_ioctl+0x23c>
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fcbc 	bl	8001830 <SD_RxDataBlock>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 809e 	beq.w	8001ffc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001ec0:	7b3b      	ldrb	r3, [r7, #12]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10e      	bne.n	8001ee8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001eca:	7d7b      	ldrb	r3, [r7, #21]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	7d3b      	ldrb	r3, [r7, #20]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ede:	8bfb      	ldrh	r3, [r7, #30]
 8001ee0:	029a      	lsls	r2, r3, #10
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e02e      	b.n	8001f46 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ee8:	7c7b      	ldrb	r3, [r7, #17]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	7dbb      	ldrb	r3, [r7, #22]
 8001ef2:	09db      	lsrs	r3, r3, #7
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	7d7b      	ldrb	r3, [r7, #21]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f10:	7d3b      	ldrb	r3, [r7, #20]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	7cbb      	ldrb	r3, [r7, #18]
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f38:	8bfa      	ldrh	r2, [r7, #30]
 8001f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f3e:	3b09      	subs	r3, #9
 8001f40:	409a      	lsls	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f4c:	e056      	b.n	8001ffc <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f54:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f5c:	e055      	b.n	800200a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f5e:	f7ff fbe9 	bl	8001734 <SD_ReadyWait>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2bff      	cmp	r3, #255	; 0xff
 8001f66:	d14b      	bne.n	8002000 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f6e:	e047      	b.n	8002000 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f70:	2100      	movs	r1, #0
 8001f72:	2049      	movs	r0, #73	; 0x49
 8001f74:	f7ff fce6 	bl	8001944 <SD_SendCmd>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d142      	bne.n	8002004 <SD_disk_ioctl+0x244>
 8001f7e:	2110      	movs	r1, #16
 8001f80:	6a38      	ldr	r0, [r7, #32]
 8001f82:	f7ff fc55 	bl	8001830 <SD_RxDataBlock>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03b      	beq.n	8002004 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f92:	e037      	b.n	8002004 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f94:	2100      	movs	r1, #0
 8001f96:	204a      	movs	r0, #74	; 0x4a
 8001f98:	f7ff fcd4 	bl	8001944 <SD_SendCmd>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d132      	bne.n	8002008 <SD_disk_ioctl+0x248>
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	6a38      	ldr	r0, [r7, #32]
 8001fa6:	f7ff fc43 	bl	8001830 <SD_RxDataBlock>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02b      	beq.n	8002008 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fb6:	e027      	b.n	8002008 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	207a      	movs	r0, #122	; 0x7a
 8001fbc:	f7ff fcc2 	bl	8001944 <SD_SendCmd>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fcc:	e00b      	b.n	8001fe6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001fce:	6a3c      	ldr	r4, [r7, #32]
 8001fd0:	1c63      	adds	r3, r4, #1
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	f7ff fb82 	bl	80016dc <SPI_RxByte>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d9ef      	bls.n	8001fce <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ffa:	e006      	b.n	800200a <SD_disk_ioctl+0x24a>
      break;
 8001ffc:	bf00      	nop
 8001ffe:	e004      	b.n	800200a <SD_disk_ioctl+0x24a>
      break;
 8002000:	bf00      	nop
 8002002:	e002      	b.n	800200a <SD_disk_ioctl+0x24a>
      break;
 8002004:	bf00      	nop
 8002006:	e000      	b.n	800200a <SD_disk_ioctl+0x24a>
      break;
 8002008:	bf00      	nop
    }

    DESELECT();
 800200a:	f7ff fb41 	bl	8001690 <DESELECT>
    SPI_RxByte();
 800200e:	f7ff fb65 	bl	80016dc <SPI_RxByte>
  }

  return res;
 8002012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002016:	4618      	mov	r0, r3
 8002018:	372c      	adds	r7, #44	; 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
 8002020:	20000004 	.word	0x20000004

08002024 <bufsize>:
char path[PATH_SIZE];  // buffer to store path

int i=0;

int bufsize (char *buf)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	int i=0;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8002030:	e002      	b.n	8002038 <bufsize+0x14>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f6      	bne.n	8002032 <bufsize+0xe>
	return i;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <clear_buffer>:

void clear_buffer (void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e007      	b.n	800206c <clear_buffer+0x1c>
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <clear_buffer+0x30>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	dbf3      	blt.n	800205c <clear_buffer+0xc>

}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	200013bc 	.word	0x200013bc

08002084 <clear_buffer_SD>:

void clear_buffer_SD (void)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE*ROW_SIZE; i++) buffer_SD[i] = '\0';
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e007      	b.n	80020a0 <clear_buffer_SD+0x1c>
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <clear_buffer_SD+0x30>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3301      	adds	r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a6:	dbf3      	blt.n	8002090 <clear_buffer_SD+0xc>
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000764 	.word	0x20000764

080020b8 <clear_path>:

void clear_path (void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	e007      	b.n	80020d4 <clear_path+0x1c>
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <clear_path+0x30>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3301      	adds	r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	ddf4      	ble.n	80020c4 <clear_path+0xc>
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000744 	.word	0x20000744

080020ec <send_uart>:

void send_uart (char *string)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen ((const char *) string);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe f82b 	bl	8000150 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	b29a      	uxth	r2, r3
 8002102:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <send_uart+0x2c>)
 800210a:	f004 fbd8 	bl	80068be <HAL_UART_Transmit>
	//	Uart_sendstring(string);
	//	clear_buffer();
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000664 	.word	0x20000664

0800211c <cmdlength>:
	//	Uart_sendstring(string);
	//	clear_buffer();
}

int cmdlength (char *str)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	int i=0;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
	while (*str++ != ' ') i++;
 8002128:	e002      	b.n	8002130 <cmdlength+0x14>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b20      	cmp	r3, #32
 800213a:	d1f6      	bne.n	800212a <cmdlength+0xe>
	return i;
 800213c:	68fb      	ldr	r3, [r7, #12]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <get_path>:
void get_path (void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
	int start = cmdlength(buffer)+1;
 800214e:	4816      	ldr	r0, [pc, #88]	; (80021a8 <get_path+0x60>)
 8002150:	f7ff ffe4 	bl	800211c <cmdlength>
 8002154:	4603      	mov	r3, r0
 8002156:	3301      	adds	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
	int end = bufsize(buffer)-2;
 800215a:	4813      	ldr	r0, [pc, #76]	; (80021a8 <get_path+0x60>)
 800215c:	f7ff ff62 	bl	8002024 <bufsize>
 8002160:	4603      	mov	r3, r0
 8002162:	3b02      	subs	r3, #2
 8002164:	603b      	str	r3, [r7, #0]

	int j=0;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
	for (int i=start; i<end; i++)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	e011      	b.n	8002194 <get_path+0x4c>
	{
		if (buffer[i] != ' ') path[j++] = buffer[i];
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <get_path+0x60>)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b20      	cmp	r3, #32
 800217a:	d010      	beq.n	800219e <get_path+0x56>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60fa      	str	r2, [r7, #12]
 8002182:	4909      	ldr	r1, [pc, #36]	; (80021a8 <get_path+0x60>)
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	440a      	add	r2, r1
 8002188:	7811      	ldrb	r1, [r2, #0]
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <get_path+0x64>)
 800218c:	54d1      	strb	r1, [r2, r3]
	for (int i=start; i<end; i++)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbe9      	blt.n	8002170 <get_path+0x28>
		else break;
	}
}
 800219c:	e000      	b.n	80021a0 <get_path+0x58>
		else break;
 800219e:	bf00      	nop
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200013bc 	.word	0x200013bc
 80021ac:	20000744 	.word	0x20000744

080021b0 <mount_sd>:

void mount_sd (void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <mount_sd+0x30>)
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <mount_sd+0x34>)
 80021ba:	f007 f965 	bl	8009488 <f_mount>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <mount_sd+0x38>)
 80021c4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("Erro ao montar SD...\n");
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <mount_sd+0x38>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <mount_sd+0x26>
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <mount_sd+0x3c>)
 80021d0:	f7ff ff8c 	bl	80020ec <send_uart>
	else send_uart("SD montado com sucesso...\n");
}
 80021d4:	e002      	b.n	80021dc <mount_sd+0x2c>
	else send_uart("SD montado com sucesso...\n");
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <mount_sd+0x40>)
 80021d8:	f7ff ff88 	bl	80020ec <send_uart>
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0800d5f4 	.word	0x0800d5f4
 80021e4:	20000f84 	.word	0x20000f84
 80021e8:	200015c4 	.word	0x200015c4
 80021ec:	0800d5f8 	.word	0x0800d5f8
 80021f0:	0800d610 	.word	0x0800d610

080021f4 <write_file_mod>:
		}
	}
}

void write_file_mod (char *name, char *buffer)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]


	fresult = f_write(&fil, buffer, sizeof(*buffer), &bw);
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <write_file_mod+0x48>)
 8002200:	2201      	movs	r2, #1
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	480e      	ldr	r0, [pc, #56]	; (8002240 <write_file_mod+0x4c>)
 8002206:	f007 fb99 	bl	800993c <f_write>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <write_file_mod+0x50>)
 8002210:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <write_file_mod+0x50>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <write_file_mod+0x40>
	{
		clear_buffer();
 800221a:	f7ff ff19 	bl	8002050 <clear_buffer>
		sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <write_file_mod+0x50>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <write_file_mod+0x54>)
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f008 fbf5 	bl	800aa18 <siprintf>
		send_uart(buffer);
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f7ff ff5c 	bl	80020ec <send_uart>

	else
	{
	}

}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200015bc 	.word	0x200015bc
 8002240:	2000160c 	.word	0x2000160c
 8002244:	200015c4 	.word	0x200015c4
 8002248:	0800d714 	.word	0x0800d714

0800224c <write_file_byte>:

void write_file_byte (char *name)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]


	fresult = f_write(&fil, buffer, sizeof(buffer), &bw);
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <write_file_byte+0x48>)
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	490f      	ldr	r1, [pc, #60]	; (8002298 <write_file_byte+0x4c>)
 800225c:	480f      	ldr	r0, [pc, #60]	; (800229c <write_file_byte+0x50>)
 800225e:	f007 fb6d 	bl	800993c <f_write>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <write_file_byte+0x54>)
 8002268:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <write_file_byte+0x54>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <write_file_byte+0x40>
	{
		clear_buffer();
 8002272:	f7ff feed 	bl	8002050 <clear_buffer>
		sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <write_file_byte+0x54>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4909      	ldr	r1, [pc, #36]	; (80022a4 <write_file_byte+0x58>)
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <write_file_byte+0x4c>)
 8002282:	f008 fbc9 	bl	800aa18 <siprintf>
		send_uart(buffer);
 8002286:	4804      	ldr	r0, [pc, #16]	; (8002298 <write_file_byte+0x4c>)
 8002288:	f7ff ff30 	bl	80020ec <send_uart>

	else
	{
	}

}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200015bc 	.word	0x200015bc
 8002298:	200013bc 	.word	0x200013bc
 800229c:	2000160c 	.word	0x2000160c
 80022a0:	200015c4 	.word	0x200015c4
 80022a4:	0800d714 	.word	0x0800d714

080022a8 <create_file_mod>:
			send_uart(buffer);
		}
	}
}

void create_file_mod(uint8_t BASE_NAME_SIZE, char *name) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
	//	fresult = f_stat(name, &fno);
	while (f_stat(name, &fno) == FR_OK) {
 80022b4:	e02a      	b.n	800230c <create_file_mod+0x64>
		if (name[BASE_NAME_SIZE + 1] != '9') {
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	3301      	adds	r3, #1
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b39      	cmp	r3, #57	; 0x39
 80022c2:	d008      	beq.n	80022d6 <create_file_mod+0x2e>
			name[BASE_NAME_SIZE + 1]++;
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	3301      	adds	r3, #1
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	3201      	adds	r2, #1
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e01a      	b.n	800230c <create_file_mod+0x64>
		} else if (name[BASE_NAME_SIZE] != '9') {
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b39      	cmp	r3, #57	; 0x39
 80022e0:	d00d      	beq.n	80022fe <create_file_mod+0x56>
			name[BASE_NAME_SIZE + 1] = '0';
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	3301      	adds	r3, #1
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	2230      	movs	r2, #48	; 0x30
 80022ec:	701a      	strb	r2, [r3, #0]
			name[BASE_NAME_SIZE]++;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	3201      	adds	r2, #1
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e006      	b.n	800230c <create_file_mod+0x64>
		} else {
			sprintf(buffer, "Unload SD card before another trial.\n");
 80022fe:	4919      	ldr	r1, [pc, #100]	; (8002364 <create_file_mod+0xbc>)
 8002300:	4819      	ldr	r0, [pc, #100]	; (8002368 <create_file_mod+0xc0>)
 8002302:	f008 fb89 	bl	800aa18 <siprintf>
			send_uart(buffer);
 8002306:	4818      	ldr	r0, [pc, #96]	; (8002368 <create_file_mod+0xc0>)
 8002308:	f7ff fef0 	bl	80020ec <send_uart>
	while (f_stat(name, &fno) == FR_OK) {
 800230c:	4917      	ldr	r1, [pc, #92]	; (800236c <create_file_mod+0xc4>)
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	f007 fdde 	bl	8009ed0 <f_stat>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0cd      	beq.n	80022b6 <create_file_mod+0xe>

	//	if (fresult == FR_OK) {
	//		sprintf(buffer, "*%s* already exists!!!!\n", name);
	//		send_uart(buffer);
	//	} else {
	fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800231a:	220b      	movs	r2, #11
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	4814      	ldr	r0, [pc, #80]	; (8002370 <create_file_mod+0xc8>)
 8002320:	f007 f8fa 	bl	8009518 <f_open>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <create_file_mod+0xcc>)
 800232a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <create_file_mod+0xcc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <create_file_mod+0xa4>
		sprintf(buffer, "error no %d in creating file *%s*\n", fresult, name);
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <create_file_mod+0xcc>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <create_file_mod+0xd0>)
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <create_file_mod+0xc0>)
 8002340:	f008 fb6a 	bl	800aa18 <siprintf>
		send_uart(buffer);
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <create_file_mod+0xc0>)
 8002346:	f7ff fed1 	bl	80020ec <send_uart>
	} else {
		sprintf(buffer, "*%s* created successfully\n", name);
		send_uart(buffer);
	}
	//	}
}
 800234a:	e007      	b.n	800235c <create_file_mod+0xb4>
		sprintf(buffer, "*%s* created successfully\n", name);
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	490b      	ldr	r1, [pc, #44]	; (800237c <create_file_mod+0xd4>)
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <create_file_mod+0xc0>)
 8002352:	f008 fb61 	bl	800aa18 <siprintf>
		send_uart(buffer);
 8002356:	4804      	ldr	r0, [pc, #16]	; (8002368 <create_file_mod+0xc0>)
 8002358:	f7ff fec8 	bl	80020ec <send_uart>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800d86c 	.word	0x0800d86c
 8002368:	200013bc 	.word	0x200013bc
 800236c:	20000f64 	.word	0x20000f64
 8002370:	2000160c 	.word	0x2000160c
 8002374:	200015c4 	.word	0x200015c4
 8002378:	0800d894 	.word	0x0800d894
 800237c:	0800d834 	.word	0x0800d834

08002380 <close_file>:

void close_file(char *name) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	fresult = f_close(&fil);
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <close_file+0x3c>)
 800238a:	f007 fd78 	bl	8009e7e <f_close>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <close_file+0x40>)
 8002394:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <close_file+0x40>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <close_file+0x34>
		sprintf(buffer, "error %d in closing *%s*\n", fresult, name);
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <close_file+0x40>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4907      	ldr	r1, [pc, #28]	; (80023c4 <close_file+0x44>)
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <close_file+0x48>)
 80023aa:	f008 fb35 	bl	800aa18 <siprintf>
		send_uart(buffer);
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <close_file+0x48>)
 80023b0:	f7ff fe9c 	bl	80020ec <send_uart>
	}
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000160c 	.word	0x2000160c
 80023c0:	200015c4 	.word	0x200015c4
 80023c4:	0800d850 	.word	0x0800d850
 80023c8:	200013bc 	.word	0x200013bc

080023cc <GetMicros>:
/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */
 static inline uint32_t GetMicros()
 {
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
     uint32_t ms;
     uint32_t st;

     do
     {
         ms = UptimeMillis;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <GetMicros+0x4c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	607b      	str	r3, [r7, #4]
         st = SysTick->VAL;
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <GetMicros+0x50>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	603b      	str	r3, [r7, #0]
         asm volatile("nop");
 80023de:	bf00      	nop
         asm volatile("nop");
 80023e0:	bf00      	nop
     } while (ms != UptimeMillis);
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <GetMicros+0x4c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1f2      	bne.n	80023d2 <GetMicros+0x6>

     return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023f2:	fb02 f203 	mul.w	r2, r2, r3
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <GetMicros+0x50>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	4908      	ldr	r1, [pc, #32]	; (8002420 <GetMicros+0x54>)
 80023fe:	fba1 1303 	umull	r1, r3, r1, r3
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	fbb1 f3f3 	udiv	r3, r1, r3
 800240a:	1ad3      	subs	r3, r2, r3
 }
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20001b3c 	.word	0x20001b3c
 800241c:	e000e010 	.word	0xe000e010
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800242a:	f001 fa6d 	bl	8003908 <HAL_Init>

	/* USER CODE BEGIN Init */
	for (j = 0; j<sizeof(buffer);j++)
 800242e:	4bbb      	ldr	r3, [pc, #748]	; (800271c <main+0x2f8>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e014      	b.n	8002460 <main+0x3c>
	{
		buffer[j] = '\0';
 8002436:	4bb9      	ldr	r3, [pc, #740]	; (800271c <main+0x2f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4ab9      	ldr	r2, [pc, #740]	; (8002720 <main+0x2fc>)
 800243c:	2100      	movs	r1, #0
 800243e:	54d1      	strb	r1, [r2, r3]
		if(j == 511)
 8002440:	4bb6      	ldr	r3, [pc, #728]	; (800271c <main+0x2f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002448:	4293      	cmp	r3, r2
 800244a:	d104      	bne.n	8002456 <main+0x32>
		{
			buffer[j] = '\n';
 800244c:	4bb3      	ldr	r3, [pc, #716]	; (800271c <main+0x2f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4ab3      	ldr	r2, [pc, #716]	; (8002720 <main+0x2fc>)
 8002452:	210a      	movs	r1, #10
 8002454:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j<sizeof(buffer);j++)
 8002456:	4bb1      	ldr	r3, [pc, #708]	; (800271c <main+0x2f8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4aaf      	ldr	r2, [pc, #700]	; (800271c <main+0x2f8>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4bae      	ldr	r3, [pc, #696]	; (800271c <main+0x2f8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002468:	d3e5      	bcc.n	8002436 <main+0x12>
	}

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800246a:	f000 f98b 	bl	8002784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800246e:	f000 fb09 	bl	8002a84 <MX_GPIO_Init>
	MX_TIM2_Init();
 8002472:	f000 fa67 	bl	8002944 <MX_TIM2_Init>
	MX_SPI1_Init();
 8002476:	f000 f9f9 	bl	800286c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800247a:	f000 faaf 	bl	80029dc <MX_USART1_UART_Init>
	MX_FATFS_Init();
 800247e:	f004 fb89 	bl	8006b94 <MX_FATFS_Init>
	MX_SPI2_Init();
 8002482:	f000 fa29 	bl	80028d8 <MX_SPI2_Init>
	MX_I2C1_Init();
 8002486:	f000 f9c3 	bl	8002810 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 800248a:	f000 fad1 	bl	8002a30 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800248e:	48a5      	ldr	r0, [pc, #660]	; (8002724 <main+0x300>)
 8002490:	f003 ff64 	bl	800635c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, 1);
 8002494:	2201      	movs	r2, #1
 8002496:	2104      	movs	r1, #4
 8002498:	48a3      	ldr	r0, [pc, #652]	; (8002728 <main+0x304>)
 800249a:	f001 fd4d 	bl	8003f38 <HAL_GPIO_WritePin>
	Ringbuf_init();
 800249e:	f7fe fd51 	bl	8000f44 <Ringbuf_init>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a8:	48a0      	ldr	r0, [pc, #640]	; (800272c <main+0x308>)
 80024aa:	f001 fd45 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80024ae:	2201      	movs	r2, #1
 80024b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b4:	489d      	ldr	r0, [pc, #628]	; (800272c <main+0x308>)
 80024b6:	f001 fd3f 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c0:	489a      	ldr	r0, [pc, #616]	; (800272c <main+0x308>)
 80024c2:	f001 fd39 	bl	8003f38 <HAL_GPIO_WritePin>
	data_buffer sensor_info;
	HAL_Delay(1000);
 80024c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ca:	f001 fa7f 	bl	80039cc <HAL_Delay>
	send_uart("Inicializando lado direito. Por favor, aguarde...\n");
 80024ce:	4898      	ldr	r0, [pc, #608]	; (8002730 <main+0x30c>)
 80024d0:	f7ff fe0c 	bl	80020ec <send_uart>


	initADS();
 80024d4:	f7fe fe68 	bl	80011a8 <initADS>

	send_uart("Montando SD...\n");
 80024d8:	4896      	ldr	r0, [pc, #600]	; (8002734 <main+0x310>)
 80024da:	f7ff fe07 	bl	80020ec <send_uart>

	mount_sd();
 80024de:	f7ff fe67 	bl	80021b0 <mount_sd>

	create_file_mod(BASE_NAME_SIZE, fileName);
 80024e2:	2303      	movs	r3, #3
 80024e4:	4994      	ldr	r1, [pc, #592]	; (8002738 <main+0x314>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fede 	bl	80022a8 <create_file_mod>

	send_uart("Inicializando IMU...\n");
 80024ec:	4893      	ldr	r0, [pc, #588]	; (800273c <main+0x318>)
 80024ee:	f7ff fdfd 	bl	80020ec <send_uart>
	//MPU6050_Init();
	//MPU6050_Retrieve_Data();
	while (MPU60501_Init() == 1);
 80024f2:	bf00      	nop
 80024f4:	f000 fb7e 	bl	8002bf4 <MPU60501_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d0fa      	beq.n	80024f4 <main+0xd0>
	send_uart("IMU inicializada com sucesso. Sistema pronto.\n");
 80024fe:	4890      	ldr	r0, [pc, #576]	; (8002740 <main+0x31c>)
 8002500:	f7ff fdf4 	bl	80020ec <send_uart>
		// ------------------------------------
		// Testing the ADS1256 functions
		// ------------------------------------
		//send_uart("Faaaaaaaaala Nigeeeeeel\n");
		//MPU6050_Update();
		MPU60501_Read_All(&MPU6050);
 8002504:	488f      	ldr	r0, [pc, #572]	; (8002744 <main+0x320>)
 8002506:	f000 fbcb 	bl	8002ca0 <MPU60501_Read_All>
		//HAL_Delay(50);

		if (conversion_trigger == 1) {
 800250a:	4b8f      	ldr	r3, [pc, #572]	; (8002748 <main+0x324>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 8131 	bne.w	8002776 <main+0x352>
			if (GetMicros() - time_counter > 6500)
 8002514:	f7ff ff5a 	bl	80023cc <GetMicros>
 8002518:	4602      	mov	r2, r0
 800251a:	4b8c      	ldr	r3, [pc, #560]	; (800274c <main+0x328>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f641 1264 	movw	r2, #6500	; 0x1964
 8002524:	4293      	cmp	r3, r2
 8002526:	f240 8126 	bls.w	8002776 <main+0x352>
			{
				sensor_info.adc_return1 = read_Value(0x68);
 800252a:	2068      	movs	r0, #104	; 0x68
 800252c:	f7ff f834 	bl	8001598 <read_Value>
 8002530:	4603      	mov	r3, r0
 8002532:	60bb      	str	r3, [r7, #8]
				sensor_info.adc_return2 = read_Value(0x58);
 8002534:	2058      	movs	r0, #88	; 0x58
 8002536:	f7ff f82f 	bl	8001598 <read_Value>
 800253a:	4603      	mov	r3, r0
 800253c:	60fb      	str	r3, [r7, #12]
				sensor_info.adc_return4 = read_Value(0x48);
 800253e:	2048      	movs	r0, #72	; 0x48
 8002540:	f7ff f82a 	bl	8001598 <read_Value>
 8002544:	4603      	mov	r3, r0
 8002546:	617b      	str	r3, [r7, #20]
				sensor_info.adc_return5 = read_Value(0x38);
 8002548:	2038      	movs	r0, #56	; 0x38
 800254a:	f7ff f825 	bl	8001598 <read_Value>
 800254e:	4603      	mov	r3, r0
 8002550:	61bb      	str	r3, [r7, #24]
				sensor_info.adc_return6 = read_Value(0x28);
 8002552:	2028      	movs	r0, #40	; 0x28
 8002554:	f7ff f820 	bl	8001598 <read_Value>
 8002558:	4603      	mov	r3, r0
 800255a:	61fb      	str	r3, [r7, #28]
				sensor_info.adc_return7 = read_Value(0x18);
 800255c:	2018      	movs	r0, #24
 800255e:	f7ff f81b 	bl	8001598 <read_Value>
 8002562:	4603      	mov	r3, r0
 8002564:	623b      	str	r3, [r7, #32]
				sensor_info.adc_return8 = read_Value(0x08);
 8002566:	2008      	movs	r0, #8
 8002568:	f7ff f816 	bl	8001598 <read_Value>
 800256c:	4603      	mov	r3, r0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
				sensor_info.adc_return3 = read_Value(0x78);
 8002570:	2078      	movs	r0, #120	; 0x78
 8002572:	f7ff f811 	bl	8001598 <read_Value>
 8002576:	4603      	mov	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
				sensor_info.elapsed = UptimeMillis;
 800257a:	4b75      	ldr	r3, [pc, #468]	; (8002750 <main+0x32c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	603b      	str	r3, [r7, #0]
				sensor_info.angleX_n = MPU6050.KalmanAngleX*100;
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <main+0x320>)
 8002582:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b72      	ldr	r3, [pc, #456]	; (8002754 <main+0x330>)
 800258c:	f7fd ffa4 	bl	80004d8 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fa4e 	bl	8000a38 <__aeabi_d2iz>
 800259c:	4603      	mov	r3, r0
 800259e:	b21b      	sxth	r3, r3
 80025a0:	80bb      	strh	r3, [r7, #4]
				sensor_info.angleY_n = MPU6050.KalmanAngleY*100;
 80025a2:	4b68      	ldr	r3, [pc, #416]	; (8002744 <main+0x320>)
 80025a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b69      	ldr	r3, [pc, #420]	; (8002754 <main+0x330>)
 80025ae:	f7fd ff93 	bl	80004d8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fa3d 	bl	8000a38 <__aeabi_d2iz>
 80025be:	4603      	mov	r3, r0
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	80fb      	strh	r3, [r7, #6]
						sensor_info.adc_return2, sensor_info.adc_return4,
						sensor_info.adc_return5, sensor_info.adc_return6,
						sensor_info.adc_return7, sensor_info.adc_return8,
						sensor_info.adc_return3);*/
				//send_uart(buffer);
				time_counter = GetMicros();
 80025c4:	f7ff ff02 	bl	80023cc <GetMicros>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a60      	ldr	r2, [pc, #384]	; (800274c <main+0x328>)
 80025cc:	6013      	str	r3, [r2, #0]
				//				const uint8_t buflen = strlen(buffer);
				//				memccpy(&buffer_SD[line_counter * buflen], buffer, 0, buflen);
				//				if (line_counter * buflen > BUFFER_SIZE * ROW_SIZE - buflen) {

				char *pMyData = &sensor_info;
 80025ce:	463b      	mov	r3, r7
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c

				for (j = 0; j<sizeof(data_buffer);j++)
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <main+0x2f8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e015      	b.n	8002606 <main+0x1e2>
				{
					buffer[j+40*line_counter] = pMyData[j];
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <main+0x2f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e0:	18d1      	adds	r1, r2, r3
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <main+0x334>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b4a      	ldr	r3, [pc, #296]	; (800271c <main+0x2f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	7809      	ldrb	r1, [r1, #0]
 80025f8:	4a49      	ldr	r2, [pc, #292]	; (8002720 <main+0x2fc>)
 80025fa:	54d1      	strb	r1, [r2, r3]
				for (j = 0; j<sizeof(data_buffer);j++)
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <main+0x2f8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a46      	ldr	r2, [pc, #280]	; (800271c <main+0x2f8>)
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b45      	ldr	r3, [pc, #276]	; (800271c <main+0x2f8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b27      	cmp	r3, #39	; 0x27
 800260c:	d9e5      	bls.n	80025da <main+0x1b6>
				}
				line_counter++;
 800260e:	4b52      	ldr	r3, [pc, #328]	; (8002758 <main+0x334>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <main+0x334>)
 8002616:	6013      	str	r3, [r2, #0]
				if(line_counter == 12){
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <main+0x334>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	f040 80aa 	bne.w	8002776 <main+0x352>
					//send_uart_byte(buffer);
					//HAL_UART_Transmit(&huart1, (uint8_t *) buffer, sizeof(buffer), 2000);
					write_file_byte(fileName);
 8002622:	4845      	ldr	r0, [pc, #276]	; (8002738 <main+0x314>)
 8002624:	f7ff fe12 	bl	800224c <write_file_byte>
					line_counter = 0;
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <main+0x334>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

		}
		// ------------------------------------
		// Strip of the code that treats the SD
		// ------------------------------------
		while (IsDataAvailable()) {
 800262e:	e0a2      	b.n	8002776 <main+0x352>
			//		  buffer = Uart_read();
			Get_string(buffer);
 8002630:	483b      	ldr	r0, [pc, #236]	; (8002720 <main+0x2fc>)
 8002632:	f7fe fd07 	bl	8001044 <Get_string>
			uint8_t len = cmdlength(buffer);
 8002636:	483a      	ldr	r0, [pc, #232]	; (8002720 <main+0x2fc>)
 8002638:	f7ff fd70 	bl	800211c <cmdlength>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			get_path();
 8002642:	f7ff fd81 	bl	8002148 <get_path>
			//

			if (!(strncmp("begin", buffer, len)))
 8002646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800264a:	461a      	mov	r2, r3
 800264c:	4934      	ldr	r1, [pc, #208]	; (8002720 <main+0x2fc>)
 800264e:	4843      	ldr	r0, [pc, #268]	; (800275c <main+0x338>)
 8002650:	f008 fa02 	bl	800aa58 <strncmp>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <main+0x23c>
				cmd = 'x';
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <main+0x33c>)
 800265c:	2278      	movs	r2, #120	; 0x78
 800265e:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("end", buffer, len)))
 8002660:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002664:	461a      	mov	r2, r3
 8002666:	492e      	ldr	r1, [pc, #184]	; (8002720 <main+0x2fc>)
 8002668:	483e      	ldr	r0, [pc, #248]	; (8002764 <main+0x340>)
 800266a:	f008 f9f5 	bl	800aa58 <strncmp>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <main+0x256>
				cmd = 'b';
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <main+0x33c>)
 8002676:	2262      	movs	r2, #98	; 0x62
 8002678:	701a      	strb	r2, [r3, #0]

			switch (cmd) {
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <main+0x33c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b62      	cmp	r3, #98	; 0x62
 8002680:	d021      	beq.n	80026c6 <main+0x2a2>
 8002682:	2b78      	cmp	r3, #120	; 0x78
 8002684:	d172      	bne.n	800276c <main+0x348>
			case ('x'):
																						cmd = 0;
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <main+0x33c>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 1;
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <main+0x324>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
			UptimeMillis = 0;
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <main+0x32c>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
			//preInterval = UptimeMillis;
			clear_buffer();
 8002698:	f7ff fcda 	bl	8002050 <clear_buffer>
			clear_path();
 800269c:	f7ff fd0c 	bl	80020b8 <clear_path>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a6:	4821      	ldr	r0, [pc, #132]	; (800272c <main+0x308>)
 80026a8:	f001 fc46 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b2:	481e      	ldr	r0, [pc, #120]	; (800272c <main+0x308>)
 80026b4:	f001 fc40 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026be:	481b      	ldr	r0, [pc, #108]	; (800272c <main+0x308>)
 80026c0:	f001 fc3a 	bl	8003f38 <HAL_GPIO_WritePin>
			break;
 80026c4:	e057      	b.n	8002776 <main+0x352>

			case ('b'):
																						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026cc:	4817      	ldr	r0, [pc, #92]	; (800272c <main+0x308>)
 80026ce:	f001 fc33 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d8:	4814      	ldr	r0, [pc, #80]	; (800272c <main+0x308>)
 80026da:	f001 fc2d 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80026de:	2201      	movs	r2, #1
 80026e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e4:	4811      	ldr	r0, [pc, #68]	; (800272c <main+0x308>)
 80026e6:	f001 fc27 	bl	8003f38 <HAL_GPIO_WritePin>
			cmd = 0;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <main+0x33c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 0;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <main+0x324>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
			write_file_mod(fileName, buffer_SD);
 80026f6:	491c      	ldr	r1, [pc, #112]	; (8002768 <main+0x344>)
 80026f8:	480f      	ldr	r0, [pc, #60]	; (8002738 <main+0x314>)
 80026fa:	f7ff fd7b 	bl	80021f4 <write_file_mod>
			close_file(fileName);
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <main+0x314>)
 8002700:	f7ff fe3e 	bl	8002380 <close_file>
			clear_buffer_SD();
 8002704:	f7ff fcbe 	bl	8002084 <clear_buffer_SD>
			clear_buffer();
 8002708:	f7ff fca2 	bl	8002050 <clear_buffer>
			clear_path();
 800270c:	f7ff fcd4 	bl	80020b8 <clear_path>
			create_file_mod(BASE_NAME_SIZE, fileName);
 8002710:	2303      	movs	r3, #3
 8002712:	4909      	ldr	r1, [pc, #36]	; (8002738 <main+0x314>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdc7 	bl	80022a8 <create_file_mod>
			break;
 800271a:	e02c      	b.n	8002776 <main+0x352>
 800271c:	20001a3c 	.word	0x20001a3c
 8002720:	200013bc 	.word	0x200013bc
 8002724:	20001af0 	.word	0x20001af0
 8002728:	40010c00 	.word	0x40010c00
 800272c:	40011000 	.word	0x40011000
 8002730:	0800da90 	.word	0x0800da90
 8002734:	0800dac4 	.word	0x0800dac4
 8002738:	20000008 	.word	0x20000008
 800273c:	0800dad4 	.word	0x0800dad4
 8002740:	0800daec 	.word	0x0800daec
 8002744:	20001a98 	.word	0x20001a98
 8002748:	20000350 	.word	0x20000350
 800274c:	20000358 	.word	0x20000358
 8002750:	20001b3c 	.word	0x20001b3c
 8002754:	40590000 	.word	0x40590000
 8002758:	20000354 	.word	0x20000354
 800275c:	0800db1c 	.word	0x0800db1c
 8002760:	2000035c 	.word	0x2000035c
 8002764:	0800db24 	.word	0x0800db24
 8002768:	20000764 	.word	0x20000764

			default:
				clear_buffer();
 800276c:	f7ff fc70 	bl	8002050 <clear_buffer>
				clear_path();
 8002770:	f7ff fca2 	bl	80020b8 <clear_path>
				break;
 8002774:	bf00      	nop
		while (IsDataAvailable()) {
 8002776:	f7fe fc4f 	bl	8001018 <IsDataAvailable>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f af57 	bne.w	8002630 <main+0x20c>
		MPU60501_Read_All(&MPU6050);
 8002782:	e6bf      	b.n	8002504 <main+0xe0>

08002784 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	; 0x40
 8002788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	2228      	movs	r2, #40	; 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f007 fcd8 	bl	800a148 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b8:	2302      	movs	r3, #2
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fbe3 	bl	8004f98 <HAL_RCC_OscConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <SystemClock_Config+0x58>
	{
		Error_Handler();
 80027d8:	f000 fa06 	bl	8002be8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027dc:	230f      	movs	r3, #15
 80027de:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	2302      	movs	r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2102      	movs	r1, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fe4e 	bl	8005498 <HAL_RCC_ClockConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8002802:	f000 f9f1 	bl	8002be8 <Error_Handler>
	}
}
 8002806:	bf00      	nop
 8002808:	3740      	adds	r7, #64	; 0x40
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_I2C1_Init+0x50>)
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <MX_I2C1_Init+0x54>)
 8002818:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_I2C1_Init+0x50>)
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <MX_I2C1_Init+0x58>)
 800281e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_I2C1_Init+0x50>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_I2C1_Init+0x50>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_I2C1_Init+0x50>)
 800282e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002832:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <MX_I2C1_Init+0x50>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_I2C1_Init+0x50>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <MX_I2C1_Init+0x50>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_I2C1_Init+0x50>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_I2C1_Init+0x50>)
 800284e:	f001 fba3 	bl	8003f98 <HAL_I2C_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002858:	f000 f9c6 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200005b4 	.word	0x200005b4
 8002864:	40005400 	.word	0x40005400
 8002868:	00061a80 	.word	0x00061a80

0800286c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <MX_SPI1_Init+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800287c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002892:	2201      	movs	r2, #1
 8002894:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028a0:	2210      	movs	r2, #16
 80028a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028b8:	220a      	movs	r2, #10
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028be:	f002 ff85 	bl	80057cc <HAL_SPI_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80028c8:	f000 f98e 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200006e4 	.word	0x200006e4
 80028d4:	40013000 	.word	0x40013000

080028d8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_SPI2_Init+0x64>)
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <MX_SPI2_Init+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_SPI2_Init+0x64>)
 80028e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_SPI2_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_SPI2_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_SPI2_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_SPI2_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_SPI2_Init+0x64>)
 8002904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002908:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_SPI2_Init+0x64>)
 800290c:	2208      	movs	r2, #8
 800290e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_SPI2_Init+0x64>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_SPI2_Init+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_SPI2_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_SPI2_Init+0x64>)
 8002924:	220a      	movs	r2, #10
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_SPI2_Init+0x64>)
 800292a:	f002 ff4f 	bl	80057cc <HAL_SPI_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8002934:	f000 f958 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20001a40 	.word	0x20001a40
 8002940:	40003800 	.word	0x40003800

08002944 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0308 	add.w	r3, r7, #8
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	463b      	mov	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002966:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 36-1;
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM2_Init+0x94>)
 800296a:	2223      	movs	r2, #35	; 0x23
 800296c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535-1;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002976:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800297a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_TIM2_Init+0x94>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <MX_TIM2_Init+0x94>)
 800298a:	f003 fc97 	bl	80062bc <HAL_TIM_Base_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8002994:	f000 f928 	bl	8002be8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM2_Init+0x94>)
 80029a6:	f003 fd23 	bl	80063f0 <HAL_TIM_ConfigClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80029b0:	f000 f91a 	bl	8002be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029bc:	463b      	mov	r3, r7
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM2_Init+0x94>)
 80029c2:	f003 fed1 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80029cc:	f000 f90c 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20001af0 	.word	0x20001af0

080029dc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <MX_USART1_UART_Init+0x50>)
 80029e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 80029e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a12:	4805      	ldr	r0, [pc, #20]	; (8002a28 <MX_USART1_UART_Init+0x4c>)
 8002a14:	f003 ff06 	bl	8006824 <HAL_UART_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002a1e:	f000 f8e3 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000664 	.word	0x20000664
 8002a2c:	40013800 	.word	0x40013800

08002a30 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART2_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a3c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002a40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a68:	f003 fedc 	bl	8006824 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002a72:	f000 f8b9 	bl	8002be8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200015c8 	.word	0x200015c8
 8002a80:	40004400 	.word	0x40004400

08002a84 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a41      	ldr	r2, [pc, #260]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <MX_GPIO_Init+0x120>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002afe:	482a      	ldr	r0, [pc, #168]	; (8002ba8 <MX_GPIO_Init+0x124>)
 8002b00:	f001 fa1a 	bl	8003f38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_NCS_Pin|SPI2_NCS_Pin, GPIO_PIN_RESET);
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <MX_GPIO_Init+0x128>)
 8002b0c:	f001 fa14 	bl	8003f38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI1_SYNC_Pin|SPI1_RST_Pin, GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2106      	movs	r1, #6
 8002b14:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <MX_GPIO_Init+0x12c>)
 8002b16:	f001 fa0f 	bl	8003f38 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002b1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4619      	mov	r1, r3
 8002b32:	481d      	ldr	r0, [pc, #116]	; (8002ba8 <MX_GPIO_Init+0x124>)
 8002b34:	f001 f87c 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_NCS_Pin SPI2_NCS_Pin */
	GPIO_InitStruct.Pin = SPI1_NCS_Pin|SPI2_NCS_Pin;
 8002b38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4816      	ldr	r0, [pc, #88]	; (8002bac <MX_GPIO_Init+0x128>)
 8002b52:	f001 f86d 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_RDY_Pin */
	GPIO_InitStruct.Pin = SPI1_RDY_Pin;
 8002b56:	2301      	movs	r3, #1
 8002b58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <MX_GPIO_Init+0x130>)
 8002b5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_RDY_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	4811      	ldr	r0, [pc, #68]	; (8002bb0 <MX_GPIO_Init+0x12c>)
 8002b6a:	f001 f861 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SYNC_Pin SPI1_RST_Pin */
	GPIO_InitStruct.Pin = SPI1_SYNC_Pin|SPI1_RST_Pin;
 8002b6e:	2306      	movs	r3, #6
 8002b70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0310 	add.w	r3, r7, #16
 8002b82:	4619      	mov	r1, r3
 8002b84:	480a      	ldr	r0, [pc, #40]	; (8002bb0 <MX_GPIO_Init+0x12c>)
 8002b86:	f001 f853 	bl	8003c30 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2006      	movs	r0, #6
 8002b90:	f001 f817 	bl	8003bc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b94:	2006      	movs	r0, #6
 8002b96:	f001 f830 	bl	8003bfa <HAL_NVIC_EnableIRQ>

}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40010800 	.word	0x40010800
 8002bb0:	40010c00 	.word	0x40010c00
 8002bb4:	10210000 	.word	0x10210000

08002bb8 <delayMicroseconds>:

/* USER CODE BEGIN 4 */
void delayMicroseconds(uint16_t us) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <delayMicroseconds+0x2c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8002bca:	bf00      	nop
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <delayMicroseconds+0x2c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3f9      	bcc.n	8002bcc <delayMicroseconds+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20001af0 	.word	0x20001af0

08002be8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bec:	b672      	cpsid	i
}
 8002bee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bf0:	e7fe      	b.n	8002bf0 <Error_Handler+0x8>
	...

08002bf4 <MPU60501_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU60501_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002bfa:	2364      	movs	r3, #100	; 0x64
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2301      	movs	r3, #1
 8002c08:	2275      	movs	r2, #117	; 0x75
 8002c0a:	21d0      	movs	r1, #208	; 0xd0
 8002c0c:	4822      	ldr	r0, [pc, #136]	; (8002c98 <MPU60501_Init+0xa4>)
 8002c0e:	f001 fc01 	bl	8004414 <HAL_I2C_Mem_Read>

    if (check == 114) // 0x68 will be returned by the sensor if everything goes well
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	2b72      	cmp	r3, #114	; 0x72
 8002c16:	d139      	bne.n	8002c8c <MPU60501_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002c1c:	2364      	movs	r3, #100	; 0x64
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	1dbb      	adds	r3, r7, #6
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	226b      	movs	r2, #107	; 0x6b
 8002c2c:	21d0      	movs	r1, #208	; 0xd0
 8002c2e:	481a      	ldr	r0, [pc, #104]	; (8002c98 <MPU60501_Init+0xa4>)
 8002c30:	f001 faf6 	bl	8004220 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002c34:	2307      	movs	r3, #7
 8002c36:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	2219      	movs	r2, #25
 8002c48:	21d0      	movs	r1, #208	; 0xd0
 8002c4a:	4813      	ldr	r0, [pc, #76]	; (8002c98 <MPU60501_Init+0xa4>)
 8002c4c:	f001 fae8 	bl	8004220 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002c50:	2300      	movs	r3, #0
 8002c52:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002c54:	2364      	movs	r3, #100	; 0x64
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	1dbb      	adds	r3, r7, #6
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2301      	movs	r3, #1
 8002c62:	221c      	movs	r2, #28
 8002c64:	21d0      	movs	r1, #208	; 0xd0
 8002c66:	480c      	ldr	r0, [pc, #48]	; (8002c98 <MPU60501_Init+0xa4>)
 8002c68:	f001 fada 	bl	8004220 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002c70:	2364      	movs	r3, #100	; 0x64
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2301      	movs	r3, #1
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	1dbb      	adds	r3, r7, #6
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	221b      	movs	r2, #27
 8002c80:	21d0      	movs	r1, #208	; 0xd0
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <MPU60501_Init+0xa4>)
 8002c84:	f001 facc 	bl	8004220 <HAL_I2C_Mem_Write>
        return 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <MPU60501_Init+0x9a>
    }
    return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200005b4 	.word	0x200005b4
 8002c9c:	00000000 	.word	0x00000000

08002ca0 <MPU60501_Read_All>:

void MPU60501_Read_All(MPU6050_t *DataStruct)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b094      	sub	sp, #80	; 0x50
 8002ca6:	af04      	add	r7, sp, #16
 8002ca8:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002caa:	2364      	movs	r3, #100	; 0x64
 8002cac:	9302      	str	r3, [sp, #8]
 8002cae:	230e      	movs	r3, #14
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	223b      	movs	r2, #59	; 0x3b
 8002cbc:	21d0      	movs	r1, #208	; 0xd0
 8002cbe:	488c      	ldr	r0, [pc, #560]	; (8002ef0 <MPU60501_Read_All+0x250>)
 8002cc0:	f001 fba8 	bl	8004414 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002cc4:	7a3b      	ldrb	r3, [r7, #8]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002cd6:	7abb      	ldrb	r3, [r7, #10]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b21a      	sxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002ce8:	7b3b      	ldrb	r3, [r7, #12]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	7b7b      	ldrb	r3, [r7, #13]
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b21a      	sxth	r2, r3
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002d08:	7c3b      	ldrb	r3, [r7, #16]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	7c7b      	ldrb	r3, [r7, #17]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002d1a:	7cbb      	ldrb	r3, [r7, #18]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002d2c:	7d3b      	ldrb	r3, [r7, #20]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	7d7b      	ldrb	r3, [r7, #21]
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fb5d 	bl	8000404 <__aeabi_i2d>
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <MPU60501_Read_All+0x254>)
 8002d50:	f7fd fcec 	bl	800072c <__aeabi_ddiv>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb4d 	bl	8000404 <__aeabi_i2d>
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <MPU60501_Read_All+0x254>)
 8002d70:	f7fd fcdc 	bl	800072c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fb3d 	bl	8000404 <__aeabi_i2d>
 8002d8a:	a353      	add	r3, pc, #332	; (adr r3, 8002ed8 <MPU60501_Read_All+0x238>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fccc 	bl	800072c <__aeabi_ddiv>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002d9e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd ff2a 	bl	8000bfc <__aeabi_i2f>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4953      	ldr	r1, [pc, #332]	; (8002ef8 <MPU60501_Read_All+0x258>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f82d 	bl	8000e0c <__aeabi_fdiv>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4951      	ldr	r1, [pc, #324]	; (8002efc <MPU60501_Read_All+0x25c>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fe6c 	bl	8000a94 <__addsf3>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fb1a 	bl	8000404 <__aeabi_i2d>
 8002dd0:	a343      	add	r3, pc, #268	; (adr r3, 8002ee0 <MPU60501_Read_All+0x240>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fca9 	bl	800072c <__aeabi_ddiv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb0a 	bl	8000404 <__aeabi_i2d>
 8002df0:	a33b      	add	r3, pc, #236	; (adr r3, 8002ee0 <MPU60501_Read_All+0x240>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fc99 	bl	800072c <__aeabi_ddiv>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fafa 	bl	8000404 <__aeabi_i2d>
 8002e10:	a333      	add	r3, pc, #204	; (adr r3, 8002ee0 <MPU60501_Read_All+0x240>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fc89 	bl	800072c <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002e24:	f000 fdc8 	bl	80039b8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <MPU60501_Read_All+0x260>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fad7 	bl	80003e4 <__aeabi_ui2d>
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <MPU60501_Read_All+0x264>)
 8002e3c:	f7fd fc76 	bl	800072c <__aeabi_ddiv>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002e48:	f000 fdb6 	bl	80039b8 <HAL_GetTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <MPU60501_Read_All+0x260>)
 8002e50:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e60:	fb03 f202 	mul.w	r2, r3, r2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e72:	fb03 f301 	mul.w	r3, r3, r1
 8002e76:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fac3 	bl	8000404 <__aeabi_i2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f00a f9a3 	bl	800d1d0 <sqrt>
 8002e8a:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e9a:	f7fd fd85 	bl	80009a8 <__aeabi_dcmpeq>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d131      	bne.n	8002f08 <MPU60501_Read_All+0x268>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd faaa 	bl	8000404 <__aeabi_i2d>
 8002eb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb4:	f7fd fc3a 	bl	800072c <__aeabi_ddiv>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f009 fff6 	bl	800ceb0 <atan>
 8002ec4:	a308      	add	r3, pc, #32	; (adr r3, 8002ee8 <MPU60501_Read_All+0x248>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fb05 	bl	80004d8 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002ed6:	e01d      	b.n	8002f14 <MPU60501_Read_All+0x274>
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	40cc2900 	.word	0x40cc2900
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40606000 	.word	0x40606000
 8002ee8:	1a63c1f8 	.word	0x1a63c1f8
 8002eec:	404ca5dc 	.word	0x404ca5dc
 8002ef0:	200005b4 	.word	0x200005b4
 8002ef4:	40d00000 	.word	0x40d00000
 8002ef8:	43aa0000 	.word	0x43aa0000
 8002efc:	42121eb8 	.word	0x42121eb8
 8002f00:	20001b38 	.word	0x20001b38
 8002f04:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1a:	425b      	negs	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fa71 	bl	8000404 <__aeabi_i2d>
 8002f22:	4682      	mov	sl, r0
 8002f24:	468b      	mov	fp, r1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fa69 	bl	8000404 <__aeabi_i2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4650      	mov	r0, sl
 8002f38:	4659      	mov	r1, fp
 8002f3a:	f00a f946 	bl	800d1ca <atan2>
 8002f3e:	a342      	add	r3, pc, #264	; (adr r3, 8003048 <MPU60501_Read_All+0x3a8>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fac8 	bl	80004d8 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <MPU60501_Read_All+0x3b0>)
 8002f56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f5a:	f7fd fd2f 	bl	80009bc <__aeabi_dcmplt>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <MPU60501_Read_All+0x2da>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <MPU60501_Read_All+0x3b4>)
 8002f70:	f7fd fd42 	bl	80009f8 <__aeabi_dcmpgt>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <MPU60501_Read_All+0x304>
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	4b35      	ldr	r3, [pc, #212]	; (8003054 <MPU60501_Read_All+0x3b4>)
 8002f80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f84:	f7fd fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <MPU60501_Read_All+0x31a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <MPU60501_Read_All+0x3b0>)
 8002f9a:	f7fd fd0f 	bl	80009bc <__aeabi_dcmplt>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <MPU60501_Read_All+0x31a>
    {
        KalmanY.angle = pitch;
 8002fa4:	492c      	ldr	r1, [pc, #176]	; (8003058 <MPU60501_Read_All+0x3b8>)
 8002fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002faa:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002fb8:	e012      	b.n	8002fe0 <MPU60501_Read_All+0x340>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fc8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd0:	4821      	ldr	r0, [pc, #132]	; (8003058 <MPU60501_Read_All+0x3b8>)
 8002fd2:	f000 f845 	bl	8003060 <Kalman_getAngle>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <MPU60501_Read_All+0x3b4>)
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	f7fd fcff 	bl	80009f8 <__aeabi_dcmpgt>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <MPU60501_Read_All+0x372>
        DataStruct->Gx = -DataStruct->Gx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003006:	4614      	mov	r4, r2
 8003008:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003018:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800301c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003020:	e9cd 2300 	strd	r2, r3, [sp]
 8003024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <MPU60501_Read_All+0x3bc>)
 800302a:	f000 f819 	bl	8003060 <Kalman_getAngle>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003038:	bf00      	nop
 800303a:	3740      	adds	r7, #64	; 0x40
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	f3af 8000 	nop.w
 8003048:	1a63c1f8 	.word	0x1a63c1f8
 800304c:	404ca5dc 	.word	0x404ca5dc
 8003050:	c0568000 	.word	0xc0568000
 8003054:	40568000 	.word	0x40568000
 8003058:	20000060 	.word	0x20000060
 800305c:	20000018 	.word	0x20000018

08003060 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b092      	sub	sp, #72	; 0x48
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003072:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003076:	f7fd f877 	bl	8000168 <__aeabi_dsub>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800308c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003090:	f7fd fa22 	bl	80004d8 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd f866 	bl	800016c <__adddf3>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80030b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030ba:	f7fd fa0d 	bl	80004d8 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80030cc:	f7fd f84c 	bl	8000168 <__aeabi_dsub>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030de:	f7fd f843 	bl	8000168 <__aeabi_dsub>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd f83c 	bl	800016c <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003100:	f7fd f9ea 	bl	80004d8 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f82e 	bl	800016c <__adddf3>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003126:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800312a:	f7fd f9d5 	bl	80004d8 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4620      	mov	r0, r4
 8003134:	4629      	mov	r1, r5
 8003136:	f7fd f817 	bl	8000168 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003150:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003154:	f7fd f9c0 	bl	80004d8 <__aeabi_dmul>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	f7fd f802 	bl	8000168 <__aeabi_dsub>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800317a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800317e:	f7fd f9ab 	bl	80004d8 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fc ffef 	bl	800016c <__adddf3>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031a4:	f7fc ffe2 	bl	800016c <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80031b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031ba:	f7fd fab7 	bl	800072c <__aeabi_ddiv>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80031cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d0:	f7fd faac 	bl	800072c <__aeabi_ddiv>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031e6:	f7fc ffbf 	bl	8000168 <__aeabi_dsub>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80031f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003200:	f7fd f96a 	bl	80004d8 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4620      	mov	r0, r4
 800320a:	4629      	mov	r1, r5
 800320c:	f7fc ffae 	bl	800016c <__adddf3>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003220:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003224:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003228:	f7fd f956 	bl	80004d8 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fc ff9a 	bl	800016c <__adddf3>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003248:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003252:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800325c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003264:	f7fd f938 	bl	80004d8 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fc ff7a 	bl	8000168 <__aeabi_dsub>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003284:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003288:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328c:	f7fd f924 	bl	80004d8 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fc ff66 	bl	8000168 <__aeabi_dsub>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80032ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032b4:	f7fd f910 	bl	80004d8 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fc ff52 	bl	8000168 <__aeabi_dsub>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80032d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032dc:	f7fd f8fc 	bl	80004d8 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fc ff3e 	bl	8000168 <__aeabi_dsub>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	3748      	adds	r7, #72	; 0x48
 8003302:	46bd      	mov	sp, r7
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_MspInit+0x5c>)
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <HAL_MspInit+0x5c>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6193      	str	r3, [r2, #24]
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_MspInit+0x5c>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_MspInit+0x5c>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_MspInit+0x5c>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_MspInit+0x5c>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_MspInit+0x60>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_MspInit+0x60>)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40021000 	.word	0x40021000
 8003368:	40010000 	.word	0x40010000

0800336c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0310 	add.w	r3, r7, #16
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_I2C_MspInit+0x70>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d123      	bne.n	80033d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 8003392:	f043 0308 	orr.w	r3, r3, #8
 8003396:	6193      	str	r3, [r2, #24]
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033a4:	23c0      	movs	r3, #192	; 0xc0
 80033a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a8:	2312      	movs	r3, #18
 80033aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ac:	2303      	movs	r3, #3
 80033ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	480b      	ldr	r0, [pc, #44]	; (80033e4 <HAL_I2C_MspInit+0x78>)
 80033b8:	f000 fc3a 	bl	8003c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 80033c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c6:	61d3      	str	r3, [r2, #28]
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_I2C_MspInit+0x74>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033d4:	bf00      	nop
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40005400 	.word	0x40005400
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40010c00 	.word	0x40010c00

080033e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0318 	add.w	r3, r7, #24
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <HAL_SPI_MspInit+0xf8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d130      	bne.n	800346a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003408:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4a35      	ldr	r2, [pc, #212]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800340e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003412:	6193      	str	r3, [r2, #24]
 8003414:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a2f      	ldr	r2, [pc, #188]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6193      	str	r3, [r2, #24]
 800342c:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 0318 	add.w	r3, r7, #24
 8003448:	4619      	mov	r1, r3
 800344a:	4827      	ldr	r0, [pc, #156]	; (80034e8 <HAL_SPI_MspInit+0x100>)
 800344c:	f000 fbf0 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	4619      	mov	r1, r3
 8003462:	4821      	ldr	r0, [pc, #132]	; (80034e8 <HAL_SPI_MspInit+0x100>)
 8003464:	f000 fbe4 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003468:	e036      	b.n	80034d8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_SPI_MspInit+0x104>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d131      	bne.n	80034d8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800347a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_SPI_MspInit+0xfc>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80034a4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b2:	f107 0318 	add.w	r3, r7, #24
 80034b6:	4619      	mov	r1, r3
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <HAL_SPI_MspInit+0x108>)
 80034ba:	f000 fbb9 	bl	8003c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	4619      	mov	r1, r3
 80034d2:	4807      	ldr	r0, [pc, #28]	; (80034f0 <HAL_SPI_MspInit+0x108>)
 80034d4:	f000 fbac 	bl	8003c30 <HAL_GPIO_Init>
}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40013000 	.word	0x40013000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40010c00 	.word	0x40010c00

080034f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d10b      	bne.n	800351e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_TIM_Base_MspInit+0x34>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_TIM_Base_MspInit+0x34>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	61d3      	str	r3, [r2, #28]
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_TIM_Base_MspInit+0x34>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 0318 	add.w	r3, r7, #24
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_UART_MspInit+0x108>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d13a      	bne.n	80035c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800354c:	4b3a      	ldr	r3, [pc, #232]	; (8003638 <HAL_UART_MspInit+0x10c>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	4a39      	ldr	r2, [pc, #228]	; (8003638 <HAL_UART_MspInit+0x10c>)
 8003552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003556:	6193      	str	r3, [r2, #24]
 8003558:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_UART_MspInit+0x10c>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_UART_MspInit+0x10c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a33      	ldr	r2, [pc, #204]	; (8003638 <HAL_UART_MspInit+0x10c>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6193      	str	r3, [r2, #24]
 8003570:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_UART_MspInit+0x10c>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003586:	2303      	movs	r3, #3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	4619      	mov	r1, r3
 8003590:	482a      	ldr	r0, [pc, #168]	; (800363c <HAL_UART_MspInit+0x110>)
 8003592:	f000 fb4d 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4619      	mov	r1, r3
 80035aa:	4824      	ldr	r0, [pc, #144]	; (800363c <HAL_UART_MspInit+0x110>)
 80035ac:	f000 fb40 	bl	8003c30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2025      	movs	r0, #37	; 0x25
 80035b6:	f000 fb04 	bl	8003bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035ba:	2025      	movs	r0, #37	; 0x25
 80035bc:	f000 fb1d 	bl	8003bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035c0:	e034      	b.n	800362c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_UART_MspInit+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d12f      	bne.n	800362c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6193      	str	r3, [r2, #24]
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_UART_MspInit+0x10c>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035fc:	2304      	movs	r3, #4
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	4619      	mov	r1, r3
 800360e:	480b      	ldr	r0, [pc, #44]	; (800363c <HAL_UART_MspInit+0x110>)
 8003610:	f000 fb0e 	bl	8003c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003614:	2308      	movs	r3, #8
 8003616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003620:	f107 0318 	add.w	r3, r7, #24
 8003624:	4619      	mov	r1, r3
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <HAL_UART_MspInit+0x110>)
 8003628:	f000 fb02 	bl	8003c30 <HAL_GPIO_Init>
}
 800362c:	bf00      	nop
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000
 800363c:	40010800 	.word	0x40010800
 8003640:	40004400 	.word	0x40004400

08003644 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint32_t UptimeMillis;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <SDTimer_Handler+0x3c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <SDTimer_Handler+0x1c>
		Timer1--;
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <SDTimer_Handler+0x3c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <SDTimer_Handler+0x3c>)
 800365e:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <SDTimer_Handler+0x40>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <SDTimer_Handler+0x34>
		Timer2--;
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <SDTimer_Handler+0x40>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <SDTimer_Handler+0x40>)
 8003676:	701a      	strb	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20001b41 	.word	0x20001b41
 8003684:	20001b40 	.word	0x20001b40

08003688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800368c:	e7fe      	b.n	800368c <NMI_Handler+0x4>

0800368e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003692:	e7fe      	b.n	8003692 <HardFault_Handler+0x4>

08003694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003698:	e7fe      	b.n	8003698 <MemManage_Handler+0x4>

0800369a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369e:	e7fe      	b.n	800369e <BusFault_Handler+0x4>

080036a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <UsageFault_Handler+0x4>

080036a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	UptimeMillis++;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <SysTick_Handler+0x38>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <SysTick_Handler+0x38>)
 80036d8:	6013      	str	r3, [r2, #0]
	FatFsCnt++;
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <SysTick_Handler+0x3c>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <SysTick_Handler+0x3c>)
 80036e6:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <SysTick_Handler+0x3c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	d904      	bls.n	80036fc <SysTick_Handler+0x30>
	{
		FatFsCnt = 0;
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SysTick_Handler+0x3c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80036f8:	f7ff ffa4 	bl	8003644 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036fc:	f000 f94a 	bl	8003994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20001b3c 	.word	0x20001b3c
 8003708:	2000035d 	.word	0x2000035d

0800370c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003710:	2001      	movs	r0, #1
 8003712:	f000 fc29 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <USART1_IRQHandler+0x10>)
 8003722:	f7fd fce7 	bl	80010f4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000664 	.word	0x20000664

08003730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <_kill>:

int _kill(int pid, int sig)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003748:	f006 fcd4 	bl	800a0f4 <__errno>
 800374c:	4603      	mov	r3, r0
 800374e:	2216      	movs	r2, #22
 8003750:	601a      	str	r2, [r3, #0]
	return -1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_exit>:

void _exit (int status)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003766:	f04f 31ff 	mov.w	r1, #4294967295
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffe7 	bl	800373e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003770:	e7fe      	b.n	8003770 <_exit+0x12>

08003772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e00a      	b.n	800379a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003784:	f3af 8000 	nop.w
 8003788:	4601      	mov	r1, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	60ba      	str	r2, [r7, #8]
 8003790:	b2ca      	uxtb	r2, r1
 8003792:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	dbf0      	blt.n	8003784 <_read+0x12>
	}

return len;
 80037a2:	687b      	ldr	r3, [r7, #4]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e009      	b.n	80037d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	60ba      	str	r2, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	dbf1      	blt.n	80037be <_write+0x12>
	}
	return len;
 80037da:	687b      	ldr	r3, [r7, #4]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_close>:

int _close(int file)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	return -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800380a:	605a      	str	r2, [r3, #4]
	return 0;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <_isatty>:

int _isatty(int file)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	return 1;
 8003820:	2301      	movs	r3, #1
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
	return 0;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <_sbrk+0x5c>)
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <_sbrk+0x60>)
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <_sbrk+0x64>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <_sbrk+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d207      	bcs.n	8003884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003874:	f006 fc3e 	bl	800a0f4 <__errno>
 8003878:	4603      	mov	r3, r0
 800387a:	220c      	movs	r2, #12
 800387c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	e009      	b.n	8003898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_sbrk+0x64>)
 8003894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20005000 	.word	0x20005000
 80038a4:	00000400 	.word	0x00000400
 80038a8:	20000360 	.word	0x20000360
 80038ac:	200023c0 	.word	0x200023c0

080038b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038be:	e003      	b.n	80038c8 <LoopCopyDataInit>

080038c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038c6:	3104      	adds	r1, #4

080038c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038c8:	480a      	ldr	r0, [pc, #40]	; (80038f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038d0:	d3f6      	bcc.n	80038c0 <CopyDataInit>
  ldr r2, =_sbss
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038d4:	e002      	b.n	80038dc <LoopFillZerobss>

080038d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038d8:	f842 3b04 	str.w	r3, [r2], #4

080038dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038e0:	d3f9      	bcc.n	80038d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038e2:	f7ff ffe5 	bl	80038b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038e6:	f006 fc0b 	bl	800a100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ea:	f7fe fd9b 	bl	8002424 <main>
  bx lr
 80038ee:	4770      	bx	lr
  ldr r3, =_sidata
 80038f0:	0800e548 	.word	0x0800e548
  ldr r0, =_sdata
 80038f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038f8:	2000029c 	.word	0x2000029c
  ldr r2, =_sbss
 80038fc:	200002a0 	.word	0x200002a0
  ldr r3, = _ebss
 8003900:	200023bc 	.word	0x200023bc

08003904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003904:	e7fe      	b.n	8003904 <ADC1_2_IRQHandler>
	...

08003908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_Init+0x28>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_Init+0x28>)
 8003912:	f043 0310 	orr.w	r3, r3, #16
 8003916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003918:	2003      	movs	r0, #3
 800391a:	f000 f947 	bl	8003bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800391e:	2000      	movs	r0, #0
 8003920:	f000 f808 	bl	8003934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003924:	f7ff fcf0 	bl	8003308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40022000 	.word	0x40022000

08003934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_InitTick+0x54>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_InitTick+0x58>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394a:	fbb3 f3f1 	udiv	r3, r3, r1
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f95f 	bl	8003c16 <HAL_SYSTICK_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00e      	b.n	8003980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d80a      	bhi.n	800397e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003968:	2200      	movs	r2, #0
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	f000 f927 	bl	8003bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <HAL_InitTick+0x5c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200000a8 	.word	0x200000a8
 800398c:	200000b0 	.word	0x200000b0
 8003990:	200000ac 	.word	0x200000ac

08003994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_IncTick+0x1c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_IncTick+0x20>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a03      	ldr	r2, [pc, #12]	; (80039b4 <HAL_IncTick+0x20>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	200000b0 	.word	0x200000b0
 80039b4:	20001b44 	.word	0x20001b44

080039b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return uwTick;
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <HAL_GetTick+0x10>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20001b44 	.word	0x20001b44

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d005      	beq.n	80039f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_Delay+0x44>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039f2:	bf00      	nop
 80039f4:	f7ff ffe0 	bl	80039b8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8f7      	bhi.n	80039f4 <HAL_Delay+0x28>
  {
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200000b0 	.word	0x200000b0

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <__NVIC_EnableIRQ+0x34>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	; (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b78:	d301      	bcc.n	8003b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e00f      	b.n	8003b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <SysTick_Config+0x40>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b86:	210f      	movs	r1, #15
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f7ff ff90 	bl	8003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SysTick_Config+0x40>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <SysTick_Config+0x40>)
 8003b98:	2207      	movs	r2, #7
 8003b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	e000e010 	.word	0xe000e010

08003bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ff2d 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd4:	f7ff ff42 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7ff ff90 	bl	8003b04 <NVIC_EncodePriority>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff5f 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff35 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ffa2 	bl	8003b68 <SysTick_Config>
 8003c24:	4603      	mov	r3, r0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b08b      	sub	sp, #44	; 0x2c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c42:	e169      	b.n	8003f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c44:	2201      	movs	r2, #1
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8158 	bne.w	8003f12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a9a      	ldr	r2, [pc, #616]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d05e      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c6c:	4a98      	ldr	r2, [pc, #608]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d875      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c72:	4a98      	ldr	r2, [pc, #608]	; (8003ed4 <HAL_GPIO_Init+0x2a4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d058      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c78:	4a96      	ldr	r2, [pc, #600]	; (8003ed4 <HAL_GPIO_Init+0x2a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d86f      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c7e:	4a96      	ldr	r2, [pc, #600]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d052      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c84:	4a94      	ldr	r2, [pc, #592]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d869      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c8a:	4a94      	ldr	r2, [pc, #592]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04c      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c90:	4a92      	ldr	r2, [pc, #584]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d863      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c96:	4a92      	ldr	r2, [pc, #584]	; (8003ee0 <HAL_GPIO_Init+0x2b0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d046      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c9c:	4a90      	ldr	r2, [pc, #576]	; (8003ee0 <HAL_GPIO_Init+0x2b0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d85d      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003ca2:	2b12      	cmp	r3, #18
 8003ca4:	d82a      	bhi.n	8003cfc <HAL_GPIO_Init+0xcc>
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d859      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_GPIO_Init+0x80>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003d2b 	.word	0x08003d2b
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d17 	.word	0x08003d17
 8003cbc:	08003d59 	.word	0x08003d59
 8003cc0:	08003d5f 	.word	0x08003d5f
 8003cc4:	08003d5f 	.word	0x08003d5f
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003d5f 	.word	0x08003d5f
 8003cd0:	08003d5f 	.word	0x08003d5f
 8003cd4:	08003d5f 	.word	0x08003d5f
 8003cd8:	08003d5f 	.word	0x08003d5f
 8003cdc:	08003d5f 	.word	0x08003d5f
 8003ce0:	08003d5f 	.word	0x08003d5f
 8003ce4:	08003d5f 	.word	0x08003d5f
 8003ce8:	08003d5f 	.word	0x08003d5f
 8003cec:	08003d5f 	.word	0x08003d5f
 8003cf0:	08003d5f 	.word	0x08003d5f
 8003cf4:	08003d0d 	.word	0x08003d0d
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	4a79      	ldr	r2, [pc, #484]	; (8003ee4 <HAL_GPIO_Init+0x2b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d02:	e02c      	b.n	8003d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	623b      	str	r3, [r7, #32]
          break;
 8003d0a:	e029      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e024      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	623b      	str	r3, [r7, #32]
          break;
 8003d1e:	e01f      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	330c      	adds	r3, #12
 8003d26:	623b      	str	r3, [r7, #32]
          break;
 8003d28:	e01a      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d32:	2304      	movs	r3, #4
 8003d34:	623b      	str	r3, [r7, #32]
          break;
 8003d36:	e013      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d40:	2308      	movs	r3, #8
 8003d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	611a      	str	r2, [r3, #16]
          break;
 8003d4a:	e009      	b.n	8003d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	615a      	str	r2, [r3, #20]
          break;
 8003d56:	e003      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
          break;
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          break;
 8003d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2bff      	cmp	r3, #255	; 0xff
 8003d64:	d801      	bhi.n	8003d6a <HAL_GPIO_Init+0x13a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	e001      	b.n	8003d6e <HAL_GPIO_Init+0x13e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d802      	bhi.n	8003d7c <HAL_GPIO_Init+0x14c>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	e002      	b.n	8003d82 <HAL_GPIO_Init+0x152>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	3b08      	subs	r3, #8
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	210f      	movs	r1, #15
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80b1 	beq.w	8003f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003db0:	4b4d      	ldr	r3, [pc, #308]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a4c      	ldr	r2, [pc, #304]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6193      	str	r3, [r2, #24]
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dc8:	4a48      	ldr	r2, [pc, #288]	; (8003eec <HAL_GPIO_Init+0x2bc>)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <HAL_GPIO_Init+0x2c0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_GPIO_Init+0x1ec>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <HAL_GPIO_Init+0x2c4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00d      	beq.n	8003e18 <HAL_GPIO_Init+0x1e8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <HAL_GPIO_Init+0x1e4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <HAL_GPIO_Init+0x2cc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_GPIO_Init+0x1e0>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e004      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e002      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	f002 0203 	and.w	r2, r2, #3
 8003e24:	0092      	lsls	r2, r2, #2
 8003e26:	4093      	lsls	r3, r2
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e2e:	492f      	ldr	r1, [pc, #188]	; (8003eec <HAL_GPIO_Init+0x2bc>)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	492c      	ldr	r1, [pc, #176]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4928      	ldr	r1, [pc, #160]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4922      	ldr	r1, [pc, #136]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	491e      	ldr	r1, [pc, #120]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4918      	ldr	r1, [pc, #96]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	4914      	ldr	r1, [pc, #80]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d021      	beq.n	8003f04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	490e      	ldr	r1, [pc, #56]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60cb      	str	r3, [r1, #12]
 8003ecc:	e021      	b.n	8003f12 <HAL_GPIO_Init+0x2e2>
 8003ece:	bf00      	nop
 8003ed0:	10320000 	.word	0x10320000
 8003ed4:	10310000 	.word	0x10310000
 8003ed8:	10220000 	.word	0x10220000
 8003edc:	10210000 	.word	0x10210000
 8003ee0:	10120000 	.word	0x10120000
 8003ee4:	10110000 	.word	0x10110000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40010800 	.word	0x40010800
 8003ef4:	40010c00 	.word	0x40010c00
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_GPIO_Init+0x304>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	4909      	ldr	r1, [pc, #36]	; (8003f34 <HAL_GPIO_Init+0x304>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f47f ae8e 	bne.w	8003c44 <HAL_GPIO_Init+0x14>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	372c      	adds	r7, #44	; 0x2c
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
 8003f44:	4613      	mov	r3, r2
 8003f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f48:	787b      	ldrb	r3, [r7, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f54:	e003      	b.n	8003f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	041a      	lsls	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd f9de 	bl	8001348 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e12b      	b.n	8004202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff f9d4 	bl	800336c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f001 fba0 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8004000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a81      	ldr	r2, [pc, #516]	; (800420c <HAL_I2C_Init+0x274>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d807      	bhi.n	800401c <HAL_I2C_Init+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a80      	ldr	r2, [pc, #512]	; (8004210 <HAL_I2C_Init+0x278>)
 8004010:	4293      	cmp	r3, r2
 8004012:	bf94      	ite	ls
 8004014:	2301      	movls	r3, #1
 8004016:	2300      	movhi	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e006      	b.n	800402a <HAL_I2C_Init+0x92>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a7d      	ldr	r2, [pc, #500]	; (8004214 <HAL_I2C_Init+0x27c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	bf94      	ite	ls
 8004024:	2301      	movls	r3, #1
 8004026:	2300      	movhi	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0e7      	b.n	8004202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a78      	ldr	r2, [pc, #480]	; (8004218 <HAL_I2C_Init+0x280>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a6a      	ldr	r2, [pc, #424]	; (800420c <HAL_I2C_Init+0x274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d802      	bhi.n	800406c <HAL_I2C_Init+0xd4>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	e009      	b.n	8004080 <HAL_I2C_Init+0xe8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a69      	ldr	r2, [pc, #420]	; (800421c <HAL_I2C_Init+0x284>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	3301      	adds	r3, #1
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	495c      	ldr	r1, [pc, #368]	; (800420c <HAL_I2C_Init+0x274>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d819      	bhi.n	80040d4 <HAL_I2C_Init+0x13c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e59      	subs	r1, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040b4:	400b      	ands	r3, r1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_I2C_Init+0x138>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1e59      	subs	r1, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ce:	e051      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d0:	2304      	movs	r3, #4
 80040d2:	e04f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d111      	bne.n	8004100 <HAL_I2C_Init+0x168>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e012      	b.n	8004126 <HAL_I2C_Init+0x18e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Init+0x196>
 800412a:	2301      	movs	r3, #1
 800412c:	e022      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10e      	bne.n	8004154 <HAL_I2C_Init+0x1bc>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e58      	subs	r0, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	440b      	add	r3, r1
 8004144:	fbb0 f3f3 	udiv	r3, r0, r3
 8004148:	3301      	adds	r3, #1
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Init+0x1dc>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1e58      	subs	r0, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	0099      	lsls	r1, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	fbb0 f3f3 	udiv	r3, r0, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	6809      	ldr	r1, [r1, #0]
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6911      	ldr	r1, [r2, #16]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68d2      	ldr	r2, [r2, #12]
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	000186a0 	.word	0x000186a0
 8004210:	001e847f 	.word	0x001e847f
 8004214:	003d08ff 	.word	0x003d08ff
 8004218:	431bde83 	.word	0x431bde83
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4603      	mov	r3, r0
 8004230:	817b      	strh	r3, [r7, #10]
 8004232:	460b      	mov	r3, r1
 8004234:	813b      	strh	r3, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800423a:	f7ff fbbd 	bl	80039b8 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 80d9 	bne.w	8004400 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2319      	movs	r3, #25
 8004254:	2201      	movs	r2, #1
 8004256:	496d      	ldr	r1, [pc, #436]	; (800440c <HAL_I2C_Mem_Write+0x1ec>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fcc1 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	e0cc      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Mem_Write+0x56>
 8004272:	2302      	movs	r3, #2
 8004274:	e0c5      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d007      	beq.n	800429c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2221      	movs	r2, #33	; 0x21
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a4d      	ldr	r2, [pc, #308]	; (8004410 <HAL_I2C_Mem_Write+0x1f0>)
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042de:	88f8      	ldrh	r0, [r7, #6]
 80042e0:	893a      	ldrh	r2, [r7, #8]
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4603      	mov	r3, r0
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 faf8 	bl	80048e4 <I2C_RequestMemoryWrite>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d052      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e081      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fd42 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <HAL_I2C_Mem_Write+0x180>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1aa      	bne.n	80042fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fd2e 	bl	8004e0e <I2C_WaitOnBTFFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d107      	bne.n	80043d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e016      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	00100002 	.word	0x00100002
 8004410:	ffff0000 	.word	0xffff0000

08004414 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	; 0x30
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004432:	f7ff fac1 	bl	80039b8 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b20      	cmp	r3, #32
 8004442:	f040 8244 	bne.w	80048ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2319      	movs	r3, #25
 800444c:	2201      	movs	r2, #1
 800444e:	4982      	ldr	r1, [pc, #520]	; (8004658 <HAL_I2C_Mem_Read+0x244>)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fbc5 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	e237      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2C_Mem_Read+0x5a>
 800446a:	2302      	movs	r3, #2
 800446c:	e230      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d007      	beq.n	8004494 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2222      	movs	r2, #34	; 0x22
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a62      	ldr	r2, [pc, #392]	; (800465c <HAL_I2C_Mem_Read+0x248>)
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d6:	88f8      	ldrh	r0, [r7, #6]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	4603      	mov	r3, r0
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa92 	bl	8004a10 <I2C_RequestMemoryRead>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1ec      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e1c0      	b.n	80048a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	2b01      	cmp	r3, #1
 800452c:	d11e      	bne.n	800456c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800453e:	b672      	cpsid	i
}
 8004540:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004568:	b662      	cpsie	i
}
 800456a:	e035      	b.n	80045d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b02      	cmp	r3, #2
 8004572:	d11e      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004584:	b672      	cpsid	i
}
 8004586:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ae:	b662      	cpsie	i
}
 80045b0:	e012      	b.n	80045d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045d8:	e166      	b.n	80048a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	2b03      	cmp	r3, #3
 80045e0:	f200 811f 	bhi.w	8004822 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d123      	bne.n	8004634 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fc4d 	bl	8004e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e167      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004632:	e139      	b.n	80048a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	2b02      	cmp	r3, #2
 800463a:	d152      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	2200      	movs	r2, #0
 8004644:	4906      	ldr	r1, [pc, #24]	; (8004660 <HAL_I2C_Mem_Read+0x24c>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 faca 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e13c      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
 8004656:	bf00      	nop
 8004658:	00100002 	.word	0x00100002
 800465c:	ffff0000 	.word	0xffff0000
 8004660:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004664:	b672      	cpsid	i
}
 8004666:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
}
 80046ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e0:	e0e2      	b.n	80048a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	2200      	movs	r2, #0
 80046ea:	497b      	ldr	r1, [pc, #492]	; (80048d8 <HAL_I2C_Mem_Read+0x4c4>)
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa77 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0e9      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800470c:	b672      	cpsid	i
}
 800470e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004742:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_I2C_Mem_Read+0x4c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_I2C_Mem_Read+0x4cc>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a1a      	lsrs	r2, r3, #8
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00da      	lsls	r2, r3, #3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	3b01      	subs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d118      	bne.n	800479a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800478a:	b662      	cpsie	i
}
 800478c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e09a      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d1d9      	bne.n	800475c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ea:	b662      	cpsie	i
}
 80047ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004820:	e042      	b.n	80048a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb32 	bl	8004e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e04c      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d118      	bne.n	80048a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f ae94 	bne.w	80045da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	00010004 	.word	0x00010004
 80048dc:	200000a8 	.word	0x200000a8
 80048e0:	14f8b589 	.word	0x14f8b589

080048e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2200      	movs	r2, #0
 8004916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f960 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d103      	bne.n	800493e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e05f      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	492d      	ldr	r1, [pc, #180]	; (8004a0c <I2C_RequestMemoryWrite+0x128>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f998 	bl	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04c      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	6a39      	ldr	r1, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa02 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b04      	cmp	r3, #4
 8004994:	d107      	bne.n	80049a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e02b      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]
 80049ba:	e021      	b.n	8004a00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f9dc 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d107      	bne.n	80049f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e005      	b.n	8004a02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f6:	893b      	ldrh	r3, [r7, #8]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	00010002 	.word	0x00010002

08004a10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	817b      	strh	r3, [r7, #10]
 8004a22:	460b      	mov	r3, r1
 8004a24:	813b      	strh	r3, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8c2 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a70:	d103      	bne.n	8004a7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0aa      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	4952      	ldr	r1, [pc, #328]	; (8004bdc <I2C_RequestMemoryRead+0x1cc>)
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f8fa 	bl	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e097      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f964 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e076      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	611a      	str	r2, [r3, #16]
 8004af6:	e021      	b.n	8004b3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	6a39      	ldr	r1, [r7, #32]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f93e 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d107      	bne.n	8004b2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e050      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b32:	893b      	ldrh	r3, [r7, #8]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	6a39      	ldr	r1, [r7, #32]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f923 	bl	8004d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e035      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f82b 	bl	8004be0 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	d103      	bne.n	8004ba8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e013      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bac:	897b      	ldrh	r3, [r7, #10]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	4906      	ldr	r1, [pc, #24]	; (8004bdc <I2C_RequestMemoryRead+0x1cc>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f863 	bl	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	00010002 	.word	0x00010002

08004be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf0:	e025      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d021      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fe fedd 	bl	80039b8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e023      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d10d      	bne.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	e00c      	b.n	8004c7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d0b6      	beq.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9c:	e051      	b.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cac:	d123      	bne.n	8004cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e046      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d021      	beq.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fe fe5b 	bl	80039b8 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d116      	bne.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e020      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10c      	bne.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e00b      	b.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d18d      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d98:	e02d      	b.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8ce 	bl	8004f3c <I2C_IsAcknowledgeFailed>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e02d      	b.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d021      	beq.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fe fe01 	bl	80039b8 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e007      	b.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d1ca      	bne.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e1a:	e02d      	b.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f88d 	bl	8004f3c <I2C_IsAcknowledgeFailed>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e02d      	b.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d021      	beq.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7fe fdc0 	bl	80039b8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e007      	b.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d1ca      	bne.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e9c:	e042      	b.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d119      	bne.n	8004ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0210 	mvn.w	r2, #16
 8004eb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e029      	b.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee0:	f7fe fd6a 	bl	80039b8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d116      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d1b5      	bne.n	8004e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d11b      	bne.n	8004f8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f043 0204 	orr.w	r2, r3, #4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e26c      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8087 	beq.w	80050c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb8:	4b92      	ldr	r3, [pc, #584]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d112      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
 8004fd0:	4b8c      	ldr	r3, [pc, #560]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fde:	4b89      	ldr	r3, [pc, #548]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x12c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d168      	bne.n	80050c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e246      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x76>
 8005000:	4b80      	ldr	r3, [pc, #512]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7f      	ldr	r2, [pc, #508]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e02e      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7a      	ldr	r2, [pc, #488]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a77      	ldr	r2, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e01d      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0xbc>
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a71      	ldr	r2, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6e      	ldr	r2, [pc, #440]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005054:	4b6b      	ldr	r3, [pc, #428]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6a      	ldr	r2, [pc, #424]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b68      	ldr	r3, [pc, #416]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a67      	ldr	r2, [pc, #412]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fe fca0 	bl	80039b8 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7fe fc9c 	bl	80039b8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1fa      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xe4>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fe fc8c 	bl	80039b8 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fe fc88 	bl	80039b8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1e6      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x10c>
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d063      	beq.n	800519a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d2:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050de:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11c      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e1ba      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4939      	ldr	r1, [pc, #228]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	e03a      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_RCC_OscConfig+0x270>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fe fc41 	bl	80039b8 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513a:	f7fe fc3d 	bl	80039b8 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e19b      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4927      	ldr	r1, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	e015      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_RCC_OscConfig+0x270>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fe fc20 	bl	80039b8 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517c:	f7fe fc1c 	bl	80039b8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e17a      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d03a      	beq.n	800521c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d019      	beq.n	80051e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <HAL_RCC_OscConfig+0x274>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fe fc00 	bl	80039b8 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fe fbfc 	bl	80039b8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e15a      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051da:	2001      	movs	r0, #1
 80051dc:	f000 fad8 	bl	8005790 <RCC_Delay>
 80051e0:	e01c      	b.n	800521c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_RCC_OscConfig+0x274>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fe fbe6 	bl	80039b8 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ee:	e00f      	b.n	8005210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fe fbe2 	bl	80039b8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d908      	bls.n	8005210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e140      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	42420000 	.word	0x42420000
 800520c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b9e      	ldr	r3, [pc, #632]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e9      	bne.n	80051f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a6 	beq.w	8005376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b97      	ldr	r3, [pc, #604]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	4b94      	ldr	r3, [pc, #592]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4a93      	ldr	r2, [pc, #588]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	61d3      	str	r3, [r2, #28]
 8005246:	4b91      	ldr	r3, [pc, #580]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b8e      	ldr	r3, [pc, #568]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d118      	bne.n	8005294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b8b      	ldr	r3, [pc, #556]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a8a      	ldr	r2, [pc, #552]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fe fba3 	bl	80039b8 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fe fb9f 	bl	80039b8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b64      	cmp	r3, #100	; 0x64
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e0fd      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	4b81      	ldr	r3, [pc, #516]	; (8005490 <HAL_RCC_OscConfig+0x4f8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x312>
 800529c:	4b7b      	ldr	r3, [pc, #492]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a7a      	ldr	r2, [pc, #488]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	e02d      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x334>
 80052b2:	4b76      	ldr	r3, [pc, #472]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a75      	ldr	r2, [pc, #468]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b73      	ldr	r3, [pc, #460]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a72      	ldr	r2, [pc, #456]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	e01c      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d10c      	bne.n	80052ee <HAL_RCC_OscConfig+0x356>
 80052d4:	4b6d      	ldr	r3, [pc, #436]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a6c      	ldr	r2, [pc, #432]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4a69      	ldr	r2, [pc, #420]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6213      	str	r3, [r2, #32]
 80052ec:	e00b      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052ee:	4b67      	ldr	r3, [pc, #412]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4a66      	ldr	r2, [pc, #408]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	6213      	str	r3, [r2, #32]
 80052fa:	4b64      	ldr	r3, [pc, #400]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a63      	ldr	r2, [pc, #396]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fe fb53 	bl	80039b8 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fe fb4f 	bl	80039b8 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0ab      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	4b57      	ldr	r3, [pc, #348]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ee      	beq.n	8005316 <HAL_RCC_OscConfig+0x37e>
 8005338:	e014      	b.n	8005364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fe fb3d 	bl	80039b8 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fe fb39 	bl	80039b8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e095      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ee      	bne.n	8005342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4b48      	ldr	r3, [pc, #288]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4a47      	ldr	r2, [pc, #284]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8081 	beq.w	8005482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005380:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d061      	beq.n	8005450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d146      	bne.n	8005422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005394:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fe fb0d 	bl	80039b8 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fe fb09 	bl	80039b8 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e067      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053ca:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	492d      	ldr	r1, [pc, #180]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a19      	ldr	r1, [r3, #32]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	430b      	orrs	r3, r1
 80053ee:	4927      	ldr	r1, [pc, #156]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b27      	ldr	r3, [pc, #156]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fe fadd 	bl	80039b8 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005402:	f7fe fad9 	bl	80039b8 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e037      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x46a>
 8005420:	e02f      	b.n	8005482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCC_OscConfig+0x4fc>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fe fac6 	bl	80039b8 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fe fac2 	bl	80039b8 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e020      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x498>
 800544e:	e018      	b.n	8005482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e013      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_OscConfig+0x4f4>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	429a      	cmp	r2, r3
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
 8005494:	42420060 	.word	0x42420060

08005498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0d0      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ac:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d910      	bls.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b67      	ldr	r3, [pc, #412]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	4965      	ldr	r1, [pc, #404]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b63      	ldr	r3, [pc, #396]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0b8      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f4:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a52      	ldr	r2, [pc, #328]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b50      	ldr	r3, [pc, #320]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	494d      	ldr	r1, [pc, #308]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d040      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d107      	bne.n	800554e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e07f      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e073      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005566:	4b3d      	ldr	r3, [pc, #244]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e06b      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4936      	ldr	r1, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005588:	f7fe fa16 	bl	80039b8 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fe fa12 	bl	80039b8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e053      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b8:	4b27      	ldr	r3, [pc, #156]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d210      	bcs.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e032      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4916      	ldr	r1, [pc, #88]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	490e      	ldr	r1, [pc, #56]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005626:	f000 f821 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800562a:	4602      	mov	r2, r0
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	490a      	ldr	r1, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	5ccb      	ldrb	r3, [r1, r3]
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1cc>)
 8005640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_RCC_ClockConfig+0x1d0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe f974 	bl	8003934 <HAL_InitTick>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40022000 	.word	0x40022000
 800565c:	40021000 	.word	0x40021000
 8005660:	0800db80 	.word	0x0800db80
 8005664:	200000a8 	.word	0x200000a8
 8005668:	200000ac 	.word	0x200000ac

0800566c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b490      	push	{r4, r7}
 800566e:	b08a      	sub	sp, #40	; 0x28
 8005670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005672:	4b2a      	ldr	r3, [pc, #168]	; (800571c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005674:	1d3c      	adds	r4, r7, #4
 8005676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800567c:	f240 2301 	movw	r3, #513	; 0x201
 8005680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d002      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x40>
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d003      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x46>
 80056aa:	e02d      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ae:	623b      	str	r3, [r7, #32]
      break;
 80056b0:	e02d      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	0c9b      	lsrs	r3, r3, #18
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056be:	4413      	add	r3, r2
 80056c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0c5b      	lsrs	r3, r3, #17
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056de:	4413      	add	r3, r2
 80056e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ea:	fb02 f203 	mul.w	r2, r2, r3
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	e004      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	623b      	str	r3, [r7, #32]
      break;
 8005706:	e002      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_GetSysClockFreq+0xb8>)
 800570a:	623b      	str	r3, [r7, #32]
      break;
 800570c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800570e:	6a3b      	ldr	r3, [r7, #32]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3728      	adds	r7, #40	; 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bc90      	pop	{r4, r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	0800db28 	.word	0x0800db28
 8005720:	40021000 	.word	0x40021000
 8005724:	007a1200 	.word	0x007a1200
 8005728:	003d0900 	.word	0x003d0900

0800572c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <HAL_RCC_GetHCLKFreq+0x10>)
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	4618      	mov	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	200000a8 	.word	0x200000a8

08005740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005744:	f7ff fff2 	bl	800572c <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	0800db90 	.word	0x0800db90

08005768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800576c:	f7ff ffde 	bl	800572c <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	0adb      	lsrs	r3, r3, #11
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <HAL_RCC_GetPCLK2Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	0800db90 	.word	0x0800db90

08005790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <RCC_Delay+0x34>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <RCC_Delay+0x38>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	0a5b      	lsrs	r3, r3, #9
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057ac:	bf00      	nop
  }
  while (Delay --);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	60fa      	str	r2, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f9      	bne.n	80057ac <RCC_Delay+0x1c>
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	200000a8 	.word	0x200000a8
 80057c8:	10624dd3 	.word	0x10624dd3

080057cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e076      	b.n	80058cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d009      	beq.n	8005804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	61da      	str	r2, [r3, #28]
 80057f6:	e005      	b.n	8005804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fd fde2 	bl	80033e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005888:	ea42 0103 	orr.w	r1, r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	0c1a      	lsrs	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f002 0204 	and.w	r2, r2, #4
 80058aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_SPI_Transmit+0x22>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e126      	b.n	8005b44 <HAL_SPI_Transmit+0x270>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058fe:	f7fe f85b 	bl	80039b8 <HAL_GetTick>
 8005902:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d002      	beq.n	800591a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005914:	2302      	movs	r3, #2
 8005916:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005918:	e10b      	b.n	8005b32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x52>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	77fb      	strb	r3, [r7, #31]
    goto error;
 800592a:	e102      	b.n	8005b32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2203      	movs	r2, #3
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005972:	d10f      	bne.n	8005994 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005992:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d007      	beq.n	80059b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ba:	d14b      	bne.n	8005a54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Transmit+0xf6>
 80059c4:	8afb      	ldrh	r3, [r7, #22]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d13e      	bne.n	8005a48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059ee:	e02b      	b.n	8005a48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d112      	bne.n	8005a24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a22:	e011      	b.n	8005a48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a24:	f7fd ffc8 	bl	80039b8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d803      	bhi.n	8005a3c <HAL_SPI_Transmit+0x168>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d102      	bne.n	8005a42 <HAL_SPI_Transmit+0x16e>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a46:	e074      	b.n	8005b32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ce      	bne.n	80059f0 <HAL_SPI_Transmit+0x11c>
 8005a52:	e04c      	b.n	8005aee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Transmit+0x18e>
 8005a5c:	8afb      	ldrh	r3, [r7, #22]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d140      	bne.n	8005ae4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a88:	e02c      	b.n	8005ae4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d113      	bne.n	8005ac0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005abe:	e011      	b.n	8005ae4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac0:	f7fd ff7a 	bl	80039b8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d803      	bhi.n	8005ad8 <HAL_SPI_Transmit+0x204>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_Transmit+0x20a>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ae2:	e026      	b.n	8005b32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1cd      	bne.n	8005a8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fbc4 	bl	8006280 <SPI_EndRxTxTransaction>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e000      	b.n	8005b32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b68:	d112      	bne.n	8005b90 <HAL_SPI_Receive+0x44>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2204      	movs	r2, #4
 8005b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f8f1 	bl	8005d6e <HAL_SPI_TransmitReceive>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	e0ea      	b.n	8005d66 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_SPI_Receive+0x52>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0e3      	b.n	8005d66 <HAL_SPI_Receive+0x21a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba6:	f7fd ff07 	bl	80039b8 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d002      	beq.n	8005bbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bbc:	e0ca      	b.n	8005d54 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_SPI_Receive+0x7e>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bce:	e0c1      	b.n	8005d54 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c16:	d10f      	bne.n	8005c38 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d007      	beq.n	8005c56 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d162      	bne.n	8005d24 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c5e:	e02e      	b.n	8005cbe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d115      	bne.n	8005c9a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f103 020c 	add.w	r2, r3, #12
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c98:	e011      	b.n	8005cbe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9a:	f7fd fe8d 	bl	80039b8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d803      	bhi.n	8005cb2 <HAL_SPI_Receive+0x166>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d102      	bne.n	8005cb8 <HAL_SPI_Receive+0x16c>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cbc:	e04a      	b.n	8005d54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1cb      	bne.n	8005c60 <HAL_SPI_Receive+0x114>
 8005cc8:	e031      	b.n	8005d2e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d113      	bne.n	8005d00 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cfe:	e011      	b.n	8005d24 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d00:	f7fd fe5a 	bl	80039b8 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d803      	bhi.n	8005d18 <HAL_SPI_Receive+0x1cc>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d102      	bne.n	8005d1e <HAL_SPI_Receive+0x1d2>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d22:	e017      	b.n	8005d54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1cd      	bne.n	8005cca <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fa52 	bl	80061dc <SPI_EndRxTransaction>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
 8005d50:	e000      	b.n	8005d54 <HAL_SPI_Receive+0x208>
  }

error :
 8005d52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b08c      	sub	sp, #48	; 0x30
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x26>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e18a      	b.n	80060aa <HAL_SPI_TransmitReceive+0x33c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9c:	f7fd fe0c 	bl	80039b8 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d00f      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x70>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc4:	d107      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x68>
 8005dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d003      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ddc:	e15b      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x82>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x82>
 8005dea:	887b      	ldrh	r3, [r7, #2]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005df6:	e14e      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d003      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2205      	movs	r2, #5
 8005e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	887a      	ldrh	r2, [r7, #2]
 8005e22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	887a      	ldrh	r2, [r7, #2]
 8005e2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	887a      	ldrh	r2, [r7, #2]
 8005e34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d007      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e68:	d178      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_SPI_TransmitReceive+0x10a>
 8005e72:	8b7b      	ldrh	r3, [r7, #26]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d166      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e9c:	e053      	b.n	8005f46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x176>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d016      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x176>
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d113      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d119      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x1b8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d014      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	b292      	uxth	r2, r2
 8005f08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f22:	2301      	movs	r3, #1
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f26:	f7fd fd47 	bl	80039b8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d807      	bhi.n	8005f46 <HAL_SPI_TransmitReceive+0x1d8>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d003      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f44:	e0a7      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1a6      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x130>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1a1      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x130>
 8005f5a:	e07c      	b.n	8006056 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_SPI_TransmitReceive+0x1fc>
 8005f64:	8b7b      	ldrh	r3, [r7, #26]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d16b      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f90:	e057      	b.n	8006042 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d11c      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x26c>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x26c>
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d114      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d119      	bne.n	800601c <HAL_SPI_TransmitReceive+0x2ae>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006018:	2301      	movs	r3, #1
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800601c:	f7fd fccc 	bl	80039b8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006028:	429a      	cmp	r2, r3
 800602a:	d803      	bhi.n	8006034 <HAL_SPI_TransmitReceive+0x2c6>
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d102      	bne.n	800603a <HAL_SPI_TransmitReceive+0x2cc>
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006040:	e029      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1a2      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x224>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d19d      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f910 	bl	8006280 <SPI_EndRxTxTransaction>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d006      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006072:	e010      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	e000      	b.n	8006096 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006094:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3730      	adds	r7, #48	; 0x30
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c0:	b2db      	uxtb	r3, r3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060dc:	f7fd fc6c 	bl	80039b8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	4413      	add	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060ec:	f7fd fc64 	bl	80039b8 <HAL_GetTick>
 80060f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060f2:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	015b      	lsls	r3, r3, #5
 80060f8:	0d1b      	lsrs	r3, r3, #20
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006102:	e054      	b.n	80061ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d050      	beq.n	80061ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800610c:	f7fd fc54 	bl	80039b8 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	429a      	cmp	r2, r3
 800611a:	d902      	bls.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d13d      	bne.n	800619e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613a:	d111      	bne.n	8006160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006144:	d004      	beq.n	8006150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614e:	d107      	bne.n	8006160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006168:	d10f      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e017      	b.n	80061ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4013      	ands	r3, r2
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d19b      	bne.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200000a8 	.word	0x200000a8

080061dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f0:	d111      	bne.n	8006216 <SPI_EndRxTransaction+0x3a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fa:	d004      	beq.n	8006206 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006204:	d107      	bne.n	8006216 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621e:	d117      	bne.n	8006250 <SPI_EndRxTransaction+0x74>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d112      	bne.n	8006250 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	2101      	movs	r1, #1
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff ff49 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01a      	beq.n	8006276 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e013      	b.n	8006278 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	2180      	movs	r1, #128	; 0x80
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff ff36 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e000      	b.n	8006278 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff ff18 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e000      	b.n	80062b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e041      	b.n	8006352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fd f906 	bl	80034f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f000 f93c 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e032      	b.n	80063da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_TIM_Base_Start+0x88>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00e      	beq.n	80063a4 <HAL_TIM_Base_Start+0x48>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d009      	beq.n	80063a4 <HAL_TIM_Base_Start+0x48>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_TIM_Base_Start+0x8c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <HAL_TIM_Base_Start+0x48>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <HAL_TIM_Base_Start+0x90>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d111      	bne.n	80063c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b06      	cmp	r3, #6
 80063b4:	d010      	beq.n	80063d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	e007      	b.n	80063d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800

080063f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIM_ConfigClockSource+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e0b3      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x180>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006440:	d03e      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0xd0>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	f200 8087 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x168>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644e:	f000 8085 	beq.w	800655c <HAL_TIM_ConfigClockSource+0x16c>
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d87f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d01a      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0xa2>
 800645c:	2b70      	cmp	r3, #112	; 0x70
 800645e:	d87b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006460:	2b60      	cmp	r3, #96	; 0x60
 8006462:	d050      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x116>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d877      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d03c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0xf6>
 800646c:	2b50      	cmp	r3, #80	; 0x50
 800646e:	d873      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d058      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x136>
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d86f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d064      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d86b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d060      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d867      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d05c      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d05a      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006490:	e062      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6899      	ldr	r1, [r3, #8]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f000 f942 	bl	800672a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	609a      	str	r2, [r3, #8]
      break;
 80064be:	e04e      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f000 f92b 	bl	800672a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e2:	609a      	str	r2, [r3, #8]
      break;
 80064e4:	e03b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 f8a2 	bl	800663c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2150      	movs	r1, #80	; 0x50
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f8f9 	bl	80066f6 <TIM_ITRx_SetConfig>
      break;
 8006504:	e02b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6859      	ldr	r1, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	461a      	mov	r2, r3
 8006514:	f000 f8c0 	bl	8006698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2160      	movs	r1, #96	; 0x60
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f8e9 	bl	80066f6 <TIM_ITRx_SetConfig>
      break;
 8006524:	e01b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	461a      	mov	r2, r3
 8006534:	f000 f882 	bl	800663c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f8d9 	bl	80066f6 <TIM_ITRx_SetConfig>
      break;
 8006544:	e00b      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f000 f8d0 	bl	80066f6 <TIM_ITRx_SetConfig>
        break;
 8006556:	e002      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800655c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a29      	ldr	r2, [pc, #164]	; (8006630 <TIM_Base_SetConfig+0xb8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00b      	beq.n	80065a8 <TIM_Base_SetConfig+0x30>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0x30>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a26      	ldr	r2, [pc, #152]	; (8006634 <TIM_Base_SetConfig+0xbc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0x30>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a25      	ldr	r2, [pc, #148]	; (8006638 <TIM_Base_SetConfig+0xc0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d108      	bne.n	80065ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <TIM_Base_SetConfig+0xb8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_Base_SetConfig+0x62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d007      	beq.n	80065da <TIM_Base_SetConfig+0x62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <TIM_Base_SetConfig+0xbc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_Base_SetConfig+0x62>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <TIM_Base_SetConfig+0xc0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d108      	bne.n	80065ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <TIM_Base_SetConfig+0xb8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	615a      	str	r2, [r3, #20]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800

0800663c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0201 	bic.w	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 030a 	bic.w	r3, r3, #10
 8006678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f023 0210 	bic.w	r2, r3, #16
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	031b      	lsls	r3, r3, #12
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	f043 0307 	orr.w	r3, r3, #7
 8006718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	609a      	str	r2, [r3, #8]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800672a:	b480      	push	{r7}
 800672c:	b087      	sub	sp, #28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	021a      	lsls	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	431a      	orrs	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	609a      	str	r2, [r3, #8]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e046      	b.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a16      	ldr	r2, [pc, #88]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d009      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a12      	ldr	r2, [pc, #72]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a10      	ldr	r2, [pc, #64]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10c      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40000400 	.word	0x40000400
 8006820:	40000800 	.word	0x40000800

08006824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03f      	b.n	80068b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc fe6e 	bl	800352c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f905 	bl	8006a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800687c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800688c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800689c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b08a      	sub	sp, #40	; 0x28
 80068c2:	af02      	add	r7, sp, #8
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d17c      	bne.n	80069d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_UART_Transmit+0x2c>
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e075      	b.n	80069da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_UART_Transmit+0x3e>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e06e      	b.n	80069da <HAL_UART_Transmit+0x11c>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2221      	movs	r2, #33	; 0x21
 800690e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006912:	f7fd f851 	bl	80039b8 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d108      	bne.n	8006940 <HAL_UART_Transmit+0x82>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e003      	b.n	8006948 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006950:	e02a      	b.n	80069a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2200      	movs	r2, #0
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f840 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e036      	b.n	80069da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	3302      	adds	r3, #2
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	e007      	b.n	800699a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	3301      	adds	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1cf      	bne.n	8006952 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2140      	movs	r1, #64	; 0x40
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f810 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	e02c      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d028      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a02:	f7fc ffd9 	bl	80039b8 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d21d      	bcs.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d0c3      	beq.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ab2:	f023 030c 	bic.w	r3, r3, #12
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <UART_SetConfig+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d103      	bne.n	8006ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fe fe42 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	e002      	b.n	8006aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe fe2a 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8006aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009a      	lsls	r2, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <UART_SetConfig+0x118>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	0119      	lsls	r1, r3, #4
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009a      	lsls	r2, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b24:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <UART_SetConfig+0x118>)
 8006b26:	fba3 0302 	umull	r0, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2064      	movs	r0, #100	; 0x64
 8006b2e:	fb00 f303 	mul.w	r3, r0, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	3332      	adds	r3, #50	; 0x32
 8006b38:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <UART_SetConfig+0x118>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b44:	4419      	add	r1, r3
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009a      	lsls	r2, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <UART_SetConfig+0x118>)
 8006b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	2064      	movs	r0, #100	; 0x64
 8006b66:	fb00 f303 	mul.w	r3, r0, r3
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	3332      	adds	r3, #50	; 0x32
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <UART_SetConfig+0x118>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	440a      	add	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40013800 	.word	0x40013800
 8006b90:	51eb851f 	.word	0x51eb851f

08006b94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <MX_FATFS_Init+0x18>)
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <MX_FATFS_Init+0x1c>)
 8006b9c:	f003 fa32 	bl	800a004 <FATFS_LinkDriver>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <MX_FATFS_Init+0x20>)
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20001b48 	.word	0x20001b48
 8006bb0:	200000b4 	.word	0x200000b4
 8006bb4:	20001b4c 	.word	0x20001b4c

08006bb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006bbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fa ff08 	bl	80019e8 <SD_disk_initialize>
 8006bd8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	4603      	mov	r3, r0
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fa ffe4 	bl	8001bbc <SD_disk_status>
 8006bf4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006c0e:	7bf8      	ldrb	r0, [r7, #15]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	f7fa ffe5 	bl	8001be4 <SD_disk_read>
 8006c1a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006c34:	7bf8      	ldrb	r0, [r7, #15]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	f7fb f83c 	bl	8001cb8 <SD_disk_write>
 8006c40:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	603a      	str	r2, [r7, #0]
 8006c54:	71fb      	strb	r3, [r7, #7]
 8006c56:	460b      	mov	r3, r1
 8006c58:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006c5a:	79b9      	ldrb	r1, [r7, #6]
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fb f8ad 	bl	8001dc0 <SD_disk_ioctl>
 8006c66:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <disk_status+0x30>)
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	79fa      	ldrb	r2, [r7, #7]
 8006c88:	4905      	ldr	r1, [pc, #20]	; (8006ca0 <disk_status+0x30>)
 8006c8a:	440a      	add	r2, r1
 8006c8c:	7a12      	ldrb	r2, [r2, #8]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000584 	.word	0x20000584

08006ca4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <disk_initialize+0x48>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d111      	bne.n	8006ce0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <disk_initialize+0x48>)
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <disk_initialize+0x48>)
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	79fa      	ldrb	r2, [r7, #7]
 8006cd2:	4906      	ldr	r1, [pc, #24]	; (8006cec <disk_initialize+0x48>)
 8006cd4:	440a      	add	r2, r1
 8006cd6:	7a12      	ldrb	r2, [r2, #8]
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000584 	.word	0x20000584

08006cf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <disk_read+0x3c>)
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	689c      	ldr	r4, [r3, #8]
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <disk_read+0x3c>)
 8006d10:	4413      	add	r3, r2
 8006d12:	7a18      	ldrb	r0, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	47a0      	blx	r4
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd90      	pop	{r4, r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000584 	.word	0x20000584

08006d30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <disk_write+0x3c>)
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68dc      	ldr	r4, [r3, #12]
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <disk_write+0x3c>)
 8006d50:	4413      	add	r3, r2
 8006d52:	7a18      	ldrb	r0, [r3, #8]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	47a0      	blx	r4
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000584 	.word	0x20000584

08006d70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	603a      	str	r2, [r7, #0]
 8006d7a:	71fb      	strb	r3, [r7, #7]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <disk_ioctl+0x38>)
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	79fa      	ldrb	r2, [r7, #7]
 8006d8e:	4906      	ldr	r1, [pc, #24]	; (8006da8 <disk_ioctl+0x38>)
 8006d90:	440a      	add	r2, r1
 8006d92:	7a10      	ldrb	r0, [r2, #8]
 8006d94:	79b9      	ldrb	r1, [r7, #6]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4798      	blx	r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000584 	.word	0x20000584

08006dac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006dc0:	e007      	b.n	8006dd2 <mem_cpy+0x26>
		*d++ = *s++;
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	1c53      	adds	r3, r2, #1
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	6179      	str	r1, [r7, #20]
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	1e5a      	subs	r2, r3, #1
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f2      	bne.n	8006dc2 <mem_cpy+0x16>
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006df8:	e005      	b.n	8006e06 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	617a      	str	r2, [r7, #20]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	1e5a      	subs	r2, r3, #1
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f4      	bne.n	8006dfa <mem_set+0x12>
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006e34:	bf00      	nop
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00d      	beq.n	8006e5c <mem_cmp+0x40>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	61ba      	str	r2, [r7, #24]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	1acb      	subs	r3, r1, r3
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ec      	beq.n	8006e36 <mem_cmp+0x1a>
	return r;
 8006e5c:	697b      	ldr	r3, [r7, #20]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3724      	adds	r7, #36	; 0x24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e72:	e002      	b.n	8006e7a <chk_chr+0x12>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3301      	adds	r3, #1
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <chk_chr+0x26>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d1f2      	bne.n	8006e74 <chk_chr+0xc>
	return *str;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	781b      	ldrb	r3, [r3, #0]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e038      	b.n	8006f22 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8006eb0:	492f      	ldr	r1, [pc, #188]	; (8006f70 <chk_lock+0xd4>)
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d029      	beq.n	8006f18 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006ec4:	492a      	ldr	r1, [pc, #168]	; (8006f70 <chk_lock+0xd4>)
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d11e      	bne.n	8006f1c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006ede:	4924      	ldr	r1, [pc, #144]	; (8006f70 <chk_lock+0xd4>)
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3304      	adds	r3, #4
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d110      	bne.n	8006f1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006efa:	491d      	ldr	r1, [pc, #116]	; (8006f70 <chk_lock+0xd4>)
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4613      	mov	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	3308      	adds	r3, #8
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d102      	bne.n	8006f1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006f16:	e007      	b.n	8006f28 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d9c3      	bls.n	8006eb0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d109      	bne.n	8006f42 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <chk_lock+0x9e>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d101      	bne.n	8006f3e <chk_lock+0xa2>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e013      	b.n	8006f66 <chk_lock+0xca>
 8006f3e:	2312      	movs	r3, #18
 8006f40:	e011      	b.n	8006f66 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <chk_lock+0xc4>
 8006f48:	4909      	ldr	r1, [pc, #36]	; (8006f70 <chk_lock+0xd4>)
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	330a      	adds	r3, #10
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d101      	bne.n	8006f64 <chk_lock+0xc8>
 8006f60:	2310      	movs	r3, #16
 8006f62:	e000      	b.n	8006f66 <chk_lock+0xca>
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	2000036c 	.word	0x2000036c

08006f74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	e002      	b.n	8006f86 <enq_lock+0x12>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3301      	adds	r3, #1
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d809      	bhi.n	8006fa0 <enq_lock+0x2c>
 8006f8c:	490a      	ldr	r1, [pc, #40]	; (8006fb8 <enq_lock+0x44>)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ef      	bne.n	8006f80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000036c 	.word	0x2000036c

08006fbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e02b      	b.n	8007024 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8006fcc:	4955      	ldr	r1, [pc, #340]	; (8007124 <inc_lock+0x168>)
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d11b      	bne.n	800701e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8006fe6:	494f      	ldr	r1, [pc, #316]	; (8007124 <inc_lock+0x168>)
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4613      	mov	r3, r2
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d10d      	bne.n	800701e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8007002:	4948      	ldr	r1, [pc, #288]	; (8007124 <inc_lock+0x168>)
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	440b      	add	r3, r1
 8007010:	3308      	adds	r3, #8
 8007012:	881a      	ldrh	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 800701a:	429a      	cmp	r2, r3
 800701c:	d006      	beq.n	800702c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d9d0      	bls.n	8006fcc <inc_lock+0x10>
 800702a:	e000      	b.n	800702e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800702c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d145      	bne.n	80070c0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e002      	b.n	8007040 <inc_lock+0x84>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d809      	bhi.n	800705a <inc_lock+0x9e>
 8007046:	4937      	ldr	r1, [pc, #220]	; (8007124 <inc_lock+0x168>)
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4613      	mov	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1ef      	bne.n	800703a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d101      	bne.n	8007064 <inc_lock+0xa8>
 8007060:	2300      	movs	r3, #0
 8007062:	e05a      	b.n	800711a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800706a:	482e      	ldr	r0, [pc, #184]	; (8007124 <inc_lock+0x168>)
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4403      	add	r3, r0
 8007078:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8007080:	4828      	ldr	r0, [pc, #160]	; (8007124 <inc_lock+0x168>)
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4613      	mov	r3, r2
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4403      	add	r3, r0
 800708e:	3304      	adds	r3, #4
 8007090:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 8007098:	4922      	ldr	r1, [pc, #136]	; (8007124 <inc_lock+0x168>)
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3308      	adds	r3, #8
 80070a8:	4602      	mov	r2, r0
 80070aa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80070ac:	491d      	ldr	r1, [pc, #116]	; (8007124 <inc_lock+0x168>)
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	330a      	adds	r3, #10
 80070bc:	2200      	movs	r2, #0
 80070be:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <inc_lock+0x124>
 80070c6:	4917      	ldr	r1, [pc, #92]	; (8007124 <inc_lock+0x168>)
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4613      	mov	r3, r2
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	330a      	adds	r3, #10
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <inc_lock+0x124>
 80070dc:	2300      	movs	r3, #0
 80070de:	e01c      	b.n	800711a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <inc_lock+0x142>
 80070e6:	490f      	ldr	r1, [pc, #60]	; (8007124 <inc_lock+0x168>)
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4613      	mov	r3, r2
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	330a      	adds	r3, #10
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	b299      	uxth	r1, r3
 80070fc:	e001      	b.n	8007102 <inc_lock+0x146>
 80070fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007102:	4808      	ldr	r0, [pc, #32]	; (8007124 <inc_lock+0x168>)
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4403      	add	r3, r0
 8007110:	330a      	adds	r3, #10
 8007112:	460a      	mov	r2, r1
 8007114:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	2000036c 	.word	0x2000036c

08007128 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3b01      	subs	r3, #1
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d82e      	bhi.n	800719a <dec_lock+0x72>
		n = Files[i].ctr;
 800713c:	491b      	ldr	r1, [pc, #108]	; (80071ac <dec_lock+0x84>)
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	330a      	adds	r3, #10
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007150:	89fb      	ldrh	r3, [r7, #14]
 8007152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007156:	d101      	bne.n	800715c <dec_lock+0x34>
 8007158:	2300      	movs	r3, #0
 800715a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <dec_lock+0x40>
 8007162:	89fb      	ldrh	r3, [r7, #14]
 8007164:	3b01      	subs	r3, #1
 8007166:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007168:	4910      	ldr	r1, [pc, #64]	; (80071ac <dec_lock+0x84>)
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	330a      	adds	r3, #10
 8007178:	89fa      	ldrh	r2, [r7, #14]
 800717a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800717c:	89fb      	ldrh	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d108      	bne.n	8007194 <dec_lock+0x6c>
 8007182:	490a      	ldr	r1, [pc, #40]	; (80071ac <dec_lock+0x84>)
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	737b      	strb	r3, [r7, #13]
 8007198:	e001      	b.n	800719e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800719a:	2302      	movs	r3, #2
 800719c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800719e:	7b7b      	ldrb	r3, [r7, #13]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	2000036c 	.word	0x2000036c

080071b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e016      	b.n	80071ec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071be:	4910      	ldr	r1, [pc, #64]	; (8007200 <clear_lock+0x50>)
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4613      	mov	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d108      	bne.n	80071e6 <clear_lock+0x36>
 80071d4:	490a      	ldr	r1, [pc, #40]	; (8007200 <clear_lock+0x50>)
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d9e5      	bls.n	80071be <clear_lock+0xe>
	}
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	2000036c 	.word	0x2000036c

08007204 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8007216:	2b00      	cmp	r3, #0
 8007218:	d038      	beq.n	800728c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8007220:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	2301      	movs	r3, #1
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	f7ff fd7f 	bl	8006d30 <disk_write>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
 800723c:	e026      	b.n	800728c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007256:	429a      	cmp	r2, r3
 8007258:	d218      	bcs.n	800728c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	e010      	b.n	8007286 <sync_window+0x82>
					wsect += fs->fsize;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4413      	add	r3, r2
 800726e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	2301      	movs	r3, #1
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	f7ff fd58 	bl	8006d30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3b01      	subs	r3, #1
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d8eb      	bhi.n	8007264 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d01b      	beq.n	80072e8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ffa7 	bl	8007204 <sync_window>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	2301      	movs	r3, #1
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	f7ff fd10 	bl	8006cf0 <disk_read>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072d6:	f04f 33ff 	mov.w	r3, #4294967295
 80072da:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff ff82 	bl	8007204 <sync_window>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 809c 	bne.w	8007444 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007312:	2b03      	cmp	r3, #3
 8007314:	f040 8089 	bne.w	800742a <sync_fs+0x138>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800731e:	2b01      	cmp	r3, #1
 8007320:	f040 8083 	bne.w	800742a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800732c:	461a      	mov	r2, r3
 800732e:	2100      	movs	r1, #0
 8007330:	f7ff fd5a 	bl	8006de8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2255      	movs	r2, #85	; 0x55
 8007338:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22aa      	movs	r2, #170	; 0xaa
 8007340:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2252      	movs	r2, #82	; 0x52
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2252      	movs	r2, #82	; 0x52
 800734e:	705a      	strb	r2, [r3, #1]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2261      	movs	r2, #97	; 0x61
 8007354:	709a      	strb	r2, [r3, #2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2241      	movs	r2, #65	; 0x41
 800735a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2272      	movs	r2, #114	; 0x72
 8007360:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2272      	movs	r2, #114	; 0x72
 8007368:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2241      	movs	r2, #65	; 0x41
 8007370:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2261      	movs	r2, #97	; 0x61
 8007378:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007382:	b2da      	uxtb	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007390:	b29b      	uxth	r3, r3
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	b2da      	uxtb	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80073b4:	0e1b      	lsrs	r3, r3, #24
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	0a1b      	lsrs	r3, r3, #8
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800741c:	2301      	movs	r3, #1
 800741e:	f7ff fc87 	bl	8006d30 <disk_write>
			fs->fsi_flag = 0;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff fc9b 	bl	8006d70 <disk_ioctl>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <sync_fs+0x152>
			res = FR_DISK_ERR;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	3b02      	subs	r3, #2
 800745c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007464:	3b02      	subs	r3, #2
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d301      	bcc.n	8007470 <clust2sect+0x22>
 800746c:	2300      	movs	r3, #0
 800746e:	e00a      	b.n	8007486 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007476:	461a      	mov	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	fb03 f202 	mul.w	r2, r3, r2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007484:	4413      	add	r3, r2
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d905      	bls.n	80074ac <get_fat+0x1c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <get_fat+0x22>
		val = 1;	/* Internal error */
 80074ac:	2301      	movs	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e0d7      	b.n	8007662 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f000 808f 	beq.w	80075e2 <get_fat+0x152>
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	f300 80c2 	bgt.w	800764e <get_fat+0x1be>
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d002      	beq.n	80074d4 <get_fat+0x44>
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d059      	beq.n	8007586 <get_fat+0xf6>
 80074d2:	e0bc      	b.n	800764e <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80074ee:	4619      	mov	r1, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80074f6:	4413      	add	r3, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fecb 	bl	8007296 <move_window>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 80a6 	bne.w	8007654 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	60fa      	str	r2, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007514:	fbb3 f1f2 	udiv	r1, r3, r2
 8007518:	fb02 f201 	mul.w	r2, r2, r1
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	5cd3      	ldrb	r3, [r2, r3]
 8007522:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007530:	4619      	mov	r1, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	fbb3 f3f1 	udiv	r3, r3, r1
 8007538:	4413      	add	r3, r2
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff feaa 	bl	8007296 <move_window>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 8087 	bne.w	8007658 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007550:	461a      	mov	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	fbb3 f1f2 	udiv	r1, r3, r2
 8007558:	fb02 f201 	mul.w	r2, r2, r1
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	5cd3      	ldrb	r3, [r2, r3]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	461a      	mov	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <get_fat+0xec>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	e002      	b.n	8007582 <get_fat+0xf2>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007582:	617b      	str	r3, [r7, #20]
			break;
 8007584:	e06d      	b.n	8007662 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	4619      	mov	r1, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	fbb3 f3f1 	udiv	r3, r3, r1
 800759e:	4413      	add	r3, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fe77 	bl	8007296 <move_window>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d156      	bne.n	800765c <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80075b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80075bc:	fb02 f201 	mul.w	r2, r2, r1
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3301      	adds	r3, #1
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b21b      	sxth	r3, r3
 80075d8:	4313      	orrs	r3, r2
 80075da:	b21b      	sxth	r3, r3
 80075dc:	b29b      	uxth	r3, r3
 80075de:	617b      	str	r3, [r7, #20]
			break;
 80075e0:	e03f      	b.n	8007662 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80075ee:	089b      	lsrs	r3, r3, #2
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	4619      	mov	r1, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80075fa:	4413      	add	r3, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fe49 	bl	8007296 <move_window>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12a      	bne.n	8007660 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007614:	fbb3 f1f2 	udiv	r1, r3, r2
 8007618:	fb02 f201 	mul.w	r2, r2, r1
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3303      	adds	r3, #3
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	061a      	lsls	r2, r3, #24
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3302      	adds	r3, #2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	4313      	orrs	r3, r2
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	3201      	adds	r2, #1
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	0212      	lsls	r2, r2, #8
 800763e:	4313      	orrs	r3, r2
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	4313      	orrs	r3, r2
 8007646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800764a:	617b      	str	r3, [r7, #20]
			break;
 800764c:	e009      	b.n	8007662 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 800764e:	2301      	movs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e006      	b.n	8007662 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007654:	bf00      	nop
 8007656:	e004      	b.n	8007662 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007658:	bf00      	nop
 800765a:	e002      	b.n	8007662 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800765c:	bf00      	nop
 800765e:	e000      	b.n	8007662 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007660:	bf00      	nop
		}
	}

	return val;
 8007662:	697b      	ldr	r3, [r7, #20]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d905      	bls.n	800768a <put_fat+0x1e>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	d302      	bcc.n	8007690 <put_fat+0x24>
		res = FR_INT_ERR;
 800768a:	2302      	movs	r3, #2
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	e128      	b.n	80078e2 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007696:	2b03      	cmp	r3, #3
 8007698:	f000 80c3 	beq.w	8007822 <put_fat+0x1b6>
 800769c:	2b03      	cmp	r3, #3
 800769e:	f300 8116 	bgt.w	80078ce <put_fat+0x262>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d003      	beq.n	80076ae <put_fat+0x42>
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	f000 8087 	beq.w	80077ba <put_fat+0x14e>
 80076ac:	e10f      	b.n	80078ce <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4413      	add	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80076c8:	4619      	mov	r1, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d0:	4413      	add	r3, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fdde 	bl	8007296 <move_window>
 80076da:	4603      	mov	r3, r0
 80076dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076de:	7ffb      	ldrb	r3, [r7, #31]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f040 80f7 	bne.w	80078d4 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	617a      	str	r2, [r7, #20]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80076f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076f6:	fb02 f201 	mul.w	r2, r2, r1
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <put_fat+0xbc>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b25b      	sxtb	r3, r3
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	b25a      	sxtb	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	b25b      	sxtb	r3, r3
 8007720:	4313      	orrs	r3, r2
 8007722:	b25b      	sxtb	r3, r3
 8007724:	b2db      	uxtb	r3, r3
 8007726:	e001      	b.n	800772c <put_fat+0xc0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007744:	4619      	mov	r1, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	fbb3 f3f1 	udiv	r3, r3, r1
 800774c:	4413      	add	r3, r2
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fda0 	bl	8007296 <move_window>
 8007756:	4603      	mov	r3, r0
 8007758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800775a:	7ffb      	ldrb	r3, [r7, #31]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 80bb 	bne.w	80078d8 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007768:	461a      	mov	r2, r3
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007770:	fb02 f201 	mul.w	r2, r2, r1
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <put_fat+0x122>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	b2db      	uxtb	r3, r3
 800778c:	e00e      	b.n	80077ac <put_fat+0x140>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b25b      	sxtb	r3, r3
 8007794:	f023 030f 	bic.w	r3, r3, #15
 8007798:	b25a      	sxtb	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0a1b      	lsrs	r3, r3, #8
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80077b8:	e093      	b.n	80078e2 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d2:	4413      	add	r3, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fd5d 	bl	8007296 <move_window>
 80077dc:	4603      	mov	r3, r0
 80077de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077e0:	7ffb      	ldrb	r3, [r7, #31]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d17a      	bne.n	80078dc <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80077f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f4:	fb02 f201 	mul.w	r2, r2, r1
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	b29b      	uxth	r3, r3
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	b29a      	uxth	r2, r3
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	3301      	adds	r3, #1
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8007820:	e05f      	b.n	80078e2 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	b29b      	uxth	r3, r3
 8007832:	4619      	mov	r1, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	fbb3 f3f1 	udiv	r3, r3, r1
 800783a:	4413      	add	r3, r2
 800783c:	4619      	mov	r1, r3
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff fd29 	bl	8007296 <move_window>
 8007844:	4603      	mov	r3, r0
 8007846:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007848:	7ffb      	ldrb	r3, [r7, #31]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d148      	bne.n	80078e0 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8007858:	fbb3 f1f2 	udiv	r1, r3, r2
 800785c:	fb02 f201 	mul.w	r2, r2, r1
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3303      	adds	r3, #3
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	061a      	lsls	r2, r3, #24
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	3302      	adds	r3, #2
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	041b      	lsls	r3, r3, #16
 8007878:	4313      	orrs	r3, r2
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	3201      	adds	r2, #1
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	0212      	lsls	r2, r2, #8
 8007882:	4313      	orrs	r3, r2
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	4313      	orrs	r3, r2
 800788a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	4313      	orrs	r3, r2
 8007892:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	0a1b      	lsrs	r3, r3, #8
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	0c1a      	lsrs	r2, r3, #16
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	3302      	adds	r3, #2
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0e1a      	lsrs	r2, r3, #24
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	3303      	adds	r3, #3
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80078cc:	e009      	b.n	80078e2 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 80078ce:	2302      	movs	r3, #2
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e006      	b.n	80078e2 <put_fat+0x276>
			if (res != FR_OK) break;
 80078d4:	bf00      	nop
 80078d6:	e004      	b.n	80078e2 <put_fat+0x276>
			if (res != FR_OK) break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <put_fat+0x276>
			if (res != FR_OK) break;
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <put_fat+0x276>
			if (res != FR_OK) break;
 80078e0:	bf00      	nop
		}
	}

	return res;
 80078e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d905      	bls.n	8007908 <remove_chain+0x1c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <remove_chain+0x22>
		res = FR_INT_ERR;
 8007908:	2302      	movs	r3, #2
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e043      	b.n	8007996 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007912:	e036      	b.n	8007982 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fdba 	bl	8007490 <get_fat>
 800791c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d035      	beq.n	8007990 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d102      	bne.n	8007930 <remove_chain+0x44>
 800792a:	2302      	movs	r3, #2
 800792c:	73fb      	strb	r3, [r7, #15]
 800792e:	e032      	b.n	8007996 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d102      	bne.n	800793e <remove_chain+0x52>
 8007938:	2301      	movs	r3, #1
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e02b      	b.n	8007996 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800793e:	2200      	movs	r2, #0
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fe92 	bl	800766c <put_fat>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d120      	bne.n	8007994 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d00f      	beq.n	800797e <remove_chain+0x92>
				fs->free_clust++;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8007972:	f043 0301 	orr.w	r3, r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3c2      	bcc.n	8007914 <remove_chain+0x28>
 800798e:	e002      	b.n	8007996 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8007994:	bf00      	nop
		}
	}

	return res;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80079b6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <create_chain+0x2a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d31c      	bcc.n	8007a04 <create_chain+0x64>
 80079ca:	2301      	movs	r3, #1
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	e019      	b.n	8007a04 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fd5c 	bl	8007490 <get_fat>
 80079d8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d801      	bhi.n	80079e4 <create_chain+0x44>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e076      	b.n	8007ad2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d101      	bne.n	80079f0 <create_chain+0x50>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	e070      	b.n	8007ad2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d201      	bcs.n	8007a00 <create_chain+0x60>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	e068      	b.n	8007ad2 <create_chain+0x132>
		scl = clst;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d307      	bcc.n	8007a2a <create_chain+0x8a>
			ncl = 2;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d901      	bls.n	8007a2a <create_chain+0x8a>
 8007a26:	2300      	movs	r3, #0
 8007a28:	e053      	b.n	8007ad2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fd2f 	bl	8007490 <get_fat>
 8007a32:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d002      	beq.n	8007a48 <create_chain+0xa8>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <create_chain+0xac>
			return cs;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	e042      	b.n	8007ad2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d1d9      	bne.n	8007a08 <create_chain+0x68>
 8007a54:	2300      	movs	r3, #0
 8007a56:	e03c      	b.n	8007ad2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007a58:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007a5a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007a5e:	6979      	ldr	r1, [r7, #20]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fe03 	bl	800766c <put_fat>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d109      	bne.n	8007a84 <create_chain+0xe4>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d006      	beq.n	8007a84 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff fdf6 	bl	800766c <put_fat>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11a      	bne.n	8007ac0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d018      	beq.n	8007ad0 <create_chain+0x130>
			fs->free_clust--;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007aa4:	1e5a      	subs	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8007abe:	e007      	b.n	8007ad0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d102      	bne.n	8007acc <create_chain+0x12c>
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	e000      	b.n	8007ace <create_chain+0x12e>
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007ad0:	697b      	ldr	r3, [r7, #20]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b087      	sub	sp, #28
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007aea:	3304      	adds	r3, #4
 8007aec:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007af4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007af8:	461a      	mov	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8007b06:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1d1a      	adds	r2, r3, #4
 8007b14:	613a      	str	r2, [r7, #16]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <clmt_clust+0x4a>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e010      	b.n	8007b46 <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d307      	bcc.n	8007b3c <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3304      	adds	r3, #4
 8007b38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b3a:	e7e9      	b.n	8007b10 <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8007b3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	4413      	add	r3, r2
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr

08007b50 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007b6a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d007      	beq.n	8007b82 <dir_sdi+0x32>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007b78:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d301      	bcc.n	8007b86 <dir_sdi+0x36>
		return FR_INT_ERR;
 8007b82:	2302      	movs	r3, #2
 8007b84:	e091      	b.n	8007caa <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <dir_sdi+0x56>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007b92:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d105      	bne.n	8007ba6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ba0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007ba4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d111      	bne.n	8007bd0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007bb2:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d301      	bcc.n	8007bc2 <dir_sdi+0x72>
			return FR_INT_ERR;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e073      	b.n	8007caa <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007bc8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e03b      	b.n	8007c48 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007bd6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007be6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007bea:	fb03 f302 	mul.w	r3, r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007bf0:	e01e      	b.n	8007c30 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fc48 	bl	8007490 <get_fat>
 8007c00:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d101      	bne.n	8007c0e <dir_sdi+0xbe>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e04d      	b.n	8007caa <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d907      	bls.n	8007c24 <dir_sdi+0xd4>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c1a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d301      	bcc.n	8007c28 <dir_sdi+0xd8>
				return FR_INT_ERR;
 8007c24:	2302      	movs	r3, #2
 8007c26:	e040      	b.n	8007caa <dir_sdi+0x15a>
			idx -= ic;
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d2dc      	bcs.n	8007bf2 <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c3e:	6979      	ldr	r1, [r7, #20]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fc04 	bl	800744e <clust2sect>
 8007c46:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <dir_sdi+0x10a>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e027      	b.n	8007caa <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c60:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	441a      	add	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c80:	4618      	mov	r0, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c88:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c98:	fb02 f201 	mul.w	r2, r2, r1
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	015b      	lsls	r3, r3, #5
 8007ca0:	18c2      	adds	r2, r0, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007cb2:	b590      	push	{r4, r7, lr}
 8007cb4:	b087      	sub	sp, #28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <dir_next+0x26>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <dir_next+0x2a>
		return FR_NO_FILE;
 8007cd8:	2304      	movs	r3, #4
 8007cda:	e100      	b.n	8007ede <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ce2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf2:	fb02 f201 	mul.w	r2, r2, r1
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 80d3 	bne.w	8007ea4 <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d1c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007d20:	461a      	mov	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4293      	cmp	r3, r2
 8007d26:	f0c0 80bd 	bcc.w	8007ea4 <dir_next+0x1f2>
				return FR_NO_FILE;
 8007d2a:	2304      	movs	r3, #4
 8007d2c:	e0d7      	b.n	8007ede <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d34:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8007d4a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8007d4e:	3a01      	subs	r2, #1
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f040 80a6 	bne.w	8007ea4 <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7ff fb92 	bl	8007490 <get_fat>
 8007d6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d801      	bhi.n	8007d78 <dir_next+0xc6>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e0b2      	b.n	8007ede <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d101      	bne.n	8007d84 <dir_next+0xd2>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0ac      	b.n	8007ede <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d8a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d378      	bcc.n	8007e86 <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <dir_next+0xec>
 8007d9a:	2304      	movs	r3, #4
 8007d9c:	e09f      	b.n	8007ede <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7ff fdf7 	bl	80079a0 <create_chain>
 8007db2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <dir_next+0x10c>
 8007dba:	2307      	movs	r3, #7
 8007dbc:	e08f      	b.n	8007ede <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <dir_next+0x116>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e08a      	b.n	8007ede <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d101      	bne.n	8007dd4 <dir_next+0x122>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e084      	b.n	8007ede <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fa12 	bl	8007204 <sync_window>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <dir_next+0x138>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e079      	b.n	8007ede <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007df0:	4618      	mov	r0, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007df8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f7fe fff2 	bl	8006de8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7ff fb1b 	bl	800744e <clust2sect>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e01b      	b.n	8007e5c <dir_next+0x1aa>
						dp->fs->wflag = 1;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff f9e4 	bl	8007204 <sync_window>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <dir_next+0x194>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04b      	b.n	8007ede <dir_next+0x22c>
						dp->fs->winsect++;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e4c:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8007e50:	3201      	adds	r2, #1
 8007e52:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e62:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007e66:	461a      	mov	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d3da      	bcc.n	8007e24 <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e74:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	1a8a      	subs	r2, r1, r2
 8007e82:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e94:	6979      	ldr	r1, [r7, #20]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fad9 	bl	800744e <clust2sect>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ebc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ecc:	fb02 f201 	mul.w	r2, r2, r1
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	015b      	lsls	r3, r3, #5
 8007ed4:	18c2      	adds	r2, r0, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd90      	pop	{r4, r7, pc}

08007ee6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff fe2c 	bl	8007b50 <dir_sdi>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d131      	bne.n	8007f66 <dir_alloc+0x80>
		n = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff f9be 	bl	8007296 <move_window>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11f      	bne.n	8007f64 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2be5      	cmp	r3, #229	; 0xe5
 8007f2e:	d005      	beq.n	8007f3c <dir_alloc+0x56>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d107      	bne.n	8007f4c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d102      	bne.n	8007f50 <dir_alloc+0x6a>
 8007f4a:	e00c      	b.n	8007f66 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007f50:	2101      	movs	r1, #1
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff fead 	bl	8007cb2 <dir_next>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0d1      	beq.n	8007f06 <dir_alloc+0x20>
 8007f62:	e000      	b.n	8007f66 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007f64:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d101      	bne.n	8007f70 <dir_alloc+0x8a>
 8007f6c:	2307      	movs	r3, #7
 8007f6e:	73fb      	strb	r3, [r7, #15]
	return res;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	331b      	adds	r3, #27
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	331a      	adds	r3, #26
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b21b      	sxth	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b21b      	sxth	r3, r3
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d10f      	bne.n	8007fc8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3315      	adds	r3, #21
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	b21a      	sxth	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]

	return cl;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	331a      	adds	r3, #26
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	331b      	adds	r3, #27
 8007ff4:	b2d2      	uxtb	r2, r2
 8007ff6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	0c1a      	lsrs	r2, r3, #16
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3314      	adds	r3, #20
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	0c1b      	lsrs	r3, r3, #16
 8008008:	b29b      	uxth	r3, r3
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3315      	adds	r3, #21
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr

08008020 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	4613      	mov	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	2301      	movs	r3, #1
 8008046:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008048:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <cmp_lfn+0xd8>)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	4413      	add	r3, r2
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	3301      	adds	r3, #1
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4413      	add	r3, r2
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	b21a      	sxth	r2, r3
 800805c:	4926      	ldr	r1, [pc, #152]	; (80080f8 <cmp_lfn+0xd8>)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	440b      	add	r3, r1
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	4619      	mov	r1, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	440b      	add	r3, r1
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b21b      	sxth	r3, r3
 800806e:	4313      	orrs	r3, r2
 8008070:	b21b      	sxth	r3, r3
 8008072:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008074:	89fb      	ldrh	r3, [r7, #14]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d019      	beq.n	80080ae <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800807a:	89bb      	ldrh	r3, [r7, #12]
 800807c:	4618      	mov	r0, r3
 800807e:	f002 f80b 	bl	800a098 <ff_wtoupper>
 8008082:	4603      	mov	r3, r0
 8008084:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2bfe      	cmp	r3, #254	; 0xfe
 800808a:	d80e      	bhi.n	80080aa <cmp_lfn+0x8a>
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	617a      	str	r2, [r7, #20]
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f001 fffc 	bl	800a098 <ff_wtoupper>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d008      	beq.n	80080bc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80080aa:	2300      	movs	r3, #0
 80080ac:	e01f      	b.n	80080ee <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80080ae:	89bb      	ldrh	r3, [r7, #12]
 80080b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d001      	beq.n	80080bc <cmp_lfn+0x9c>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e018      	b.n	80080ee <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	3301      	adds	r3, #1
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d9bf      	bls.n	8008048 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <cmp_lfn+0xcc>
 80080d4:	89fb      	ldrh	r3, [r7, #14]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <cmp_lfn+0xcc>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <cmp_lfn+0xcc>
		return 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e000      	b.n	80080ee <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80080ec:	2301      	movs	r3, #1
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	0800dc18 	.word	0x0800dc18

080080fc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b089      	sub	sp, #36	; 0x24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	460b      	mov	r3, r1
 800810c:	71fb      	strb	r3, [r7, #7]
 800810e:	4613      	mov	r3, r2
 8008110:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	330d      	adds	r3, #13
 8008116:	79ba      	ldrb	r2, [r7, #6]
 8008118:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	330b      	adds	r3, #11
 800811e:	220f      	movs	r2, #15
 8008120:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	330c      	adds	r3, #12
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	331a      	adds	r3, #26
 800812e:	2200      	movs	r2, #0
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	331b      	adds	r3, #27
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	1e5a      	subs	r2, r3, #1
 800813e:	4613      	mov	r3, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	82fb      	strh	r3, [r7, #22]
 800814e:	2300      	movs	r3, #0
 8008150:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008152:	8afb      	ldrh	r3, [r7, #22]
 8008154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <fit_lfn+0x70>
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	61fa      	str	r2, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800816c:	4a1c      	ldr	r2, [pc, #112]	; (80081e0 <fit_lfn+0xe4>)
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	4413      	add	r3, r2
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	8afa      	ldrh	r2, [r7, #22]
 800817c:	b2d2      	uxtb	r2, r2
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	8afb      	ldrh	r3, [r7, #22]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b299      	uxth	r1, r3
 8008186:	4a16      	ldr	r2, [pc, #88]	; (80081e0 <fit_lfn+0xe4>)
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	4413      	add	r3, r2
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	4413      	add	r3, r2
 8008194:	b2ca      	uxtb	r2, r1
 8008196:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008198:	8afb      	ldrh	r3, [r7, #22]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <fit_lfn+0xa8>
 800819e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b0c      	cmp	r3, #12
 80081ae:	d9d0      	bls.n	8008152 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80081b0:	8afb      	ldrh	r3, [r7, #22]
 80081b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d006      	beq.n	80081c8 <fit_lfn+0xcc>
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <fit_lfn+0xd4>
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	79fa      	ldrb	r2, [r7, #7]
 80081d4:	701a      	strb	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	3724      	adds	r7, #36	; 0x24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr
 80081e0:	0800dc18 	.word	0x0800dc18

080081e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	; 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80081f2:	220b      	movs	r2, #11
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7fe fdd8 	bl	8006dac <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d92b      	bls.n	800825a <gen_numname+0x76>
		sr = seq;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008206:	e022      	b.n	800824e <gen_numname+0x6a>
			wc = *lfn++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008212:	2300      	movs	r3, #0
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
 8008216:	e017      	b.n	8008248 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	005a      	lsls	r2, r3, #1
 800821c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	4413      	add	r3, r2
 8008224:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008228:	085b      	lsrs	r3, r3, #1
 800822a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <gen_numname+0x5e>
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800823c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008240:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	3301      	adds	r3, #1
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	2b0f      	cmp	r3, #15
 800824c:	d9e4      	bls.n	8008218 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1d8      	bne.n	8008208 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800825a:	2307      	movs	r3, #7
 800825c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	b2db      	uxtb	r3, r3
 8008268:	3330      	adds	r3, #48	; 0x30
 800826a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800826e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008272:	2b39      	cmp	r3, #57	; 0x39
 8008274:	d904      	bls.n	8008280 <gen_numname+0x9c>
 8008276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800827a:	3307      	adds	r3, #7
 800827c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	1e5a      	subs	r2, r3, #1
 8008284:	62ba      	str	r2, [r7, #40]	; 0x28
 8008286:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800828a:	4413      	add	r3, r2
 800828c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008290:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	091b      	lsrs	r3, r3, #4
 8008298:	603b      	str	r3, [r7, #0]
	} while (seq);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1de      	bne.n	800825e <gen_numname+0x7a>
	ns[i] = '~';
 80082a0:	f107 0214 	add.w	r2, r7, #20
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	4413      	add	r3, r2
 80082a8:	227e      	movs	r2, #126	; 0x7e
 80082aa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80082ac:	2300      	movs	r3, #0
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
 80082b0:	e002      	b.n	80082b8 <gen_numname+0xd4>
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	3301      	adds	r3, #1
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	429a      	cmp	r2, r3
 80082be:	d205      	bcs.n	80082cc <gen_numname+0xe8>
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	4413      	add	r3, r2
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d1f2      	bne.n	80082b2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b07      	cmp	r3, #7
 80082d0:	d808      	bhi.n	80082e4 <gen_numname+0x100>
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80082d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082dc:	4413      	add	r3, r2
 80082de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80082e2:	e000      	b.n	80082e6 <gen_numname+0x102>
 80082e4:	2120      	movs	r1, #32
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	627a      	str	r2, [r7, #36]	; 0x24
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	460a      	mov	r2, r1
 80082f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	2b07      	cmp	r3, #7
 80082f8:	d9e8      	bls.n	80082cc <gen_numname+0xe8>
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3730      	adds	r7, #48	; 0x30
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008310:	230b      	movs	r3, #11
 8008312:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	0852      	lsrs	r2, r2, #1
 800831a:	01db      	lsls	r3, r3, #7
 800831c:	4313      	orrs	r3, r2
 800831e:	b2da      	uxtb	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	1c59      	adds	r1, r3, #1
 8008324:	6079      	str	r1, [r7, #4]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	4413      	add	r3, r2
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1ed      	bne.n	8008314 <sum_sfn+0x10>
	return sum;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr

08008344 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fbfe 	bl	8007b50 <dir_sdi>
 8008354:	4603      	mov	r3, r0
 8008356:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <dir_find+0x1e>
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	e0ac      	b.n	80084bc <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008362:	23ff      	movs	r3, #255	; 0xff
 8008364:	753b      	strb	r3, [r7, #20]
 8008366:	7d3b      	ldrb	r3, [r7, #20]
 8008368:	757b      	strb	r3, [r7, #21]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008370:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f7fe ff87 	bl	8007296 <move_window>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f040 808e 	bne.w	80084b0 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800839a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083a2:	7dbb      	ldrb	r3, [r7, #22]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <dir_find+0x6a>
 80083a8:	2304      	movs	r3, #4
 80083aa:	75fb      	strb	r3, [r7, #23]
 80083ac:	e085      	b.n	80084ba <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	330b      	adds	r3, #11
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80083ba:	7dbb      	ldrb	r3, [r7, #22]
 80083bc:	2be5      	cmp	r3, #229	; 0xe5
 80083be:	d007      	beq.n	80083d0 <dir_find+0x8c>
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <dir_find+0x9c>
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	2b0f      	cmp	r3, #15
 80083ce:	d007      	beq.n	80083e0 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80083d0:	23ff      	movs	r3, #255	; 0xff
 80083d2:	757b      	strb	r3, [r7, #21]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083da:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
 80083de:	e05c      	b.n	800849a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b0f      	cmp	r3, #15
 80083e4:	d133      	bne.n	800844e <dir_find+0x10a>
				if (dp->lfn) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d054      	beq.n	800849a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80083f0:	7dbb      	ldrb	r3, [r7, #22]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	7b5b      	ldrb	r3, [r3, #13]
 80083fe:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8008400:	7dbb      	ldrb	r3, [r7, #22]
 8008402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008406:	75bb      	strb	r3, [r7, #22]
 8008408:	7dbb      	ldrb	r3, [r7, #22]
 800840a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008418:	7dba      	ldrb	r2, [r7, #22]
 800841a:	7d7b      	ldrb	r3, [r7, #21]
 800841c:	429a      	cmp	r2, r3
 800841e:	d113      	bne.n	8008448 <dir_find+0x104>
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	330d      	adds	r3, #13
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	7d3a      	ldrb	r2, [r7, #20]
 8008428:	429a      	cmp	r2, r3
 800842a:	d10d      	bne.n	8008448 <dir_find+0x104>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8008432:	6939      	ldr	r1, [r7, #16]
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff fdf3 	bl	8008020 <cmp_lfn>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <dir_find+0x104>
 8008440:	7d7b      	ldrb	r3, [r7, #21]
 8008442:	3b01      	subs	r3, #1
 8008444:	b2db      	uxtb	r3, r3
 8008446:	e000      	b.n	800844a <dir_find+0x106>
 8008448:	23ff      	movs	r3, #255	; 0xff
 800844a:	757b      	strb	r3, [r7, #21]
 800844c:	e025      	b.n	800849a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800844e:	7d7b      	ldrb	r3, [r7, #21]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <dir_find+0x120>
 8008454:	6938      	ldr	r0, [r7, #16]
 8008456:	f7ff ff55 	bl	8008304 <sum_sfn>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	7d3b      	ldrb	r3, [r7, #20]
 8008460:	4293      	cmp	r3, r2
 8008462:	d027      	beq.n	80084b4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800846a:	330b      	adds	r3, #11
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <dir_find+0x148>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800847c:	220b      	movs	r2, #11
 800847e:	4619      	mov	r1, r3
 8008480:	6938      	ldr	r0, [r7, #16]
 8008482:	f7fe fccb 	bl	8006e1c <mem_cmp>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d015      	beq.n	80084b8 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800848c:	23ff      	movs	r3, #255	; 0xff
 800848e:	757b      	strb	r3, [r7, #21]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008496:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fc08 	bl	8007cb2 <dir_next>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f af63 	beq.w	8008374 <dir_find+0x30>
 80084ae:	e004      	b.n	80084ba <dir_find+0x176>
		if (res != FR_OK) break;
 80084b0:	bf00      	nop
 80084b2:	e002      	b.n	80084ba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80084b8:	bf00      	nop

	return res;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08c      	sub	sp, #48	; 0x30
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80084d2:	623b      	str	r3, [r7, #32]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80084da:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	220c      	movs	r2, #12
 80084e2:	6a39      	ldr	r1, [r7, #32]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fc61 	bl	8006dac <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d037      	beq.n	8008564 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	330b      	adds	r3, #11
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		for (n = 1; n < 100; n++) {
 8008504:	2301      	movs	r3, #1
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
 8008508:	e013      	b.n	8008532 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800850a:	f107 010c 	add.w	r1, r7, #12
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	6a38      	ldr	r0, [r7, #32]
 8008514:	f7ff fe66 	bl	80081e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff ff13 	bl	8008344 <dir_find>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	3301      	adds	r3, #1
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	2b63      	cmp	r3, #99	; 0x63
 8008536:	d9e8      	bls.n	800850a <dir_register+0x46>
 8008538:	e000      	b.n	800853c <dir_register+0x78>
			if (res != FR_OK) break;
 800853a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b64      	cmp	r3, #100	; 0x64
 8008540:	d101      	bne.n	8008546 <dir_register+0x82>
 8008542:	2307      	movs	r3, #7
 8008544:	e0c5      	b.n	80086d2 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800854a:	2b04      	cmp	r3, #4
 800854c:	d002      	beq.n	8008554 <dir_register+0x90>
 800854e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008552:	e0be      	b.n	80086d2 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	330b      	adds	r3, #11
 8008558:	7dfa      	ldrb	r2, [r7, #23]
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d014      	beq.n	8008598 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800856e:	2300      	movs	r3, #0
 8008570:	62bb      	str	r3, [r7, #40]	; 0x28
 8008572:	e002      	b.n	800857a <dir_register+0xb6>
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	3301      	adds	r3, #1
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1f5      	bne.n	8008574 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	3319      	adds	r3, #25
 800858c:	4a53      	ldr	r2, [pc, #332]	; (80086dc <dir_register+0x218>)
 800858e:	fba2 2303 	umull	r2, r3, r2, r3
 8008592:	089b      	lsrs	r3, r3, #2
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
 8008596:	e001      	b.n	800859c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8008598:	2301      	movs	r3, #1
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800859c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fca1 	bl	8007ee6 <dir_alloc>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80085aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d153      	bne.n	800865a <dir_register+0x196>
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	3b01      	subs	r3, #1
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d04d      	beq.n	800865a <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80085c4:	461a      	mov	r2, r3
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff fabf 	bl	8007b50 <dir_sdi>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80085d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13c      	bne.n	800865a <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fe8c 	bl	8008304 <sum_sfn>
 80085ec:	4603      	mov	r3, r0
 80085ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fe fe49 	bl	8007296 <move_window>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800860a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800860e:	2b00      	cmp	r3, #0
 8008610:	d122      	bne.n	8008658 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	b2da      	uxtb	r2, r3
 8008622:	7efb      	ldrb	r3, [r7, #27]
 8008624:	f7ff fd6a 	bl	80080fc <fit_lfn>
				dp->fs->wflag = 1;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 8008634:	2100      	movs	r1, #0
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fb3b 	bl	8007cb2 <dir_next>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008646:	2b00      	cmp	r3, #0
 8008648:	d107      	bne.n	800865a <dir_register+0x196>
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	3b01      	subs	r3, #1
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1cc      	bne.n	80085f0 <dir_register+0x12c>
 8008656:	e000      	b.n	800865a <dir_register+0x196>
				if (res != FR_OK) break;
 8008658:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800865a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800865e:	2b00      	cmp	r3, #0
 8008660:	d135      	bne.n	80086ce <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7fe fe10 	bl	8007296 <move_window>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800867c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008680:	2b00      	cmp	r3, #0
 8008682:	d124      	bne.n	80086ce <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800868a:	2220      	movs	r2, #32
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fbaa 	bl	8006de8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80086a0:	220b      	movs	r2, #11
 80086a2:	4619      	mov	r1, r3
 80086a4:	f7fe fb82 	bl	8006dac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80086ae:	330b      	adds	r3, #11
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80086b8:	330c      	adds	r3, #12
 80086ba:	f002 0218 	and.w	r2, r2, #24
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 80086ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3730      	adds	r7, #48	; 0x30
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	4ec4ec4f 	.word	0x4ec4ec4f

080086e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3309      	adds	r3, #9
 80086ee:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d070      	beq.n	80087dc <get_fileinfo+0xfc>
		dir = dp->dir;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008700:	60fb      	str	r3, [r7, #12]
		i = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8008706:	e032      	b.n	800876e <get_fileinfo+0x8e>
			c = (TCHAR)dir[i++];
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	61fa      	str	r2, [r7, #28]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b20      	cmp	r3, #32
 800871a:	d100      	bne.n	800871e <get_fileinfo+0x3e>
 800871c:	e027      	b.n	800876e <get_fileinfo+0x8e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b05      	cmp	r3, #5
 8008722:	d101      	bne.n	8008728 <get_fileinfo+0x48>
 8008724:	23e5      	movs	r3, #229	; 0xe5
 8008726:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	2b09      	cmp	r3, #9
 800872c:	d104      	bne.n	8008738 <get_fileinfo+0x58>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	61ba      	str	r2, [r7, #24]
 8008734:	222e      	movs	r2, #46	; 0x2e
 8008736:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d912      	bls.n	8008764 <get_fileinfo+0x84>
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b5a      	cmp	r3, #90	; 0x5a
 8008742:	d80f      	bhi.n	8008764 <get_fileinfo+0x84>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	330c      	adds	r3, #12
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d901      	bls.n	8008756 <get_fileinfo+0x76>
 8008752:	2310      	movs	r3, #16
 8008754:	e000      	b.n	8008758 <get_fileinfo+0x78>
 8008756:	2308      	movs	r3, #8
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	3320      	adds	r3, #32
 8008762:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	61ba      	str	r2, [r7, #24]
 800876a:	7dfa      	ldrb	r2, [r7, #23]
 800876c:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b0a      	cmp	r3, #10
 8008772:	d9c9      	bls.n	8008708 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	7ada      	ldrb	r2, [r3, #11]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	331f      	adds	r3, #31
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	061a      	lsls	r2, r3, #24
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	331e      	adds	r3, #30
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	4313      	orrs	r3, r2
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	321d      	adds	r2, #29
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	0212      	lsls	r2, r2, #8
 8008796:	4313      	orrs	r3, r2
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	321c      	adds	r2, #28
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	431a      	orrs	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3319      	adds	r3, #25
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3318      	adds	r3, #24
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b21b      	sxth	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b21b      	sxth	r3, r3
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3317      	adds	r3, #23
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	b21a      	sxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3316      	adds	r3, #22
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	b21b      	sxth	r3, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d044      	beq.n	8008874 <get_fileinfo+0x194>
		i = 0; p = fno->lfname;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d035      	beq.n	800886a <get_fileinfo+0x18a>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d031      	beq.n	800886a <get_fileinfo+0x18a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800880c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008810:	4293      	cmp	r3, r2
 8008812:	d02a      	beq.n	800886a <get_fileinfo+0x18a>
			lfn = dp->lfn;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800881a:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800881c:	e01d      	b.n	800885a <get_fileinfo+0x17a>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800881e:	897b      	ldrh	r3, [r7, #10]
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f001 fbfe 	bl	800a024 <ff_convert>
 8008828:	4603      	mov	r3, r0
 800882a:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800882c:	897b      	ldrh	r3, [r7, #10]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <get_fileinfo+0x158>
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e018      	b.n	800886a <get_fileinfo+0x18a>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	3b01      	subs	r3, #1
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	429a      	cmp	r2, r3
 8008842:	d302      	bcc.n	800884a <get_fileinfo+0x16a>
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	e00f      	b.n	800886a <get_fileinfo+0x18a>
				p[i++] = (TCHAR)w;
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	61fa      	str	r2, [r7, #28]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4413      	add	r3, r2
 8008854:	897a      	ldrh	r2, [r7, #10]
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1c9a      	adds	r2, r3, #2
 800885e:	613a      	str	r2, [r7, #16]
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	817b      	strh	r3, [r7, #10]
 8008864:	897b      	ldrh	r3, [r7, #10]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1d9      	bne.n	800881e <get_fileinfo+0x13e>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8008874:	bf00      	nop
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	e002      	b.n	8008894 <create_name+0x18>
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	3301      	adds	r3, #1
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b2f      	cmp	r3, #47	; 0x2f
 800889a:	d0f8      	beq.n	800888e <create_name+0x12>
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b5c      	cmp	r3, #92	; 0x5c
 80088a2:	d0f4      	beq.n	800888e <create_name+0x12>
	lfn = dp->lfn;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80088aa:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	61ba      	str	r2, [r7, #24]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80088c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088c4:	2b1f      	cmp	r3, #31
 80088c6:	d92f      	bls.n	8008928 <create_name+0xac>
 80088c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088ca:	2b2f      	cmp	r3, #47	; 0x2f
 80088cc:	d02c      	beq.n	8008928 <create_name+0xac>
 80088ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d0:	2b5c      	cmp	r3, #92	; 0x5c
 80088d2:	d029      	beq.n	8008928 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2bfe      	cmp	r3, #254	; 0xfe
 80088d8:	d901      	bls.n	80088de <create_name+0x62>
			return FR_INVALID_NAME;
 80088da:	2306      	movs	r3, #6
 80088dc:	e17b      	b.n	8008bd6 <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 80088de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80088e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e6:	2101      	movs	r1, #1
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fb9b 	bl	800a024 <ff_convert>
 80088ee:	4603      	mov	r3, r0
 80088f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80088f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <create_name+0x80>
 80088f8:	2306      	movs	r3, #6
 80088fa:	e16c      	b.n	8008bd6 <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80088fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008900:	d809      	bhi.n	8008916 <create_name+0x9a>
 8008902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008904:	4619      	mov	r1, r3
 8008906:	48b6      	ldr	r0, [pc, #728]	; (8008be0 <create_name+0x364>)
 8008908:	f7fe faae 	bl	8006e68 <chk_chr>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <create_name+0x9a>
			return FR_INVALID_NAME;
 8008912:	2306      	movs	r3, #6
 8008914:	e15f      	b.n	8008bd6 <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	617a      	str	r2, [r7, #20]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008924:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008926:	e7c5      	b.n	80088b4 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	441a      	add	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008934:	2b1f      	cmp	r3, #31
 8008936:	d801      	bhi.n	800893c <create_name+0xc0>
 8008938:	2304      	movs	r3, #4
 800893a:	e000      	b.n	800893e <create_name+0xc2>
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008942:	e011      	b.n	8008968 <create_name+0xec>
		w = lfn[di - 1];
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800894a:	3b01      	subs	r3, #1
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008958:	2b20      	cmp	r3, #32
 800895a:	d002      	beq.n	8008962 <create_name+0xe6>
 800895c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800895e:	2b2e      	cmp	r3, #46	; 0x2e
 8008960:	d106      	bne.n	8008970 <create_name+0xf4>
		di--;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	3b01      	subs	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1ea      	bne.n	8008944 <create_name+0xc8>
 800896e:	e000      	b.n	8008972 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8008970:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <create_name+0x100>
 8008978:	2306      	movs	r3, #6
 800897a:	e12c      	b.n	8008bd6 <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	2200      	movs	r2, #0
 8008986:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800898e:	220b      	movs	r2, #11
 8008990:	2120      	movs	r1, #32
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fa28 	bl	8006de8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e002      	b.n	80089a4 <create_name+0x128>
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	3301      	adds	r3, #1
 80089a2:	61bb      	str	r3, [r7, #24]
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d0f5      	beq.n	800899e <create_name+0x122>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	2b2e      	cmp	r3, #46	; 0x2e
 80089be:	d0ee      	beq.n	800899e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <create_name+0x15e>
 80089c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ca:	f043 0303 	orr.w	r3, r3, #3
 80089ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80089d2:	e002      	b.n	80089da <create_name+0x15e>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <create_name+0x178>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	3b01      	subs	r3, #1
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	2b2e      	cmp	r3, #46	; 0x2e
 80089f2:	d1ef      	bne.n	80089d4 <create_name+0x158>

	b = i = 0; ni = 8;
 80089f4:	2300      	movs	r3, #0
 80089f6:	623b      	str	r3, [r7, #32]
 80089f8:	2300      	movs	r3, #0
 80089fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089fe:	2308      	movs	r3, #8
 8008a00:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	61ba      	str	r2, [r7, #24]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 8090 	beq.w	8008b3a <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d006      	beq.n	8008a2e <create_name+0x1b2>
 8008a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a22:	2b2e      	cmp	r3, #46	; 0x2e
 8008a24:	d10a      	bne.n	8008a3c <create_name+0x1c0>
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d006      	beq.n	8008a3c <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8008a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a32:	f043 0303 	orr.w	r3, r3, #3
 8008a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a3a:	e07d      	b.n	8008b38 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d203      	bcs.n	8008a4c <create_name+0x1d0>
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d123      	bne.n	8008a94 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b0b      	cmp	r3, #11
 8008a50:	d106      	bne.n	8008a60 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8008a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a56:	f043 0303 	orr.w	r3, r3, #3
 8008a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a5e:	e06f      	b.n	8008b40 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d005      	beq.n	8008a74 <create_name+0x1f8>
 8008a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a6c:	f043 0303 	orr.w	r3, r3, #3
 8008a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d860      	bhi.n	8008b3e <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	2308      	movs	r3, #8
 8008a82:	623b      	str	r3, [r7, #32]
 8008a84:	230b      	movs	r3, #11
 8008a86:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008a88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a92:	e051      	b.n	8008b38 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a96:	2b7f      	cmp	r3, #127	; 0x7f
 8008a98:	d914      	bls.n	8008ac4 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 fac0 	bl	800a024 <ff_convert>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <create_name+0x23c>
 8008aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab0:	3b80      	subs	r3, #128	; 0x80
 8008ab2:	4a4c      	ldr	r2, [pc, #304]	; (8008be4 <create_name+0x368>)
 8008ab4:	5cd3      	ldrb	r3, [r2, r3]
 8008ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <create_name+0x25e>
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008acc:	4619      	mov	r1, r3
 8008ace:	4846      	ldr	r0, [pc, #280]	; (8008be8 <create_name+0x36c>)
 8008ad0:	f7fe f9ca 	bl	8006e68 <chk_chr>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008ada:	235f      	movs	r3, #95	; 0x5f
 8008adc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae2:	f043 0303 	orr.w	r3, r3, #3
 8008ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aea:	e01b      	b.n	8008b24 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d909      	bls.n	8008b06 <create_name+0x28a>
 8008af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af4:	2b5a      	cmp	r3, #90	; 0x5a
 8008af6:	d806      	bhi.n	8008b06 <create_name+0x28a>
					b |= 2;
 8008af8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b04:	e00e      	b.n	8008b24 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b08:	2b60      	cmp	r3, #96	; 0x60
 8008b0a:	d90b      	bls.n	8008b24 <create_name+0x2a8>
 8008b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b0e:	2b7a      	cmp	r3, #122	; 0x7a
 8008b10:	d808      	bhi.n	8008b24 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8008b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b20:	3b20      	subs	r3, #32
 8008b22:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	1c59      	adds	r1, r3, #1
 8008b2e:	6239      	str	r1, [r7, #32]
 8008b30:	4413      	add	r3, r2
 8008b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008b38:	e763      	b.n	8008a02 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8008b3e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2be5      	cmp	r3, #229	; 0xe5
 8008b4a:	d104      	bne.n	8008b56 <create_name+0x2da>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008b52:	2205      	movs	r2, #5
 8008b54:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d104      	bne.n	8008b66 <create_name+0x2ea>
 8008b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b6a:	f003 030c 	and.w	r3, r3, #12
 8008b6e:	2b0c      	cmp	r3, #12
 8008b70:	d005      	beq.n	8008b7e <create_name+0x302>
 8008b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d105      	bne.n	8008b8a <create_name+0x30e>
		cf |= NS_LFN;
 8008b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b82:	f043 0302 	orr.w	r3, r3, #2
 8008b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d117      	bne.n	8008bc6 <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d105      	bne.n	8008bae <create_name+0x332>
 8008ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ba6:	f043 0310 	orr.w	r3, r3, #16
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008bae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bb2:	f003 030c 	and.w	r3, r3, #12
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d105      	bne.n	8008bc6 <create_name+0x34a>
 8008bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bbe:	f043 0308 	orr.w	r3, r3, #8
 8008bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008bcc:	330b      	adds	r3, #11
 8008bce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008bd2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bd4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	0800db38 	.word	0x0800db38
 8008be4:	0800db98 	.word	0x0800db98
 8008be8:	0800db44 	.word	0x0800db44

08008bec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8008bfc:	d003      	beq.n	8008c06 <follow_path+0x1a>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b5c      	cmp	r3, #92	; 0x5c
 8008c04:	d102      	bne.n	8008c0c <follow_path+0x20>
		path++;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b1f      	cmp	r3, #31
 8008c1a:	d80a      	bhi.n	8008c32 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fe ff96 	bl	8007b50 <dir_sdi>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8008c30:	e045      	b.n	8008cbe <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c32:	463b      	mov	r3, r7
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff fe20 	bl	800887c <create_name>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d136      	bne.n	8008cb4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff fb7c 	bl	8008344 <dir_find>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008c56:	7adb      	ldrb	r3, [r3, #11]
 8008c58:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d128      	bne.n	8008cb8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d123      	bne.n	8008cb8 <follow_path+0xcc>
 8008c70:	2305      	movs	r3, #5
 8008c72:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008c74:	e020      	b.n	8008cb8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11d      	bne.n	8008cbc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c86:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	330b      	adds	r3, #11
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8008c96:	2305      	movs	r3, #5
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e010      	b.n	8008cbe <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff f968 	bl	8007f7a <ld_clust>
 8008caa:	4602      	mov	r2, r0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cb2:	e7be      	b.n	8008c32 <follow_path+0x46>
			if (res != FR_OK) break;
 8008cb4:	bf00      	nop
 8008cb6:	e002      	b.n	8008cbe <follow_path+0xd2>
				break;
 8008cb8:	bf00      	nop
 8008cba:	e000      	b.n	8008cbe <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cbc:	bf00      	nop
		}
	}

	return res;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d031      	beq.n	8008d42 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	e002      	b.n	8008cec <get_ldnumber+0x24>
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b1f      	cmp	r3, #31
 8008cf2:	d903      	bls.n	8008cfc <get_ldnumber+0x34>
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b3a      	cmp	r3, #58	; 0x3a
 8008cfa:	d1f4      	bne.n	8008ce6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b3a      	cmp	r3, #58	; 0x3a
 8008d02:	d11c      	bne.n	8008d3e <get_ldnumber+0x76>
			tp = *path;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	60fa      	str	r2, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	3b30      	subs	r3, #48	; 0x30
 8008d14:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b09      	cmp	r3, #9
 8008d1a:	d80e      	bhi.n	8008d3a <get_ldnumber+0x72>
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d10a      	bne.n	8008d3a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d107      	bne.n	8008d3a <get_ldnumber+0x72>
					vol = (int)i;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	3301      	adds	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	e002      	b.n	8008d44 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d3e:	2300      	movs	r3, #0
 8008d40:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d42:	693b      	ldr	r3, [r7, #16]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
	...

08008d50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fe fa91 	bl	8007296 <move_window>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <check_fs+0x2e>
		return 3;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e04a      	b.n	8008e14 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d84:	3301      	adds	r3, #1
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	b21a      	sxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008d92:	b21b      	sxth	r3, r3
 8008d94:	4313      	orrs	r3, r2
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	4a20      	ldr	r2, [pc, #128]	; (8008e1c <check_fs+0xcc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d001      	beq.n	8008da2 <check_fs+0x52>
		return 2;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e038      	b.n	8008e14 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3336      	adds	r3, #54	; 0x36
 8008da6:	3303      	adds	r3, #3
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	061a      	lsls	r2, r3, #24
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3336      	adds	r3, #54	; 0x36
 8008db0:	3302      	adds	r3, #2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	041b      	lsls	r3, r3, #16
 8008db6:	4313      	orrs	r3, r2
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	3236      	adds	r2, #54	; 0x36
 8008dbc:	3201      	adds	r2, #1
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	0212      	lsls	r2, r2, #8
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dd0:	4a13      	ldr	r2, [pc, #76]	; (8008e20 <check_fs+0xd0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d101      	bne.n	8008dda <check_fs+0x8a>
		return 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e01c      	b.n	8008e14 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3352      	adds	r3, #82	; 0x52
 8008dde:	3303      	adds	r3, #3
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	061a      	lsls	r2, r3, #24
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3352      	adds	r3, #82	; 0x52
 8008de8:	3302      	adds	r3, #2
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	041b      	lsls	r3, r3, #16
 8008dee:	4313      	orrs	r3, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	3252      	adds	r2, #82	; 0x52
 8008df4:	3201      	adds	r2, #1
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	0212      	lsls	r2, r2, #8
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e08:	4a05      	ldr	r2, [pc, #20]	; (8008e20 <check_fs+0xd0>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d101      	bne.n	8008e12 <check_fs+0xc2>
		return 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e000      	b.n	8008e14 <check_fs+0xc4>

	return 1;
 8008e12:	2301      	movs	r3, #1
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	ffffaa55 	.word	0xffffaa55
 8008e20:	00544146 	.word	0x00544146

08008e24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b096      	sub	sp, #88	; 0x58
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e38:	68b8      	ldr	r0, [r7, #8]
 8008e3a:	f7ff ff45 	bl	8008cc8 <get_ldnumber>
 8008e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da01      	bge.n	8008e4a <find_volume+0x26>
 8008e46:	230b      	movs	r3, #11
 8008e48:	e2de      	b.n	8009408 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e4a:	4ab1      	ldr	r2, [pc, #708]	; (8009110 <find_volume+0x2ec>)
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <find_volume+0x3a>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	e2d4      	b.n	8009408 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e62:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01b      	beq.n	8008ea6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fd fefb 	bl	8006c70 <disk_status>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10c      	bne.n	8008ea6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d007      	beq.n	8008ea2 <find_volume+0x7e>
 8008e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8008e9e:	230a      	movs	r3, #10
 8008ea0:	e2b2      	b.n	8009408 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e2b0      	b.n	8009408 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fef0 	bl	8006ca4 <disk_initialize>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e296      	b.n	8009408 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <find_volume+0xcc>
 8008ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008eec:	230a      	movs	r3, #10
 8008eee:	e28b      	b.n	8009408 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8008efc:	461a      	mov	r2, r3
 8008efe:	2102      	movs	r1, #2
 8008f00:	f7fd ff36 	bl	8006d70 <disk_ioctl>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f14:	d305      	bcc.n	8008f22 <find_volume+0xfe>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f20:	d901      	bls.n	8008f26 <find_volume+0x102>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e270      	b.n	8009408 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008f2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f2e:	f7ff ff0f 	bl	8008d50 <check_fs>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d155      	bne.n	8008fec <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008f40:	2300      	movs	r3, #0
 8008f42:	643b      	str	r3, [r7, #64]	; 0x40
 8008f44:	e029      	b.n	8008f9a <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008f50:	4413      	add	r3, r2
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	3304      	adds	r3, #4
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d012      	beq.n	8008f84 <find_volume+0x160>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	330b      	adds	r3, #11
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	061a      	lsls	r2, r3, #24
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	330a      	adds	r3, #10
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f72:	3209      	adds	r2, #9
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	0212      	lsls	r2, r2, #8
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7c:	3208      	adds	r2, #8
 8008f7e:	7812      	ldrb	r2, [r2, #0]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	e000      	b.n	8008f86 <find_volume+0x162>
 8008f84:	2200      	movs	r2, #0
 8008f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008f8e:	440b      	add	r3, r1
 8008f90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	3301      	adds	r3, #1
 8008f98:	643b      	str	r3, [r7, #64]	; 0x40
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d9d2      	bls.n	8008f46 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <find_volume+0x18c>
 8008faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fac:	3b01      	subs	r3, #1
 8008fae:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008fb8:	4413      	add	r3, r2
 8008fba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008fbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <find_volume+0x1ae>
 8008fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fca:	f7ff fec1 	bl	8008d50 <check_fs>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	e000      	b.n	8008fd4 <find_volume+0x1b0>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <find_volume+0x1c8>
 8008fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d9e1      	bls.n	8008fb0 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d101      	bne.n	8008ff8 <find_volume+0x1d4>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e207      	b.n	8009408 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <find_volume+0x1e0>
 8009000:	230d      	movs	r3, #13
 8009002:	e201      	b.n	8009408 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	7b1b      	ldrb	r3, [r3, #12]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	b21a      	sxth	r2, r3
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	7adb      	ldrb	r3, [r3, #11]
 8009010:	b21b      	sxth	r3, r3
 8009012:	4313      	orrs	r3, r2
 8009014:	b21a      	sxth	r2, r3
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800901c:	b21b      	sxth	r3, r3
 800901e:	429a      	cmp	r2, r3
 8009020:	d001      	beq.n	8009026 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8009022:	230d      	movs	r3, #13
 8009024:	e1f0      	b.n	8009408 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	7ddb      	ldrb	r3, [r3, #23]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	b21a      	sxth	r2, r3
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	7d9b      	ldrb	r3, [r3, #22]
 8009032:	b21b      	sxth	r3, r3
 8009034:	4313      	orrs	r3, r2
 8009036:	b21b      	sxth	r3, r3
 8009038:	b29b      	uxth	r3, r3
 800903a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800903c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d112      	bne.n	8009068 <find_volume+0x244>
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009048:	061a      	lsls	r2, r3, #24
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009050:	041b      	lsls	r3, r3, #16
 8009052:	4313      	orrs	r3, r2
 8009054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009056:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800905a:	0212      	lsls	r2, r2, #8
 800905c:	4313      	orrs	r3, r2
 800905e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009060:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009064:	4313      	orrs	r3, r2
 8009066:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800906c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	7c1a      	ldrb	r2, [r3, #16]
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009080:	2b01      	cmp	r3, #1
 8009082:	d006      	beq.n	8009092 <find_volume+0x26e>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800908a:	2b02      	cmp	r3, #2
 800908c:	d001      	beq.n	8009092 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 800908e:	230d      	movs	r3, #13
 8009090:	e1ba      	b.n	8009408 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009098:	461a      	mov	r2, r3
 800909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909c:	fb02 f303 	mul.w	r3, r2, r3
 80090a0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	7b5a      	ldrb	r2, [r3, #13]
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <find_volume+0x2a8>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80090bc:	461a      	mov	r2, r3
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80090c4:	3b01      	subs	r3, #1
 80090c6:	4013      	ands	r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 80090cc:	230d      	movs	r3, #13
 80090ce:	e19b      	b.n	8009408 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	7c9b      	ldrb	r3, [r3, #18]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b21a      	sxth	r2, r3
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	7c5b      	ldrb	r3, [r3, #17]
 80090dc:	b21b      	sxth	r3, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	b21b      	sxth	r3, r3
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80090f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80090f6:	0952      	lsrs	r2, r2, #5
 80090f8:	b292      	uxth	r2, r2
 80090fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80090fe:	fb02 f201 	mul.w	r2, r2, r1
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800910a:	230d      	movs	r3, #13
 800910c:	e17c      	b.n	8009408 <find_volume+0x5e4>
 800910e:	bf00      	nop
 8009110:	20000364 	.word	0x20000364

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	7d1b      	ldrb	r3, [r3, #20]
 8009118:	021b      	lsls	r3, r3, #8
 800911a:	b21a      	sxth	r2, r3
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	7cdb      	ldrb	r3, [r3, #19]
 8009120:	b21b      	sxth	r3, r3
 8009122:	4313      	orrs	r3, r2
 8009124:	b21b      	sxth	r3, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800912a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <find_volume+0x332>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009136:	061a      	lsls	r2, r3, #24
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	4313      	orrs	r3, r2
 8009142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009144:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009148:	0212      	lsls	r2, r2, #8
 800914a:	4313      	orrs	r3, r2
 800914c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800914e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009152:	4313      	orrs	r3, r2
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	7bdb      	ldrb	r3, [r3, #15]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	b21a      	sxth	r2, r3
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	7b9b      	ldrb	r3, [r3, #14]
 8009162:	b21b      	sxth	r3, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	b21b      	sxth	r3, r3
 8009168:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800916a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <find_volume+0x350>
 8009170:	230d      	movs	r3, #13
 8009172:	e149      	b.n	8009408 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009174:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009178:	4413      	add	r3, r2
 800917a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800917c:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8009180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009182:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009186:	0952      	lsrs	r2, r2, #5
 8009188:	b292      	uxth	r2, r2
 800918a:	fbb1 f2f2 	udiv	r2, r1, r2
 800918e:	b292      	uxth	r2, r2
 8009190:	4413      	add	r3, r2
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	429a      	cmp	r2, r3
 800919a:	d201      	bcs.n	80091a0 <find_volume+0x37c>
 800919c:	230d      	movs	r3, #13
 800919e:	e133      	b.n	8009408 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80091a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80091ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <find_volume+0x398>
 80091b8:	230d      	movs	r3, #13
 80091ba:	e125      	b.n	8009408 <find_volume+0x5e4>
	fmt = FS_FAT12;
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d902      	bls.n	80091d2 <find_volume+0x3ae>
 80091cc:	2302      	movs	r3, #2
 80091ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80091d8:	4293      	cmp	r3, r2
 80091da:	d902      	bls.n	80091e2 <find_volume+0x3be>
 80091dc:	2303      	movs	r3, #3
 80091de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	1c9a      	adds	r2, r3, #2
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091f0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80091f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f8:	441a      	add	r2, r3
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8009200:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	441a      	add	r2, r3
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800920c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009210:	2b03      	cmp	r3, #3
 8009212:	d121      	bne.n	8009258 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <find_volume+0x3fe>
 800921e:	230d      	movs	r3, #13
 8009220:	e0f2      	b.n	8009408 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009228:	061a      	lsls	r2, r3, #24
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009230:	041b      	lsls	r3, r3, #16
 8009232:	4313      	orrs	r3, r2
 8009234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009236:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800923a:	0212      	lsls	r2, r2, #8
 800923c:	4313      	orrs	r3, r2
 800923e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009240:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009244:	431a      	orrs	r2, r3
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	647b      	str	r3, [r7, #68]	; 0x44
 8009256:	e025      	b.n	80092a4 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <find_volume+0x442>
 8009262:	230d      	movs	r3, #13
 8009264:	e0d0      	b.n	8009408 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800926c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926e:	441a      	add	r2, r3
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800927a:	2b02      	cmp	r3, #2
 800927c:	d104      	bne.n	8009288 <find_volume+0x464>
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	e00c      	b.n	80092a2 <find_volume+0x47e>
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800928e:	4613      	mov	r3, r2
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	4413      	add	r3, r2
 8009294:	085a      	lsrs	r2, r3, #1
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80092b0:	4619      	mov	r1, r3
 80092b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b4:	440b      	add	r3, r1
 80092b6:	3b01      	subs	r3, #1
 80092b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092ba:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 80092be:	fbb3 f3f1 	udiv	r3, r3, r1
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d201      	bcs.n	80092ca <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 80092c6:	230d      	movs	r3, #13
 80092c8:	e09e      	b.n	8009408 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	f04f 32ff 	mov.w	r2, #4294967295
 80092d0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	2280      	movs	r2, #128	; 0x80
 80092e4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80092e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d177      	bne.n	80093e0 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b21a      	sxth	r2, r3
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009300:	b21b      	sxth	r3, r3
 8009302:	4313      	orrs	r3, r2
 8009304:	b21b      	sxth	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d16a      	bne.n	80093e0 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800930a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930c:	3301      	adds	r3, #1
 800930e:	4619      	mov	r1, r3
 8009310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009312:	f7fd ffc0 	bl	8007296 <move_window>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d161      	bne.n	80093e0 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	b21a      	sxth	r2, r3
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009334:	b21b      	sxth	r3, r3
 8009336:	4313      	orrs	r3, r2
 8009338:	b21b      	sxth	r3, r3
 800933a:	4a35      	ldr	r2, [pc, #212]	; (8009410 <find_volume+0x5ec>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d14f      	bne.n	80093e0 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	78db      	ldrb	r3, [r3, #3]
 8009344:	061a      	lsls	r2, r3, #24
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	789b      	ldrb	r3, [r3, #2]
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	4313      	orrs	r3, r2
 800934e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009350:	7852      	ldrb	r2, [r2, #1]
 8009352:	0212      	lsls	r2, r2, #8
 8009354:	4313      	orrs	r3, r2
 8009356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009358:	7812      	ldrb	r2, [r2, #0]
 800935a:	4313      	orrs	r3, r2
 800935c:	4a2d      	ldr	r2, [pc, #180]	; (8009414 <find_volume+0x5f0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d13e      	bne.n	80093e0 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009368:	061a      	lsls	r2, r3, #24
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	4313      	orrs	r3, r2
 8009374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009376:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800937a:	0212      	lsls	r2, r2, #8
 800937c:	4313      	orrs	r3, r2
 800937e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009380:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8009384:	4313      	orrs	r3, r2
 8009386:	4a24      	ldr	r2, [pc, #144]	; (8009418 <find_volume+0x5f4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d129      	bne.n	80093e0 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8009392:	061a      	lsls	r2, r3, #24
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	4313      	orrs	r3, r2
 800939e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80093a4:	0212      	lsls	r2, r2, #8
 80093a6:	4313      	orrs	r3, r2
 80093a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80093ae:	431a      	orrs	r2, r3
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80093bc:	061a      	lsls	r2, r3, #24
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80093c4:	041b      	lsls	r3, r3, #16
 80093c6:	4313      	orrs	r3, r2
 80093c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80093ce:	0212      	lsls	r2, r2, #8
 80093d0:	4313      	orrs	r3, r2
 80093d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80093d8:	431a      	orrs	r2, r3
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093e6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <find_volume+0x5f8>)
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	3301      	adds	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <find_volume+0x5f8>)
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <find_volume+0x5f8>)
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8009400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009402:	f7fd fed5 	bl	80071b0 <clear_lock>
#endif

	return FR_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3758      	adds	r7, #88	; 0x58
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	ffffaa55 	.word	0xffffaa55
 8009414:	41615252 	.word	0x41615252
 8009418:	61417272 	.word	0x61417272
 800941c:	20000368 	.word	0x20000368

08009420 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d022      	beq.n	8009478 <validate+0x58>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01d      	beq.n	8009478 <validate+0x58>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009442:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009446:	2b00      	cmp	r3, #0
 8009448:	d016      	beq.n	8009478 <validate+0x58>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009450:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800945a:	429a      	cmp	r2, r3
 800945c:	d10c      	bne.n	8009478 <validate+0x58>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009464:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009468:	4618      	mov	r0, r3
 800946a:	f7fd fc01 	bl	8006c70 <disk_status>
 800946e:	4603      	mov	r3, r0
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8009478:	2309      	movs	r3, #9
 800947a:	e000      	b.n	800947e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fc12 	bl	8008cc8 <get_ldnumber>
 80094a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da01      	bge.n	80094b0 <f_mount+0x28>
 80094ac:	230b      	movs	r3, #11
 80094ae:	e02d      	b.n	800950c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094b0:	4a18      	ldr	r2, [pc, #96]	; (8009514 <f_mount+0x8c>)
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80094c0:	69b8      	ldr	r0, [r7, #24]
 80094c2:	f7fd fe75 	bl	80071b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	490d      	ldr	r1, [pc, #52]	; (8009514 <f_mount+0x8c>)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <f_mount+0x6a>
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d001      	beq.n	80094f6 <f_mount+0x6e>
 80094f2:	2300      	movs	r3, #0
 80094f4:	e00a      	b.n	800950c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80094f6:	f107 0108 	add.w	r1, r7, #8
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	2200      	movs	r2, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fc8f 	bl	8008e24 <find_volume>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800950a:	7dfb      	ldrb	r3, [r7, #23]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000364 	.word	0x20000364

08009518 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 800951e:	af00      	add	r7, sp, #0
 8009520:	f107 030c 	add.w	r3, r7, #12
 8009524:	6018      	str	r0, [r3, #0]
 8009526:	f107 0308 	add.w	r3, r7, #8
 800952a:	6019      	str	r1, [r3, #0]
 800952c:	1dfb      	adds	r3, r7, #7
 800952e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <f_open+0x26>
 800953a:	2309      	movs	r3, #9
 800953c:	e1f9      	b.n	8009932 <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 800953e:	f107 030c 	add.w	r3, r7, #12
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800954a:	1dfb      	adds	r3, r7, #7
 800954c:	1dfa      	adds	r2, r7, #7
 800954e:	7812      	ldrb	r2, [r2, #0]
 8009550:	f002 021f 	and.w	r2, r2, #31
 8009554:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009556:	1dfb      	adds	r3, r7, #7
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	f107 0108 	add.w	r1, r7, #8
 8009564:	f107 0320 	add.w	r3, r7, #32
 8009568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fc59 	bl	8008e24 <find_volume>
 8009572:	4603      	mov	r3, r0
 8009574:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009578:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 81d6 	bne.w	800992e <f_open+0x416>
		INIT_BUF(dj);
 8009582:	f107 0320 	add.w	r3, r7, #32
 8009586:	f107 0214 	add.w	r2, r7, #20
 800958a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800958e:	f107 0320 	add.w	r3, r7, #32
 8009592:	4a8b      	ldr	r2, [pc, #556]	; (80097c0 <f_open+0x2a8>)
 8009594:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	f107 0320 	add.w	r3, r7, #32
 80095a2:	4611      	mov	r1, r2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fb21 	bl	8008bec <follow_path>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 80095b0:	f107 0320 	add.w	r3, r7, #32
 80095b4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80095b8:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80095bc:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11a      	bne.n	80095fa <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 80095c4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d103      	bne.n	80095d4 <f_open+0xbc>
				res = FR_INVALID_NAME;
 80095cc:	2306      	movs	r3, #6
 80095ce:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 80095d2:	e012      	b.n	80095fa <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095d4:	1dfb      	adds	r3, r7, #7
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f023 0301 	bic.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bf14      	ite	ne
 80095e0:	2301      	movne	r3, #1
 80095e2:	2300      	moveq	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	461a      	mov	r2, r3
 80095e8:	f107 0320 	add.w	r3, r7, #32
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fc54 	bl	8006e9c <chk_lock>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80095fa:	1dfb      	adds	r3, r7, #7
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	f003 031c 	and.w	r3, r3, #28
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80cc 	beq.w	80097a0 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 8009608:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01f      	beq.n	8009650 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009610:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8009614:	2b04      	cmp	r3, #4
 8009616:	d10e      	bne.n	8009636 <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009618:	f7fd fcac 	bl	8006f74 <enq_lock>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <f_open+0x118>
 8009622:	f107 0320 	add.w	r3, r7, #32
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe ff4c 	bl	80084c4 <dir_register>
 800962c:	4603      	mov	r3, r0
 800962e:	e000      	b.n	8009632 <f_open+0x11a>
 8009630:	2312      	movs	r3, #18
 8009632:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009636:	1dfb      	adds	r3, r7, #7
 8009638:	1dfa      	adds	r2, r7, #7
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	f042 0208 	orr.w	r2, r2, #8
 8009640:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8009642:	f107 0320 	add.w	r3, r7, #32
 8009646:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800964a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800964e:	e014      	b.n	800967a <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009650:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8009654:	330b      	adds	r3, #11
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	f003 0311 	and.w	r3, r3, #17
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <f_open+0x150>
					res = FR_DENIED;
 8009660:	2307      	movs	r3, #7
 8009662:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8009666:	e008      	b.n	800967a <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009668:	1dfb      	adds	r3, r7, #7
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <f_open+0x162>
						res = FR_EXIST;
 8009674:	2308      	movs	r3, #8
 8009676:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800967a:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800967e:	2b00      	cmp	r3, #0
 8009680:	f040 80b1 	bne.w	80097e6 <f_open+0x2ce>
 8009684:	1dfb      	adds	r3, r7, #7
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 80aa 	beq.w	80097e6 <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 8009692:	f7fd fa91 	bl	8006bb8 <get_fattime>
 8009696:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800969a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800969e:	330e      	adds	r3, #14
 80096a0:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 80096a4:	b2d2      	uxtb	r2, r2
 80096a6:	701a      	strb	r2, [r3, #0]
 80096a8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096b6:	330f      	adds	r3, #15
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80096c0:	0c1a      	lsrs	r2, r3, #16
 80096c2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096c6:	3310      	adds	r3, #16
 80096c8:	b2d2      	uxtb	r2, r2
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80096d0:	0e1a      	lsrs	r2, r3, #24
 80096d2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096d6:	3311      	adds	r3, #17
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80096dc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096e0:	330b      	adds	r3, #11
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80096e6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096ea:	331c      	adds	r3, #28
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096f4:	331d      	adds	r3, #29
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80096fe:	331e      	adds	r3, #30
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
 8009704:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8009708:	331f      	adds	r3, #31
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800970e:	f107 0320 	add.w	r3, r7, #32
 8009712:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009716:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fc2d 	bl	8007f7a <ld_clust>
 8009720:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 8009724:	2100      	movs	r1, #0
 8009726:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800972a:	f7fe fc53 	bl	8007fd4 <st_clust>
				dj.fs->wflag = 1;
 800972e:	f107 0320 	add.w	r3, r7, #32
 8009732:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800973c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8009740:	2b00      	cmp	r3, #0
 8009742:	d050      	beq.n	80097e6 <f_open+0x2ce>
					dw = dj.fs->winsect;
 8009744:	f107 0320 	add.w	r3, r7, #32
 8009748:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800974c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8009750:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					res = remove_chain(dj.fs, cl);
 8009754:	f107 0320 	add.w	r3, r7, #32
 8009758:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800975c:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe f8c3 	bl	80078ec <remove_chain>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 800976c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8009770:	2b00      	cmp	r3, #0
 8009772:	d138      	bne.n	80097e6 <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009774:	f107 0320 	add.w	r3, r7, #32
 8009778:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800977c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8009780:	3a01      	subs	r2, #1
 8009782:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8009786:	f107 0320 	add.w	r3, r7, #32
 800978a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800978e:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8009792:	4618      	mov	r0, r3
 8009794:	f7fd fd7f 	bl	8007296 <move_window>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800979e:	e022      	b.n	80097e6 <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80097a0:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d11e      	bne.n	80097e6 <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80097a8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80097ac:	330b      	adds	r3, #11
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 0310 	and.w	r3, r3, #16
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <f_open+0x2ac>
					res = FR_NO_FILE;
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 80097be:	e012      	b.n	80097e6 <f_open+0x2ce>
 80097c0:	20000384 	.word	0x20000384
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80097c4:	1dfb      	adds	r3, r7, #7
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <f_open+0x2ce>
 80097d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80097d4:	330b      	adds	r3, #11
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <f_open+0x2ce>
						res = FR_DENIED;
 80097e0:	2307      	movs	r3, #7
 80097e2:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 80097e6:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d13d      	bne.n	800986a <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80097ee:	1dfb      	adds	r3, r7, #7
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <f_open+0x2ee>
				mode |= FA__WRITTEN;
 80097fa:	1dfb      	adds	r3, r7, #7
 80097fc:	1dfa      	adds	r2, r7, #7
 80097fe:	7812      	ldrb	r2, [r2, #0]
 8009800:	f042 0220 	orr.w	r2, r2, #32
 8009804:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009806:	f107 0320 	add.w	r3, r7, #32
 800980a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800980e:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8009826:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800982a:	1dfb      	adds	r3, r7, #7
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	f023 0301 	bic.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	bf14      	ite	ne
 8009836:	2301      	movne	r3, #1
 8009838:	2300      	moveq	r3, #0
 800983a:	b2db      	uxtb	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	f107 0320 	add.w	r3, r7, #32
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f7fd fbb9 	bl	8006fbc <inc_lock>
 800984a:	4602      	mov	r2, r0
 800984c:	f107 030c 	add.w	r3, r7, #12
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 8009856:	f107 030c 	add.w	r3, r7, #12
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <f_open+0x352>
 8009864:	2302      	movs	r3, #2
 8009866:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800986a:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800986e:	2b00      	cmp	r3, #0
 8009870:	d15d      	bne.n	800992e <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 8009872:	f107 030c 	add.w	r3, r7, #12
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	1dfa      	adds	r2, r7, #7
 800987a:	7812      	ldrb	r2, [r2, #0]
 800987c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 8009880:	f107 030c 	add.w	r3, r7, #12
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800988c:	f107 0320 	add.w	r3, r7, #32
 8009890:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009894:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8009898:	4618      	mov	r0, r3
 800989a:	f7fe fb6e 	bl	8007f7a <ld_clust>
 800989e:	4602      	mov	r2, r0
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80098aa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80098ae:	331f      	adds	r3, #31
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	061a      	lsls	r2, r3, #24
 80098b4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80098b8:	331e      	adds	r3, #30
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	041b      	lsls	r3, r3, #16
 80098be:	4313      	orrs	r3, r2
 80098c0:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80098c4:	321d      	adds	r2, #29
 80098c6:	7812      	ldrb	r2, [r2, #0]
 80098c8:	0212      	lsls	r2, r2, #8
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80098d0:	321c      	adds	r2, #28
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	f107 030c 	add.w	r3, r7, #12
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 80098ec:	f107 030c 	add.w	r3, r7, #12
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80098f8:	f107 030c 	add.w	r3, r7, #12
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009904:	f107 0320 	add.w	r3, r7, #32
 8009908:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800990c:	f107 030c 	add.w	r3, r7, #12
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 8009916:	f107 030c 	add.w	r3, r7, #12
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009920:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009924:	f107 030c 	add.w	r3, r7, #12
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 800992e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 8009932:	4618      	mov	r0, r3
 8009934:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	; 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff fd63 	bl	8009420 <validate>
 800995a:	4603      	mov	r3, r0
 800995c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <f_write+0x2c>
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	e1cc      	b.n	8009d02 <f_write+0x3c6>
	if (fp->err)							/* Check error */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8009978:	e1c3      	b.n	8009d02 <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009988:	2307      	movs	r3, #7
 800998a:	e1ba      	b.n	8009d02 <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	441a      	add	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800999c:	429a      	cmp	r2, r3
 800999e:	f080 8192 	bcs.w	8009cc6 <f_write+0x38a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80099a6:	e18e      	b.n	8009cc6 <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80099b4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80099b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80099bc:	fb02 f201 	mul.w	r2, r2, r1
 80099c0:	1a9b      	subs	r3, r3, r2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f040 8131 	bne.w	8009c2a <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80099d4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80099d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099e4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	4013      	ands	r3, r2
 80099ee:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80099f0:	7dbb      	ldrb	r3, [r7, #22]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d151      	bne.n	8009a9a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10f      	bne.n	8009a20 <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d121      	bne.n	8009a52 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009a14:	2100      	movs	r1, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd ffc2 	bl	80079a0 <create_chain>
 8009a1c:	6278      	str	r0, [r7, #36]	; 0x24
 8009a1e:	e018      	b.n	8009a52 <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009a30:	4619      	mov	r1, r3
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7fe f851 	bl	8007ada <clmt_clust>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24
 8009a3a:	e00a      	b.n	8009a52 <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fd ffa8 	bl	80079a0 <create_chain>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 813b 	beq.w	8009cd0 <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d105      	bne.n	8009a6c <f_write+0x130>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e14a      	b.n	8009d02 <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d105      	bne.n	8009a80 <f_write+0x144>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e140      	b.n	8009d02 <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a84:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <f_write+0x15e>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a96:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01d      	beq.n	8009ae4 <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009aae:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009aba:	2301      	movs	r3, #1
 8009abc:	f7fd f938 	bl	8006d30 <disk_write>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e117      	b.n	8009d02 <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7fd fcab 	bl	800744e <clust2sect>
 8009af8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <f_write+0x1d0>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e0fa      	b.n	8009d02 <f_write+0x3c6>
			sect += csect;
 8009b0c:	7dbb      	ldrb	r3, [r7, #22]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	4413      	add	r3, r2
 8009b12:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b1a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b26:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d058      	beq.n	8009be0 <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009b2e:	7dba      	ldrb	r2, [r7, #22]
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	4413      	add	r3, r2
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009b3a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d908      	bls.n	8009b54 <f_write+0x218>
					cc = fp->fs->csize - csect;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b48:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	7dbb      	ldrb	r3, [r7, #22]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b5a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	69b9      	ldr	r1, [r7, #24]
 8009b64:	f7fd f8e4 	bl	8006d30 <disk_write>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009b76:	2301      	movs	r3, #1
 8009b78:	e0c3      	b.n	8009d02 <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d91f      	bls.n	8009bca <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009b9c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009ba0:	fb02 f303 	mul.w	r3, r2, r3
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	18d1      	adds	r1, r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009bae:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7fd f8fa 	bl	8006dac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009bd0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	623b      	str	r3, [r7, #32]
				continue;
 8009bde:	e05c      	b.n	8009c9a <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d01a      	beq.n	8009c22 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d212      	bcs.n	8009c22 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c02:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	2301      	movs	r3, #1
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	f7fd f870 	bl	8006cf0 <disk_read>
 8009c10:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e06f      	b.n	8009d02 <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c30:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009c34:	4618      	mov	r0, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009c42:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c4a:	fb02 f201 	mul.w	r2, r2, r1
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	1ac3      	subs	r3, r0, r3
 8009c52:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009c54:	6a3a      	ldr	r2, [r7, #32]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d901      	bls.n	8009c60 <f_write+0x324>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009c6c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c74:	fb02 f201 	mul.w	r2, r2, r1
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	69b9      	ldr	r1, [r7, #24]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fd f892 	bl	8006dac <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	441a      	add	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	441a      	add	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f47f ae6d 	bne.w	80099a8 <f_write+0x6c>
 8009cce:	e000      	b.n	8009cd2 <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cd0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d905      	bls.n	8009cee <f_write+0x3b2>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009cf4:	f043 0320 	orr.w	r3, r3, #32
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b086      	sub	sp, #24
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fb84 	bl	8009420 <validate>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 80a8 	bne.w	8009e74 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 80a0 	beq.w	8009e74 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d019      	beq.n	8009d76 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009d48:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009d54:	2301      	movs	r3, #1
 8009d56:	f7fc ffeb 	bl	8006d30 <disk_write>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009d60:	2301      	movs	r3, #1
 8009d62:	e088      	b.n	8009e76 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009d82:	4619      	mov	r1, r3
 8009d84:	4610      	mov	r0, r2
 8009d86:	f7fd fa86 	bl	8007296 <move_window>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d16f      	bne.n	8009e74 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009d9a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	330b      	adds	r3, #11
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	330b      	adds	r3, #11
 8009da6:	f042 0220 	orr.w	r2, r2, #32
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	331c      	adds	r3, #28
 8009db8:	b2d2      	uxtb	r2, r2
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	0a1b      	lsrs	r3, r3, #8
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	331d      	adds	r3, #29
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	701a      	strb	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009dd6:	0c1a      	lsrs	r2, r3, #16
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	331e      	adds	r3, #30
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009de6:	0e1a      	lsrs	r2, r3, #24
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	331f      	adds	r3, #31
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009df6:	4619      	mov	r1, r3
 8009df8:	6938      	ldr	r0, [r7, #16]
 8009dfa:	f7fe f8eb 	bl	8007fd4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009dfe:	f7fc fedb 	bl	8006bb8 <get_fattime>
 8009e02:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	3316      	adds	r3, #22
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3317      	adds	r3, #23
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	0c1a      	lsrs	r2, r3, #16
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	3318      	adds	r3, #24
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	0e1a      	lsrs	r2, r3, #24
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	3319      	adds	r3, #25
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	3312      	adds	r3, #18
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3313      	adds	r3, #19
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009e4c:	f023 0320 	bic.w	r3, r3, #32
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fd fa41 	bl	80072f2 <sync_fs>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff ff3f 	bl	8009d0a <f_sync>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d116      	bne.n	8009ec4 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff fac2 	bl	8009420 <validate>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10e      	bne.n	8009ec4 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fd f93b 	bl	8007128 <dec_lock>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	1d3b      	adds	r3, r7, #4
 8009eda:	6018      	str	r0, [r3, #0]
 8009edc:	463b      	mov	r3, r7
 8009ede:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8009ee0:	1d39      	adds	r1, r7, #4
 8009ee2:	f107 0314 	add.w	r3, r7, #20
 8009ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eea:	2200      	movs	r2, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe ff99 	bl	8008e24 <find_volume>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	if (res == FR_OK) {
 8009ef8:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d12e      	bne.n	8009f5e <f_stat+0x8e>
		INIT_BUF(dj);
 8009f00:	f107 0314 	add.w	r3, r7, #20
 8009f04:	f107 0208 	add.w	r2, r7, #8
 8009f08:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	4a16      	ldr	r2, [pc, #88]	; (8009f6c <f_stat+0x9c>)
 8009f12:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	f107 0314 	add.w	r3, r7, #20
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fe63 	bl	8008bec <follow_path>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
		if (res == FR_OK) {				/* Follow completed */
 8009f2c:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d114      	bne.n	8009f5e <f_stat+0x8e>
			if (dj.dir) {		/* Found an object */
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <f_stat+0x88>
				if (fno) get_fileinfo(&dj, fno);
 8009f40:	463b      	mov	r3, r7
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <f_stat+0x8e>
 8009f48:	463b      	mov	r3, r7
 8009f4a:	f107 0214 	add.w	r2, r7, #20
 8009f4e:	6819      	ldr	r1, [r3, #0]
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fe fbc5 	bl	80086e0 <get_fileinfo>
 8009f56:	e002      	b.n	8009f5e <f_stat+0x8e>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8009f58:	2306      	movs	r3, #6
 8009f5a:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8009f5e:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000384 	.word	0x20000384

08009f70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009f86:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009f88:	7a5b      	ldrb	r3, [r3, #9]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d831      	bhi.n	8009ff4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f90:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009f92:	7a5b      	ldrb	r3, [r3, #9]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	4b19      	ldr	r3, [pc, #100]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009f9e:	4b18      	ldr	r3, [pc, #96]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fa0:	7a5b      	ldrb	r3, [r3, #9]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4a16      	ldr	r2, [pc, #88]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009fae:	4b14      	ldr	r3, [pc, #80]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fb0:	7a5b      	ldrb	r3, [r3, #9]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4b12      	ldr	r3, [pc, #72]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fb8:	4413      	add	r3, r2
 8009fba:	79fa      	ldrb	r2, [r7, #7]
 8009fbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fbe:	4b10      	ldr	r3, [pc, #64]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fc0:	7a5b      	ldrb	r3, [r3, #9]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	b2d1      	uxtb	r1, r2
 8009fc8:	4a0d      	ldr	r2, [pc, #52]	; (800a000 <FATFS_LinkDriverEx+0x90>)
 8009fca:	7251      	strb	r1, [r2, #9]
 8009fcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fce:	7dbb      	ldrb	r3, [r7, #22]
 8009fd0:	3330      	adds	r3, #48	; 0x30
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	223a      	movs	r2, #58	; 0x3a
 8009fde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	3302      	adds	r3, #2
 8009fe4:	222f      	movs	r2, #47	; 0x2f
 8009fe6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3303      	adds	r3, #3
 8009fec:	2200      	movs	r2, #0
 8009fee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr
 800a000:	20000584 	.word	0x20000584

0800a004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a00e:	2200      	movs	r2, #0
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ffac 	bl	8009f70 <FATFS_LinkDriverEx>
 800a018:	4603      	mov	r3, r0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	2b7f      	cmp	r3, #127	; 0x7f
 800a034:	d802      	bhi.n	800a03c <ff_convert+0x18>
		c = chr;
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	81fb      	strh	r3, [r7, #14]
 800a03a:	e025      	b.n	800a088 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	2bff      	cmp	r3, #255	; 0xff
 800a046:	d805      	bhi.n	800a054 <ff_convert+0x30>
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	3b80      	subs	r3, #128	; 0x80
 800a04c:	4a11      	ldr	r2, [pc, #68]	; (800a094 <ff_convert+0x70>)
 800a04e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a052:	e000      	b.n	800a056 <ff_convert+0x32>
 800a054:	2300      	movs	r3, #0
 800a056:	81fb      	strh	r3, [r7, #14]
 800a058:	e016      	b.n	800a088 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a05a:	2300      	movs	r3, #0
 800a05c:	81fb      	strh	r3, [r7, #14]
 800a05e:	e009      	b.n	800a074 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a060:	89fb      	ldrh	r3, [r7, #14]
 800a062:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <ff_convert+0x70>)
 800a064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a068:	88fa      	ldrh	r2, [r7, #6]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d006      	beq.n	800a07c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a06e:	89fb      	ldrh	r3, [r7, #14]
 800a070:	3301      	adds	r3, #1
 800a072:	81fb      	strh	r3, [r7, #14]
 800a074:	89fb      	ldrh	r3, [r7, #14]
 800a076:	2b7f      	cmp	r3, #127	; 0x7f
 800a078:	d9f2      	bls.n	800a060 <ff_convert+0x3c>
 800a07a:	e000      	b.n	800a07e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a07c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a07e:	89fb      	ldrh	r3, [r7, #14]
 800a080:	3380      	adds	r3, #128	; 0x80
 800a082:	b29b      	uxth	r3, r3
 800a084:	b2db      	uxtb	r3, r3
 800a086:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a088:	89fb      	ldrh	r3, [r7, #14]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr
 800a094:	0800dc28 	.word	0x0800dc28

0800a098 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e002      	b.n	800a0ae <ff_wtoupper+0x16>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	4a0f      	ldr	r2, [pc, #60]	; (800a0ec <ff_wtoupper+0x54>)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d006      	beq.n	800a0c8 <ff_wtoupper+0x30>
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	; (800a0ec <ff_wtoupper+0x54>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d1ef      	bne.n	800a0a8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a0c8:	4a08      	ldr	r2, [pc, #32]	; (800a0ec <ff_wtoupper+0x54>)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <ff_wtoupper+0x46>
 800a0d4:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <ff_wtoupper+0x58>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0dc:	e000      	b.n	800a0e0 <ff_wtoupper+0x48>
 800a0de:	88fb      	ldrh	r3, [r7, #6]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	0800dd28 	.word	0x0800dd28
 800a0f0:	0800df08 	.word	0x0800df08

0800a0f4 <__errno>:
 800a0f4:	4b01      	ldr	r3, [pc, #4]	; (800a0fc <__errno+0x8>)
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	200000c8 	.word	0x200000c8

0800a100 <__libc_init_array>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	2600      	movs	r6, #0
 800a104:	4d0c      	ldr	r5, [pc, #48]	; (800a138 <__libc_init_array+0x38>)
 800a106:	4c0d      	ldr	r4, [pc, #52]	; (800a13c <__libc_init_array+0x3c>)
 800a108:	1b64      	subs	r4, r4, r5
 800a10a:	10a4      	asrs	r4, r4, #2
 800a10c:	42a6      	cmp	r6, r4
 800a10e:	d109      	bne.n	800a124 <__libc_init_array+0x24>
 800a110:	f003 fa08 	bl	800d524 <_init>
 800a114:	2600      	movs	r6, #0
 800a116:	4d0a      	ldr	r5, [pc, #40]	; (800a140 <__libc_init_array+0x40>)
 800a118:	4c0a      	ldr	r4, [pc, #40]	; (800a144 <__libc_init_array+0x44>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	42a6      	cmp	r6, r4
 800a120:	d105      	bne.n	800a12e <__libc_init_array+0x2e>
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	f855 3b04 	ldr.w	r3, [r5], #4
 800a128:	4798      	blx	r3
 800a12a:	3601      	adds	r6, #1
 800a12c:	e7ee      	b.n	800a10c <__libc_init_array+0xc>
 800a12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a132:	4798      	blx	r3
 800a134:	3601      	adds	r6, #1
 800a136:	e7f2      	b.n	800a11e <__libc_init_array+0x1e>
 800a138:	0800e540 	.word	0x0800e540
 800a13c:	0800e540 	.word	0x0800e540
 800a140:	0800e540 	.word	0x0800e540
 800a144:	0800e544 	.word	0x0800e544

0800a148 <memset>:
 800a148:	4603      	mov	r3, r0
 800a14a:	4402      	add	r2, r0
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d100      	bne.n	800a152 <memset+0xa>
 800a150:	4770      	bx	lr
 800a152:	f803 1b01 	strb.w	r1, [r3], #1
 800a156:	e7f9      	b.n	800a14c <memset+0x4>

0800a158 <__cvt>:
 800a158:	2b00      	cmp	r3, #0
 800a15a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15e:	461f      	mov	r7, r3
 800a160:	bfbb      	ittet	lt
 800a162:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a166:	461f      	movlt	r7, r3
 800a168:	2300      	movge	r3, #0
 800a16a:	232d      	movlt	r3, #45	; 0x2d
 800a16c:	b088      	sub	sp, #32
 800a16e:	4614      	mov	r4, r2
 800a170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a172:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a174:	7013      	strb	r3, [r2, #0]
 800a176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a178:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a17c:	f023 0820 	bic.w	r8, r3, #32
 800a180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a184:	d005      	beq.n	800a192 <__cvt+0x3a>
 800a186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a18a:	d100      	bne.n	800a18e <__cvt+0x36>
 800a18c:	3501      	adds	r5, #1
 800a18e:	2302      	movs	r3, #2
 800a190:	e000      	b.n	800a194 <__cvt+0x3c>
 800a192:	2303      	movs	r3, #3
 800a194:	aa07      	add	r2, sp, #28
 800a196:	9204      	str	r2, [sp, #16]
 800a198:	aa06      	add	r2, sp, #24
 800a19a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a19e:	e9cd 3500 	strd	r3, r5, [sp]
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	f000 fcf7 	bl	800ab98 <_dtoa_r>
 800a1aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	d102      	bne.n	800a1b8 <__cvt+0x60>
 800a1b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b4:	07db      	lsls	r3, r3, #31
 800a1b6:	d522      	bpl.n	800a1fe <__cvt+0xa6>
 800a1b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1bc:	eb06 0905 	add.w	r9, r6, r5
 800a1c0:	d110      	bne.n	800a1e4 <__cvt+0x8c>
 800a1c2:	7833      	ldrb	r3, [r6, #0]
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d10a      	bne.n	800a1de <__cvt+0x86>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fbea 	bl	80009a8 <__aeabi_dcmpeq>
 800a1d4:	b918      	cbnz	r0, 800a1de <__cvt+0x86>
 800a1d6:	f1c5 0501 	rsb	r5, r5, #1
 800a1da:	f8ca 5000 	str.w	r5, [sl]
 800a1de:	f8da 3000 	ldr.w	r3, [sl]
 800a1e2:	4499      	add	r9, r3
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fbdc 	bl	80009a8 <__aeabi_dcmpeq>
 800a1f0:	b108      	cbz	r0, 800a1f6 <__cvt+0x9e>
 800a1f2:	f8cd 901c 	str.w	r9, [sp, #28]
 800a1f6:	2230      	movs	r2, #48	; 0x30
 800a1f8:	9b07      	ldr	r3, [sp, #28]
 800a1fa:	454b      	cmp	r3, r9
 800a1fc:	d307      	bcc.n	800a20e <__cvt+0xb6>
 800a1fe:	4630      	mov	r0, r6
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a204:	1b9b      	subs	r3, r3, r6
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	b008      	add	sp, #32
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	1c59      	adds	r1, r3, #1
 800a210:	9107      	str	r1, [sp, #28]
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e7f0      	b.n	800a1f8 <__cvt+0xa0>

0800a216 <__exponent>:
 800a216:	4603      	mov	r3, r0
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	2900      	cmp	r1, #0
 800a21c:	f803 2b02 	strb.w	r2, [r3], #2
 800a220:	bfb6      	itet	lt
 800a222:	222d      	movlt	r2, #45	; 0x2d
 800a224:	222b      	movge	r2, #43	; 0x2b
 800a226:	4249      	neglt	r1, r1
 800a228:	2909      	cmp	r1, #9
 800a22a:	7042      	strb	r2, [r0, #1]
 800a22c:	dd2b      	ble.n	800a286 <__exponent+0x70>
 800a22e:	f10d 0407 	add.w	r4, sp, #7
 800a232:	46a4      	mov	ip, r4
 800a234:	270a      	movs	r7, #10
 800a236:	fb91 f6f7 	sdiv	r6, r1, r7
 800a23a:	460a      	mov	r2, r1
 800a23c:	46a6      	mov	lr, r4
 800a23e:	fb07 1516 	mls	r5, r7, r6, r1
 800a242:	2a63      	cmp	r2, #99	; 0x63
 800a244:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a248:	4631      	mov	r1, r6
 800a24a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a24e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a252:	dcf0      	bgt.n	800a236 <__exponent+0x20>
 800a254:	3130      	adds	r1, #48	; 0x30
 800a256:	f1ae 0502 	sub.w	r5, lr, #2
 800a25a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a25e:	4629      	mov	r1, r5
 800a260:	1c44      	adds	r4, r0, #1
 800a262:	4561      	cmp	r1, ip
 800a264:	d30a      	bcc.n	800a27c <__exponent+0x66>
 800a266:	f10d 0209 	add.w	r2, sp, #9
 800a26a:	eba2 020e 	sub.w	r2, r2, lr
 800a26e:	4565      	cmp	r5, ip
 800a270:	bf88      	it	hi
 800a272:	2200      	movhi	r2, #0
 800a274:	4413      	add	r3, r2
 800a276:	1a18      	subs	r0, r3, r0
 800a278:	b003      	add	sp, #12
 800a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a27c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a280:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a284:	e7ed      	b.n	800a262 <__exponent+0x4c>
 800a286:	2330      	movs	r3, #48	; 0x30
 800a288:	3130      	adds	r1, #48	; 0x30
 800a28a:	7083      	strb	r3, [r0, #2]
 800a28c:	70c1      	strb	r1, [r0, #3]
 800a28e:	1d03      	adds	r3, r0, #4
 800a290:	e7f1      	b.n	800a276 <__exponent+0x60>
	...

0800a294 <_printf_float>:
 800a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	b091      	sub	sp, #68	; 0x44
 800a29a:	460c      	mov	r4, r1
 800a29c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	461f      	mov	r7, r3
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	f001 fa65 	bl	800b774 <_localeconv_r>
 800a2aa:	6803      	ldr	r3, [r0, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b0:	f7f5 ff4e 	bl	8000150 <strlen>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2bc:	900a      	str	r0, [sp, #40]	; 0x28
 800a2be:	3307      	adds	r3, #7
 800a2c0:	f023 0307 	bic.w	r3, r3, #7
 800a2c4:	f103 0208 	add.w	r2, r3, #8
 800a2c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a2cc:	f8d4 b000 	ldr.w	fp, [r4]
 800a2d0:	f8c8 2000 	str.w	r2, [r8]
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a2e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	4b9c      	ldr	r3, [pc, #624]	; (800a560 <_printf_float+0x2cc>)
 800a2ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2f0:	f7f6 fb8c 	bl	8000a0c <__aeabi_dcmpun>
 800a2f4:	bb70      	cbnz	r0, 800a354 <_printf_float+0xc0>
 800a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4b98      	ldr	r3, [pc, #608]	; (800a560 <_printf_float+0x2cc>)
 800a2fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a300:	f7f6 fb66 	bl	80009d0 <__aeabi_dcmple>
 800a304:	bb30      	cbnz	r0, 800a354 <_printf_float+0xc0>
 800a306:	2200      	movs	r2, #0
 800a308:	2300      	movs	r3, #0
 800a30a:	4640      	mov	r0, r8
 800a30c:	4651      	mov	r1, sl
 800a30e:	f7f6 fb55 	bl	80009bc <__aeabi_dcmplt>
 800a312:	b110      	cbz	r0, 800a31a <_printf_float+0x86>
 800a314:	232d      	movs	r3, #45	; 0x2d
 800a316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a31a:	4b92      	ldr	r3, [pc, #584]	; (800a564 <_printf_float+0x2d0>)
 800a31c:	4892      	ldr	r0, [pc, #584]	; (800a568 <_printf_float+0x2d4>)
 800a31e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a322:	bf94      	ite	ls
 800a324:	4698      	movls	r8, r3
 800a326:	4680      	movhi	r8, r0
 800a328:	2303      	movs	r3, #3
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	f02b 0304 	bic.w	r3, fp, #4
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	4633      	mov	r3, r6
 800a338:	4621      	mov	r1, r4
 800a33a:	4628      	mov	r0, r5
 800a33c:	9700      	str	r7, [sp, #0]
 800a33e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a340:	f000 f9d4 	bl	800a6ec <_printf_common>
 800a344:	3001      	adds	r0, #1
 800a346:	f040 8090 	bne.w	800a46a <_printf_float+0x1d6>
 800a34a:	f04f 30ff 	mov.w	r0, #4294967295
 800a34e:	b011      	add	sp, #68	; 0x44
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	4642      	mov	r2, r8
 800a356:	4653      	mov	r3, sl
 800a358:	4640      	mov	r0, r8
 800a35a:	4651      	mov	r1, sl
 800a35c:	f7f6 fb56 	bl	8000a0c <__aeabi_dcmpun>
 800a360:	b148      	cbz	r0, 800a376 <_printf_float+0xe2>
 800a362:	f1ba 0f00 	cmp.w	sl, #0
 800a366:	bfb8      	it	lt
 800a368:	232d      	movlt	r3, #45	; 0x2d
 800a36a:	4880      	ldr	r0, [pc, #512]	; (800a56c <_printf_float+0x2d8>)
 800a36c:	bfb8      	it	lt
 800a36e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a372:	4b7f      	ldr	r3, [pc, #508]	; (800a570 <_printf_float+0x2dc>)
 800a374:	e7d3      	b.n	800a31e <_printf_float+0x8a>
 800a376:	6863      	ldr	r3, [r4, #4]
 800a378:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	d142      	bne.n	800a406 <_printf_float+0x172>
 800a380:	2306      	movs	r3, #6
 800a382:	6063      	str	r3, [r4, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	9206      	str	r2, [sp, #24]
 800a388:	aa0e      	add	r2, sp, #56	; 0x38
 800a38a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a38e:	aa0d      	add	r2, sp, #52	; 0x34
 800a390:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a394:	9203      	str	r2, [sp, #12]
 800a396:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a39a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	4642      	mov	r2, r8
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	4653      	mov	r3, sl
 800a3aa:	910b      	str	r1, [sp, #44]	; 0x2c
 800a3ac:	f7ff fed4 	bl	800a158 <__cvt>
 800a3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	2947      	cmp	r1, #71	; 0x47
 800a3b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a3b8:	d108      	bne.n	800a3cc <_printf_float+0x138>
 800a3ba:	1cc8      	adds	r0, r1, #3
 800a3bc:	db02      	blt.n	800a3c4 <_printf_float+0x130>
 800a3be:	6863      	ldr	r3, [r4, #4]
 800a3c0:	4299      	cmp	r1, r3
 800a3c2:	dd40      	ble.n	800a446 <_printf_float+0x1b2>
 800a3c4:	f1a9 0902 	sub.w	r9, r9, #2
 800a3c8:	fa5f f989 	uxtb.w	r9, r9
 800a3cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a3d0:	d81f      	bhi.n	800a412 <_printf_float+0x17e>
 800a3d2:	464a      	mov	r2, r9
 800a3d4:	3901      	subs	r1, #1
 800a3d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3da:	910d      	str	r1, [sp, #52]	; 0x34
 800a3dc:	f7ff ff1b 	bl	800a216 <__exponent>
 800a3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3e2:	4682      	mov	sl, r0
 800a3e4:	1813      	adds	r3, r2, r0
 800a3e6:	2a01      	cmp	r2, #1
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	dc02      	bgt.n	800a3f2 <_printf_float+0x15e>
 800a3ec:	6822      	ldr	r2, [r4, #0]
 800a3ee:	07d2      	lsls	r2, r2, #31
 800a3f0:	d501      	bpl.n	800a3f6 <_printf_float+0x162>
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	6123      	str	r3, [r4, #16]
 800a3f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d09b      	beq.n	800a336 <_printf_float+0xa2>
 800a3fe:	232d      	movs	r3, #45	; 0x2d
 800a400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a404:	e797      	b.n	800a336 <_printf_float+0xa2>
 800a406:	2947      	cmp	r1, #71	; 0x47
 800a408:	d1bc      	bne.n	800a384 <_printf_float+0xf0>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1ba      	bne.n	800a384 <_printf_float+0xf0>
 800a40e:	2301      	movs	r3, #1
 800a410:	e7b7      	b.n	800a382 <_printf_float+0xee>
 800a412:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a416:	d118      	bne.n	800a44a <_printf_float+0x1b6>
 800a418:	2900      	cmp	r1, #0
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	dd0b      	ble.n	800a436 <_printf_float+0x1a2>
 800a41e:	6121      	str	r1, [r4, #16]
 800a420:	b913      	cbnz	r3, 800a428 <_printf_float+0x194>
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	07d0      	lsls	r0, r2, #31
 800a426:	d502      	bpl.n	800a42e <_printf_float+0x19a>
 800a428:	3301      	adds	r3, #1
 800a42a:	440b      	add	r3, r1
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	f04f 0a00 	mov.w	sl, #0
 800a432:	65a1      	str	r1, [r4, #88]	; 0x58
 800a434:	e7df      	b.n	800a3f6 <_printf_float+0x162>
 800a436:	b913      	cbnz	r3, 800a43e <_printf_float+0x1aa>
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	07d2      	lsls	r2, r2, #31
 800a43c:	d501      	bpl.n	800a442 <_printf_float+0x1ae>
 800a43e:	3302      	adds	r3, #2
 800a440:	e7f4      	b.n	800a42c <_printf_float+0x198>
 800a442:	2301      	movs	r3, #1
 800a444:	e7f2      	b.n	800a42c <_printf_float+0x198>
 800a446:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a44a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a44c:	4299      	cmp	r1, r3
 800a44e:	db05      	blt.n	800a45c <_printf_float+0x1c8>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	6121      	str	r1, [r4, #16]
 800a454:	07d8      	lsls	r0, r3, #31
 800a456:	d5ea      	bpl.n	800a42e <_printf_float+0x19a>
 800a458:	1c4b      	adds	r3, r1, #1
 800a45a:	e7e7      	b.n	800a42c <_printf_float+0x198>
 800a45c:	2900      	cmp	r1, #0
 800a45e:	bfcc      	ite	gt
 800a460:	2201      	movgt	r2, #1
 800a462:	f1c1 0202 	rsble	r2, r1, #2
 800a466:	4413      	add	r3, r2
 800a468:	e7e0      	b.n	800a42c <_printf_float+0x198>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	055a      	lsls	r2, r3, #21
 800a46e:	d407      	bmi.n	800a480 <_printf_float+0x1ec>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	4642      	mov	r2, r8
 800a474:	4631      	mov	r1, r6
 800a476:	4628      	mov	r0, r5
 800a478:	47b8      	blx	r7
 800a47a:	3001      	adds	r0, #1
 800a47c:	d12b      	bne.n	800a4d6 <_printf_float+0x242>
 800a47e:	e764      	b.n	800a34a <_printf_float+0xb6>
 800a480:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a484:	f240 80dd 	bls.w	800a642 <_printf_float+0x3ae>
 800a488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	f7f6 fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 800a494:	2800      	cmp	r0, #0
 800a496:	d033      	beq.n	800a500 <_printf_float+0x26c>
 800a498:	2301      	movs	r3, #1
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	4a35      	ldr	r2, [pc, #212]	; (800a574 <_printf_float+0x2e0>)
 800a4a0:	47b8      	blx	r7
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	f43f af51 	beq.w	800a34a <_printf_float+0xb6>
 800a4a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	db02      	blt.n	800a4b6 <_printf_float+0x222>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	07d8      	lsls	r0, r3, #31
 800a4b4:	d50f      	bpl.n	800a4d6 <_printf_float+0x242>
 800a4b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f af42 	beq.w	800a34a <_printf_float+0xb6>
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	f104 091a 	add.w	r9, r4, #26
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	4543      	cmp	r3, r8
 800a4d4:	dc09      	bgt.n	800a4ea <_printf_float+0x256>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	079b      	lsls	r3, r3, #30
 800a4da:	f100 8102 	bmi.w	800a6e2 <_printf_float+0x44e>
 800a4de:	68e0      	ldr	r0, [r4, #12]
 800a4e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4e2:	4298      	cmp	r0, r3
 800a4e4:	bfb8      	it	lt
 800a4e6:	4618      	movlt	r0, r3
 800a4e8:	e731      	b.n	800a34e <_printf_float+0xba>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	464a      	mov	r2, r9
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	47b8      	blx	r7
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	f43f af28 	beq.w	800a34a <_printf_float+0xb6>
 800a4fa:	f108 0801 	add.w	r8, r8, #1
 800a4fe:	e7e6      	b.n	800a4ce <_printf_float+0x23a>
 800a500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a502:	2b00      	cmp	r3, #0
 800a504:	dc38      	bgt.n	800a578 <_printf_float+0x2e4>
 800a506:	2301      	movs	r3, #1
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	4a19      	ldr	r2, [pc, #100]	; (800a574 <_printf_float+0x2e0>)
 800a50e:	47b8      	blx	r7
 800a510:	3001      	adds	r0, #1
 800a512:	f43f af1a 	beq.w	800a34a <_printf_float+0xb6>
 800a516:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a51a:	4313      	orrs	r3, r2
 800a51c:	d102      	bne.n	800a524 <_printf_float+0x290>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	07d9      	lsls	r1, r3, #31
 800a522:	d5d8      	bpl.n	800a4d6 <_printf_float+0x242>
 800a524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a528:	4631      	mov	r1, r6
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b8      	blx	r7
 800a52e:	3001      	adds	r0, #1
 800a530:	f43f af0b 	beq.w	800a34a <_printf_float+0xb6>
 800a534:	f04f 0900 	mov.w	r9, #0
 800a538:	f104 0a1a 	add.w	sl, r4, #26
 800a53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53e:	425b      	negs	r3, r3
 800a540:	454b      	cmp	r3, r9
 800a542:	dc01      	bgt.n	800a548 <_printf_float+0x2b4>
 800a544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a546:	e794      	b.n	800a472 <_printf_float+0x1de>
 800a548:	2301      	movs	r3, #1
 800a54a:	4652      	mov	r2, sl
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f aef9 	beq.w	800a34a <_printf_float+0xb6>
 800a558:	f109 0901 	add.w	r9, r9, #1
 800a55c:	e7ee      	b.n	800a53c <_printf_float+0x2a8>
 800a55e:	bf00      	nop
 800a560:	7fefffff 	.word	0x7fefffff
 800a564:	0800e0ec 	.word	0x0800e0ec
 800a568:	0800e0f0 	.word	0x0800e0f0
 800a56c:	0800e0f8 	.word	0x0800e0f8
 800a570:	0800e0f4 	.word	0x0800e0f4
 800a574:	0800e0fc 	.word	0x0800e0fc
 800a578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a57a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a57c:	429a      	cmp	r2, r3
 800a57e:	bfa8      	it	ge
 800a580:	461a      	movge	r2, r3
 800a582:	2a00      	cmp	r2, #0
 800a584:	4691      	mov	r9, r2
 800a586:	dc37      	bgt.n	800a5f8 <_printf_float+0x364>
 800a588:	f04f 0b00 	mov.w	fp, #0
 800a58c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a590:	f104 021a 	add.w	r2, r4, #26
 800a594:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a598:	ebaa 0309 	sub.w	r3, sl, r9
 800a59c:	455b      	cmp	r3, fp
 800a59e:	dc33      	bgt.n	800a608 <_printf_float+0x374>
 800a5a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	db3b      	blt.n	800a620 <_printf_float+0x38c>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	07da      	lsls	r2, r3, #31
 800a5ac:	d438      	bmi.n	800a620 <_printf_float+0x38c>
 800a5ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5b2:	eba2 030a 	sub.w	r3, r2, sl
 800a5b6:	eba2 0901 	sub.w	r9, r2, r1
 800a5ba:	4599      	cmp	r9, r3
 800a5bc:	bfa8      	it	ge
 800a5be:	4699      	movge	r9, r3
 800a5c0:	f1b9 0f00 	cmp.w	r9, #0
 800a5c4:	dc34      	bgt.n	800a630 <_printf_float+0x39c>
 800a5c6:	f04f 0800 	mov.w	r8, #0
 800a5ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5ce:	f104 0a1a 	add.w	sl, r4, #26
 800a5d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a5d6:	1a9b      	subs	r3, r3, r2
 800a5d8:	eba3 0309 	sub.w	r3, r3, r9
 800a5dc:	4543      	cmp	r3, r8
 800a5de:	f77f af7a 	ble.w	800a4d6 <_printf_float+0x242>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	4631      	mov	r1, r6
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	47b8      	blx	r7
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	f43f aeac 	beq.w	800a34a <_printf_float+0xb6>
 800a5f2:	f108 0801 	add.w	r8, r8, #1
 800a5f6:	e7ec      	b.n	800a5d2 <_printf_float+0x33e>
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	d1c0      	bne.n	800a588 <_printf_float+0x2f4>
 800a606:	e6a0      	b.n	800a34a <_printf_float+0xb6>
 800a608:	2301      	movs	r3, #1
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f ae99 	beq.w	800a34a <_printf_float+0xb6>
 800a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a61a:	f10b 0b01 	add.w	fp, fp, #1
 800a61e:	e7b9      	b.n	800a594 <_printf_float+0x300>
 800a620:	4631      	mov	r1, r6
 800a622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a626:	4628      	mov	r0, r5
 800a628:	47b8      	blx	r7
 800a62a:	3001      	adds	r0, #1
 800a62c:	d1bf      	bne.n	800a5ae <_printf_float+0x31a>
 800a62e:	e68c      	b.n	800a34a <_printf_float+0xb6>
 800a630:	464b      	mov	r3, r9
 800a632:	4631      	mov	r1, r6
 800a634:	4628      	mov	r0, r5
 800a636:	eb08 020a 	add.w	r2, r8, sl
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	d1c2      	bne.n	800a5c6 <_printf_float+0x332>
 800a640:	e683      	b.n	800a34a <_printf_float+0xb6>
 800a642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a644:	2a01      	cmp	r2, #1
 800a646:	dc01      	bgt.n	800a64c <_printf_float+0x3b8>
 800a648:	07db      	lsls	r3, r3, #31
 800a64a:	d537      	bpl.n	800a6bc <_printf_float+0x428>
 800a64c:	2301      	movs	r3, #1
 800a64e:	4642      	mov	r2, r8
 800a650:	4631      	mov	r1, r6
 800a652:	4628      	mov	r0, r5
 800a654:	47b8      	blx	r7
 800a656:	3001      	adds	r0, #1
 800a658:	f43f ae77 	beq.w	800a34a <_printf_float+0xb6>
 800a65c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	47b8      	blx	r7
 800a666:	3001      	adds	r0, #1
 800a668:	f43f ae6f 	beq.w	800a34a <_printf_float+0xb6>
 800a66c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a670:	2200      	movs	r2, #0
 800a672:	2300      	movs	r3, #0
 800a674:	f7f6 f998 	bl	80009a8 <__aeabi_dcmpeq>
 800a678:	b9d8      	cbnz	r0, 800a6b2 <_printf_float+0x41e>
 800a67a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a67c:	f108 0201 	add.w	r2, r8, #1
 800a680:	3b01      	subs	r3, #1
 800a682:	4631      	mov	r1, r6
 800a684:	4628      	mov	r0, r5
 800a686:	47b8      	blx	r7
 800a688:	3001      	adds	r0, #1
 800a68a:	d10e      	bne.n	800a6aa <_printf_float+0x416>
 800a68c:	e65d      	b.n	800a34a <_printf_float+0xb6>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae56 	beq.w	800a34a <_printf_float+0xb6>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	4543      	cmp	r3, r8
 800a6a8:	dcf1      	bgt.n	800a68e <_printf_float+0x3fa>
 800a6aa:	4653      	mov	r3, sl
 800a6ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6b0:	e6e0      	b.n	800a474 <_printf_float+0x1e0>
 800a6b2:	f04f 0800 	mov.w	r8, #0
 800a6b6:	f104 091a 	add.w	r9, r4, #26
 800a6ba:	e7f2      	b.n	800a6a2 <_printf_float+0x40e>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4642      	mov	r2, r8
 800a6c0:	e7df      	b.n	800a682 <_printf_float+0x3ee>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	464a      	mov	r2, r9
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	47b8      	blx	r7
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	f43f ae3c 	beq.w	800a34a <_printf_float+0xb6>
 800a6d2:	f108 0801 	add.w	r8, r8, #1
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6da:	1a5b      	subs	r3, r3, r1
 800a6dc:	4543      	cmp	r3, r8
 800a6de:	dcf0      	bgt.n	800a6c2 <_printf_float+0x42e>
 800a6e0:	e6fd      	b.n	800a4de <_printf_float+0x24a>
 800a6e2:	f04f 0800 	mov.w	r8, #0
 800a6e6:	f104 0919 	add.w	r9, r4, #25
 800a6ea:	e7f4      	b.n	800a6d6 <_printf_float+0x442>

0800a6ec <_printf_common>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	4699      	mov	r9, r3
 800a6f4:	688a      	ldr	r2, [r1, #8]
 800a6f6:	690b      	ldr	r3, [r1, #16]
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	bfb8      	it	lt
 800a6fe:	4613      	movlt	r3, r2
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a706:	460c      	mov	r4, r1
 800a708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a70c:	b10a      	cbz	r2, 800a712 <_printf_common+0x26>
 800a70e:	3301      	adds	r3, #1
 800a710:	6033      	str	r3, [r6, #0]
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	0699      	lsls	r1, r3, #26
 800a716:	bf42      	ittt	mi
 800a718:	6833      	ldrmi	r3, [r6, #0]
 800a71a:	3302      	addmi	r3, #2
 800a71c:	6033      	strmi	r3, [r6, #0]
 800a71e:	6825      	ldr	r5, [r4, #0]
 800a720:	f015 0506 	ands.w	r5, r5, #6
 800a724:	d106      	bne.n	800a734 <_printf_common+0x48>
 800a726:	f104 0a19 	add.w	sl, r4, #25
 800a72a:	68e3      	ldr	r3, [r4, #12]
 800a72c:	6832      	ldr	r2, [r6, #0]
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	42ab      	cmp	r3, r5
 800a732:	dc28      	bgt.n	800a786 <_printf_common+0x9a>
 800a734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a738:	1e13      	subs	r3, r2, #0
 800a73a:	6822      	ldr	r2, [r4, #0]
 800a73c:	bf18      	it	ne
 800a73e:	2301      	movne	r3, #1
 800a740:	0692      	lsls	r2, r2, #26
 800a742:	d42d      	bmi.n	800a7a0 <_printf_common+0xb4>
 800a744:	4649      	mov	r1, r9
 800a746:	4638      	mov	r0, r7
 800a748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a74c:	47c0      	blx	r8
 800a74e:	3001      	adds	r0, #1
 800a750:	d020      	beq.n	800a794 <_printf_common+0xa8>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	68e5      	ldr	r5, [r4, #12]
 800a756:	f003 0306 	and.w	r3, r3, #6
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	bf18      	it	ne
 800a75e:	2500      	movne	r5, #0
 800a760:	6832      	ldr	r2, [r6, #0]
 800a762:	f04f 0600 	mov.w	r6, #0
 800a766:	68a3      	ldr	r3, [r4, #8]
 800a768:	bf08      	it	eq
 800a76a:	1aad      	subeq	r5, r5, r2
 800a76c:	6922      	ldr	r2, [r4, #16]
 800a76e:	bf08      	it	eq
 800a770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a774:	4293      	cmp	r3, r2
 800a776:	bfc4      	itt	gt
 800a778:	1a9b      	subgt	r3, r3, r2
 800a77a:	18ed      	addgt	r5, r5, r3
 800a77c:	341a      	adds	r4, #26
 800a77e:	42b5      	cmp	r5, r6
 800a780:	d11a      	bne.n	800a7b8 <_printf_common+0xcc>
 800a782:	2000      	movs	r0, #0
 800a784:	e008      	b.n	800a798 <_printf_common+0xac>
 800a786:	2301      	movs	r3, #1
 800a788:	4652      	mov	r2, sl
 800a78a:	4649      	mov	r1, r9
 800a78c:	4638      	mov	r0, r7
 800a78e:	47c0      	blx	r8
 800a790:	3001      	adds	r0, #1
 800a792:	d103      	bne.n	800a79c <_printf_common+0xb0>
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79c:	3501      	adds	r5, #1
 800a79e:	e7c4      	b.n	800a72a <_printf_common+0x3e>
 800a7a0:	2030      	movs	r0, #48	; 0x30
 800a7a2:	18e1      	adds	r1, r4, r3
 800a7a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7ae:	4422      	add	r2, r4
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7b6:	e7c5      	b.n	800a744 <_printf_common+0x58>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4649      	mov	r1, r9
 800a7be:	4638      	mov	r0, r7
 800a7c0:	47c0      	blx	r8
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d0e6      	beq.n	800a794 <_printf_common+0xa8>
 800a7c6:	3601      	adds	r6, #1
 800a7c8:	e7d9      	b.n	800a77e <_printf_common+0x92>
	...

0800a7cc <_printf_i>:
 800a7cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	7e27      	ldrb	r7, [r4, #24]
 800a7d4:	4691      	mov	r9, r2
 800a7d6:	2f78      	cmp	r7, #120	; 0x78
 800a7d8:	4680      	mov	r8, r0
 800a7da:	469a      	mov	sl, r3
 800a7dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e2:	d807      	bhi.n	800a7f4 <_printf_i+0x28>
 800a7e4:	2f62      	cmp	r7, #98	; 0x62
 800a7e6:	d80a      	bhi.n	800a7fe <_printf_i+0x32>
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	f000 80d9 	beq.w	800a9a0 <_printf_i+0x1d4>
 800a7ee:	2f58      	cmp	r7, #88	; 0x58
 800a7f0:	f000 80a4 	beq.w	800a93c <_printf_i+0x170>
 800a7f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7fc:	e03a      	b.n	800a874 <_printf_i+0xa8>
 800a7fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a802:	2b15      	cmp	r3, #21
 800a804:	d8f6      	bhi.n	800a7f4 <_printf_i+0x28>
 800a806:	a001      	add	r0, pc, #4	; (adr r0, 800a80c <_printf_i+0x40>)
 800a808:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a80c:	0800a865 	.word	0x0800a865
 800a810:	0800a879 	.word	0x0800a879
 800a814:	0800a7f5 	.word	0x0800a7f5
 800a818:	0800a7f5 	.word	0x0800a7f5
 800a81c:	0800a7f5 	.word	0x0800a7f5
 800a820:	0800a7f5 	.word	0x0800a7f5
 800a824:	0800a879 	.word	0x0800a879
 800a828:	0800a7f5 	.word	0x0800a7f5
 800a82c:	0800a7f5 	.word	0x0800a7f5
 800a830:	0800a7f5 	.word	0x0800a7f5
 800a834:	0800a7f5 	.word	0x0800a7f5
 800a838:	0800a987 	.word	0x0800a987
 800a83c:	0800a8a9 	.word	0x0800a8a9
 800a840:	0800a969 	.word	0x0800a969
 800a844:	0800a7f5 	.word	0x0800a7f5
 800a848:	0800a7f5 	.word	0x0800a7f5
 800a84c:	0800a9a9 	.word	0x0800a9a9
 800a850:	0800a7f5 	.word	0x0800a7f5
 800a854:	0800a8a9 	.word	0x0800a8a9
 800a858:	0800a7f5 	.word	0x0800a7f5
 800a85c:	0800a7f5 	.word	0x0800a7f5
 800a860:	0800a971 	.word	0x0800a971
 800a864:	680b      	ldr	r3, [r1, #0]
 800a866:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a86a:	1d1a      	adds	r2, r3, #4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	600a      	str	r2, [r1, #0]
 800a870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a874:	2301      	movs	r3, #1
 800a876:	e0a4      	b.n	800a9c2 <_printf_i+0x1f6>
 800a878:	6825      	ldr	r5, [r4, #0]
 800a87a:	6808      	ldr	r0, [r1, #0]
 800a87c:	062e      	lsls	r6, r5, #24
 800a87e:	f100 0304 	add.w	r3, r0, #4
 800a882:	d50a      	bpl.n	800a89a <_printf_i+0xce>
 800a884:	6805      	ldr	r5, [r0, #0]
 800a886:	600b      	str	r3, [r1, #0]
 800a888:	2d00      	cmp	r5, #0
 800a88a:	da03      	bge.n	800a894 <_printf_i+0xc8>
 800a88c:	232d      	movs	r3, #45	; 0x2d
 800a88e:	426d      	negs	r5, r5
 800a890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a894:	230a      	movs	r3, #10
 800a896:	485e      	ldr	r0, [pc, #376]	; (800aa10 <_printf_i+0x244>)
 800a898:	e019      	b.n	800a8ce <_printf_i+0x102>
 800a89a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a89e:	6805      	ldr	r5, [r0, #0]
 800a8a0:	600b      	str	r3, [r1, #0]
 800a8a2:	bf18      	it	ne
 800a8a4:	b22d      	sxthne	r5, r5
 800a8a6:	e7ef      	b.n	800a888 <_printf_i+0xbc>
 800a8a8:	680b      	ldr	r3, [r1, #0]
 800a8aa:	6825      	ldr	r5, [r4, #0]
 800a8ac:	1d18      	adds	r0, r3, #4
 800a8ae:	6008      	str	r0, [r1, #0]
 800a8b0:	0628      	lsls	r0, r5, #24
 800a8b2:	d501      	bpl.n	800a8b8 <_printf_i+0xec>
 800a8b4:	681d      	ldr	r5, [r3, #0]
 800a8b6:	e002      	b.n	800a8be <_printf_i+0xf2>
 800a8b8:	0669      	lsls	r1, r5, #25
 800a8ba:	d5fb      	bpl.n	800a8b4 <_printf_i+0xe8>
 800a8bc:	881d      	ldrh	r5, [r3, #0]
 800a8be:	2f6f      	cmp	r7, #111	; 0x6f
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2308      	moveq	r3, #8
 800a8c4:	230a      	movne	r3, #10
 800a8c6:	4852      	ldr	r0, [pc, #328]	; (800aa10 <_printf_i+0x244>)
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8ce:	6866      	ldr	r6, [r4, #4]
 800a8d0:	2e00      	cmp	r6, #0
 800a8d2:	bfa8      	it	ge
 800a8d4:	6821      	ldrge	r1, [r4, #0]
 800a8d6:	60a6      	str	r6, [r4, #8]
 800a8d8:	bfa4      	itt	ge
 800a8da:	f021 0104 	bicge.w	r1, r1, #4
 800a8de:	6021      	strge	r1, [r4, #0]
 800a8e0:	b90d      	cbnz	r5, 800a8e6 <_printf_i+0x11a>
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	d04d      	beq.n	800a982 <_printf_i+0x1b6>
 800a8e6:	4616      	mov	r6, r2
 800a8e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8ec:	fb03 5711 	mls	r7, r3, r1, r5
 800a8f0:	5dc7      	ldrb	r7, [r0, r7]
 800a8f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8f6:	462f      	mov	r7, r5
 800a8f8:	42bb      	cmp	r3, r7
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	d9f4      	bls.n	800a8e8 <_printf_i+0x11c>
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d10b      	bne.n	800a91a <_printf_i+0x14e>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	07df      	lsls	r7, r3, #31
 800a906:	d508      	bpl.n	800a91a <_printf_i+0x14e>
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	6861      	ldr	r1, [r4, #4]
 800a90c:	4299      	cmp	r1, r3
 800a90e:	bfde      	ittt	le
 800a910:	2330      	movle	r3, #48	; 0x30
 800a912:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a916:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a91a:	1b92      	subs	r2, r2, r6
 800a91c:	6122      	str	r2, [r4, #16]
 800a91e:	464b      	mov	r3, r9
 800a920:	4621      	mov	r1, r4
 800a922:	4640      	mov	r0, r8
 800a924:	f8cd a000 	str.w	sl, [sp]
 800a928:	aa03      	add	r2, sp, #12
 800a92a:	f7ff fedf 	bl	800a6ec <_printf_common>
 800a92e:	3001      	adds	r0, #1
 800a930:	d14c      	bne.n	800a9cc <_printf_i+0x200>
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	b004      	add	sp, #16
 800a938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93c:	4834      	ldr	r0, [pc, #208]	; (800aa10 <_printf_i+0x244>)
 800a93e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a942:	680e      	ldr	r6, [r1, #0]
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	f856 5b04 	ldr.w	r5, [r6], #4
 800a94a:	061f      	lsls	r7, r3, #24
 800a94c:	600e      	str	r6, [r1, #0]
 800a94e:	d514      	bpl.n	800a97a <_printf_i+0x1ae>
 800a950:	07d9      	lsls	r1, r3, #31
 800a952:	bf44      	itt	mi
 800a954:	f043 0320 	orrmi.w	r3, r3, #32
 800a958:	6023      	strmi	r3, [r4, #0]
 800a95a:	b91d      	cbnz	r5, 800a964 <_printf_i+0x198>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	f023 0320 	bic.w	r3, r3, #32
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	2310      	movs	r3, #16
 800a966:	e7af      	b.n	800a8c8 <_printf_i+0xfc>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	f043 0320 	orr.w	r3, r3, #32
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	2378      	movs	r3, #120	; 0x78
 800a972:	4828      	ldr	r0, [pc, #160]	; (800aa14 <_printf_i+0x248>)
 800a974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a978:	e7e3      	b.n	800a942 <_printf_i+0x176>
 800a97a:	065e      	lsls	r6, r3, #25
 800a97c:	bf48      	it	mi
 800a97e:	b2ad      	uxthmi	r5, r5
 800a980:	e7e6      	b.n	800a950 <_printf_i+0x184>
 800a982:	4616      	mov	r6, r2
 800a984:	e7bb      	b.n	800a8fe <_printf_i+0x132>
 800a986:	680b      	ldr	r3, [r1, #0]
 800a988:	6826      	ldr	r6, [r4, #0]
 800a98a:	1d1d      	adds	r5, r3, #4
 800a98c:	6960      	ldr	r0, [r4, #20]
 800a98e:	600d      	str	r5, [r1, #0]
 800a990:	0635      	lsls	r5, r6, #24
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	d501      	bpl.n	800a99a <_printf_i+0x1ce>
 800a996:	6018      	str	r0, [r3, #0]
 800a998:	e002      	b.n	800a9a0 <_printf_i+0x1d4>
 800a99a:	0671      	lsls	r1, r6, #25
 800a99c:	d5fb      	bpl.n	800a996 <_printf_i+0x1ca>
 800a99e:	8018      	strh	r0, [r3, #0]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4616      	mov	r6, r2
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	e7ba      	b.n	800a91e <_printf_i+0x152>
 800a9a8:	680b      	ldr	r3, [r1, #0]
 800a9aa:	1d1a      	adds	r2, r3, #4
 800a9ac:	600a      	str	r2, [r1, #0]
 800a9ae:	681e      	ldr	r6, [r3, #0]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	6862      	ldr	r2, [r4, #4]
 800a9b6:	f000 fee9 	bl	800b78c <memchr>
 800a9ba:	b108      	cbz	r0, 800a9c0 <_printf_i+0x1f4>
 800a9bc:	1b80      	subs	r0, r0, r6
 800a9be:	6060      	str	r0, [r4, #4]
 800a9c0:	6863      	ldr	r3, [r4, #4]
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ca:	e7a8      	b.n	800a91e <_printf_i+0x152>
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	47d0      	blx	sl
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d0ab      	beq.n	800a932 <_printf_i+0x166>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	079b      	lsls	r3, r3, #30
 800a9de:	d413      	bmi.n	800aa08 <_printf_i+0x23c>
 800a9e0:	68e0      	ldr	r0, [r4, #12]
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	4298      	cmp	r0, r3
 800a9e6:	bfb8      	it	lt
 800a9e8:	4618      	movlt	r0, r3
 800a9ea:	e7a4      	b.n	800a936 <_printf_i+0x16a>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4632      	mov	r2, r6
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	47d0      	blx	sl
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d09b      	beq.n	800a932 <_printf_i+0x166>
 800a9fa:	3501      	adds	r5, #1
 800a9fc:	68e3      	ldr	r3, [r4, #12]
 800a9fe:	9903      	ldr	r1, [sp, #12]
 800aa00:	1a5b      	subs	r3, r3, r1
 800aa02:	42ab      	cmp	r3, r5
 800aa04:	dcf2      	bgt.n	800a9ec <_printf_i+0x220>
 800aa06:	e7eb      	b.n	800a9e0 <_printf_i+0x214>
 800aa08:	2500      	movs	r5, #0
 800aa0a:	f104 0619 	add.w	r6, r4, #25
 800aa0e:	e7f5      	b.n	800a9fc <_printf_i+0x230>
 800aa10:	0800e0fe 	.word	0x0800e0fe
 800aa14:	0800e10f 	.word	0x0800e10f

0800aa18 <siprintf>:
 800aa18:	b40e      	push	{r1, r2, r3}
 800aa1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa1e:	b500      	push	{lr}
 800aa20:	b09c      	sub	sp, #112	; 0x70
 800aa22:	ab1d      	add	r3, sp, #116	; 0x74
 800aa24:	9002      	str	r0, [sp, #8]
 800aa26:	9006      	str	r0, [sp, #24]
 800aa28:	9107      	str	r1, [sp, #28]
 800aa2a:	9104      	str	r1, [sp, #16]
 800aa2c:	4808      	ldr	r0, [pc, #32]	; (800aa50 <siprintf+0x38>)
 800aa2e:	4909      	ldr	r1, [pc, #36]	; (800aa54 <siprintf+0x3c>)
 800aa30:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa34:	9105      	str	r1, [sp, #20]
 800aa36:	6800      	ldr	r0, [r0, #0]
 800aa38:	a902      	add	r1, sp, #8
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	f001 fb54 	bl	800c0e8 <_svfiprintf_r>
 800aa40:	2200      	movs	r2, #0
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	b01c      	add	sp, #112	; 0x70
 800aa48:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	4770      	bx	lr
 800aa50:	200000c8 	.word	0x200000c8
 800aa54:	ffff0208 	.word	0xffff0208

0800aa58 <strncmp>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	b16a      	cbz	r2, 800aa78 <strncmp+0x20>
 800aa5c:	3901      	subs	r1, #1
 800aa5e:	1884      	adds	r4, r0, r2
 800aa60:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d103      	bne.n	800aa74 <strncmp+0x1c>
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d001      	beq.n	800aa74 <strncmp+0x1c>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1f5      	bne.n	800aa60 <strncmp+0x8>
 800aa74:	1a98      	subs	r0, r3, r2
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	4610      	mov	r0, r2
 800aa7a:	e7fc      	b.n	800aa76 <strncmp+0x1e>

0800aa7c <quorem>:
 800aa7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	6903      	ldr	r3, [r0, #16]
 800aa82:	690c      	ldr	r4, [r1, #16]
 800aa84:	4607      	mov	r7, r0
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	f2c0 8083 	blt.w	800ab92 <quorem+0x116>
 800aa8c:	3c01      	subs	r4, #1
 800aa8e:	f100 0514 	add.w	r5, r0, #20
 800aa92:	f101 0814 	add.w	r8, r1, #20
 800aa96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aaa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aab4:	d332      	bcc.n	800ab1c <quorem+0xa0>
 800aab6:	f04f 0e00 	mov.w	lr, #0
 800aaba:	4640      	mov	r0, r8
 800aabc:	46ac      	mov	ip, r5
 800aabe:	46f2      	mov	sl, lr
 800aac0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aac4:	b293      	uxth	r3, r2
 800aac6:	fb06 e303 	mla	r3, r6, r3, lr
 800aaca:	0c12      	lsrs	r2, r2, #16
 800aacc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aad0:	fb06 e202 	mla	r2, r6, r2, lr
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	ebaa 0303 	sub.w	r3, sl, r3
 800aada:	f8dc a000 	ldr.w	sl, [ip]
 800aade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aae2:	fa1f fa8a 	uxth.w	sl, sl
 800aae6:	4453      	add	r3, sl
 800aae8:	fa1f fa82 	uxth.w	sl, r2
 800aaec:	f8dc 2000 	ldr.w	r2, [ip]
 800aaf0:	4581      	cmp	r9, r0
 800aaf2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aaf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab04:	f84c 3b04 	str.w	r3, [ip], #4
 800ab08:	d2da      	bcs.n	800aac0 <quorem+0x44>
 800ab0a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab0e:	b92b      	cbnz	r3, 800ab1c <quorem+0xa0>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	3b04      	subs	r3, #4
 800ab14:	429d      	cmp	r5, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	d32f      	bcc.n	800ab7a <quorem+0xfe>
 800ab1a:	613c      	str	r4, [r7, #16]
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f001 f8cb 	bl	800bcb8 <__mcmp>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	db25      	blt.n	800ab72 <quorem+0xf6>
 800ab26:	4628      	mov	r0, r5
 800ab28:	f04f 0c00 	mov.w	ip, #0
 800ab2c:	3601      	adds	r6, #1
 800ab2e:	f858 1b04 	ldr.w	r1, [r8], #4
 800ab32:	f8d0 e000 	ldr.w	lr, [r0]
 800ab36:	b28b      	uxth	r3, r1
 800ab38:	ebac 0303 	sub.w	r3, ip, r3
 800ab3c:	fa1f f28e 	uxth.w	r2, lr
 800ab40:	4413      	add	r3, r2
 800ab42:	0c0a      	lsrs	r2, r1, #16
 800ab44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab52:	45c1      	cmp	r9, r8
 800ab54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab58:	f840 3b04 	str.w	r3, [r0], #4
 800ab5c:	d2e7      	bcs.n	800ab2e <quorem+0xb2>
 800ab5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab66:	b922      	cbnz	r2, 800ab72 <quorem+0xf6>
 800ab68:	3b04      	subs	r3, #4
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	d30a      	bcc.n	800ab86 <quorem+0x10a>
 800ab70:	613c      	str	r4, [r7, #16]
 800ab72:	4630      	mov	r0, r6
 800ab74:	b003      	add	sp, #12
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	3b04      	subs	r3, #4
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	d1cb      	bne.n	800ab1a <quorem+0x9e>
 800ab82:	3c01      	subs	r4, #1
 800ab84:	e7c6      	b.n	800ab14 <quorem+0x98>
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	3b04      	subs	r3, #4
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	d1f0      	bne.n	800ab70 <quorem+0xf4>
 800ab8e:	3c01      	subs	r4, #1
 800ab90:	e7eb      	b.n	800ab6a <quorem+0xee>
 800ab92:	2000      	movs	r0, #0
 800ab94:	e7ee      	b.n	800ab74 <quorem+0xf8>
	...

0800ab98 <_dtoa_r>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	461f      	mov	r7, r3
 800aba0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aba2:	b099      	sub	sp, #100	; 0x64
 800aba4:	4605      	mov	r5, r0
 800aba6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800abaa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800abae:	b974      	cbnz	r4, 800abce <_dtoa_r+0x36>
 800abb0:	2010      	movs	r0, #16
 800abb2:	f000 fde3 	bl	800b77c <malloc>
 800abb6:	4602      	mov	r2, r0
 800abb8:	6268      	str	r0, [r5, #36]	; 0x24
 800abba:	b920      	cbnz	r0, 800abc6 <_dtoa_r+0x2e>
 800abbc:	21ea      	movs	r1, #234	; 0xea
 800abbe:	4bae      	ldr	r3, [pc, #696]	; (800ae78 <_dtoa_r+0x2e0>)
 800abc0:	48ae      	ldr	r0, [pc, #696]	; (800ae7c <_dtoa_r+0x2e4>)
 800abc2:	f001 fba1 	bl	800c308 <__assert_func>
 800abc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abca:	6004      	str	r4, [r0, #0]
 800abcc:	60c4      	str	r4, [r0, #12]
 800abce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abd0:	6819      	ldr	r1, [r3, #0]
 800abd2:	b151      	cbz	r1, 800abea <_dtoa_r+0x52>
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	2301      	movs	r3, #1
 800abd8:	4093      	lsls	r3, r2
 800abda:	604a      	str	r2, [r1, #4]
 800abdc:	608b      	str	r3, [r1, #8]
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 fe30 	bl	800b844 <_Bfree>
 800abe4:	2200      	movs	r2, #0
 800abe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	1e3b      	subs	r3, r7, #0
 800abec:	bfaf      	iteee	ge
 800abee:	2300      	movge	r3, #0
 800abf0:	2201      	movlt	r2, #1
 800abf2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abf6:	9305      	strlt	r3, [sp, #20]
 800abf8:	bfa8      	it	ge
 800abfa:	f8c8 3000 	strge.w	r3, [r8]
 800abfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ac02:	4b9f      	ldr	r3, [pc, #636]	; (800ae80 <_dtoa_r+0x2e8>)
 800ac04:	bfb8      	it	lt
 800ac06:	f8c8 2000 	strlt.w	r2, [r8]
 800ac0a:	ea33 0309 	bics.w	r3, r3, r9
 800ac0e:	d119      	bne.n	800ac44 <_dtoa_r+0xac>
 800ac10:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac1c:	4333      	orrs	r3, r6
 800ac1e:	f000 8580 	beq.w	800b722 <_dtoa_r+0xb8a>
 800ac22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac24:	b953      	cbnz	r3, 800ac3c <_dtoa_r+0xa4>
 800ac26:	4b97      	ldr	r3, [pc, #604]	; (800ae84 <_dtoa_r+0x2ec>)
 800ac28:	e022      	b.n	800ac70 <_dtoa_r+0xd8>
 800ac2a:	4b97      	ldr	r3, [pc, #604]	; (800ae88 <_dtoa_r+0x2f0>)
 800ac2c:	9308      	str	r3, [sp, #32]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	9808      	ldr	r0, [sp, #32]
 800ac36:	b019      	add	sp, #100	; 0x64
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	4b91      	ldr	r3, [pc, #580]	; (800ae84 <_dtoa_r+0x2ec>)
 800ac3e:	9308      	str	r3, [sp, #32]
 800ac40:	3303      	adds	r3, #3
 800ac42:	e7f5      	b.n	800ac30 <_dtoa_r+0x98>
 800ac44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ac4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac50:	2200      	movs	r2, #0
 800ac52:	2300      	movs	r3, #0
 800ac54:	f7f5 fea8 	bl	80009a8 <__aeabi_dcmpeq>
 800ac58:	4680      	mov	r8, r0
 800ac5a:	b158      	cbz	r0, 800ac74 <_dtoa_r+0xdc>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8559 	beq.w	800b71c <_dtoa_r+0xb84>
 800ac6a:	4888      	ldr	r0, [pc, #544]	; (800ae8c <_dtoa_r+0x2f4>)
 800ac6c:	6018      	str	r0, [r3, #0]
 800ac6e:	1e43      	subs	r3, r0, #1
 800ac70:	9308      	str	r3, [sp, #32]
 800ac72:	e7df      	b.n	800ac34 <_dtoa_r+0x9c>
 800ac74:	ab16      	add	r3, sp, #88	; 0x58
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	ab17      	add	r3, sp, #92	; 0x5c
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac82:	f001 f8c5 	bl	800be10 <__d2b>
 800ac86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac8a:	4682      	mov	sl, r0
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	d07e      	beq.n	800ad8e <_dtoa_r+0x1f6>
 800ac90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aca2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aca6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800acaa:	2200      	movs	r2, #0
 800acac:	4b78      	ldr	r3, [pc, #480]	; (800ae90 <_dtoa_r+0x2f8>)
 800acae:	f7f5 fa5b 	bl	8000168 <__aeabi_dsub>
 800acb2:	a36b      	add	r3, pc, #428	; (adr r3, 800ae60 <_dtoa_r+0x2c8>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fc0e 	bl	80004d8 <__aeabi_dmul>
 800acbc:	a36a      	add	r3, pc, #424	; (adr r3, 800ae68 <_dtoa_r+0x2d0>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fa53 	bl	800016c <__adddf3>
 800acc6:	4606      	mov	r6, r0
 800acc8:	4620      	mov	r0, r4
 800acca:	460f      	mov	r7, r1
 800accc:	f7f5 fb9a 	bl	8000404 <__aeabi_i2d>
 800acd0:	a367      	add	r3, pc, #412	; (adr r3, 800ae70 <_dtoa_r+0x2d8>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 fbff 	bl	80004d8 <__aeabi_dmul>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 fa43 	bl	800016c <__adddf3>
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	f7f5 fea5 	bl	8000a38 <__aeabi_d2iz>
 800acee:	2200      	movs	r2, #0
 800acf0:	4681      	mov	r9, r0
 800acf2:	2300      	movs	r3, #0
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fe60 	bl	80009bc <__aeabi_dcmplt>
 800acfc:	b148      	cbz	r0, 800ad12 <_dtoa_r+0x17a>
 800acfe:	4648      	mov	r0, r9
 800ad00:	f7f5 fb80 	bl	8000404 <__aeabi_i2d>
 800ad04:	4632      	mov	r2, r6
 800ad06:	463b      	mov	r3, r7
 800ad08:	f7f5 fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 800ad0c:	b908      	cbnz	r0, 800ad12 <_dtoa_r+0x17a>
 800ad0e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad12:	f1b9 0f16 	cmp.w	r9, #22
 800ad16:	d857      	bhi.n	800adc8 <_dtoa_r+0x230>
 800ad18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad1c:	4b5d      	ldr	r3, [pc, #372]	; (800ae94 <_dtoa_r+0x2fc>)
 800ad1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 fe49 	bl	80009bc <__aeabi_dcmplt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d04e      	beq.n	800adcc <_dtoa_r+0x234>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad38:	1b1c      	subs	r4, r3, r4
 800ad3a:	1e63      	subs	r3, r4, #1
 800ad3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3e:	bf49      	itett	mi
 800ad40:	f1c4 0301 	rsbmi	r3, r4, #1
 800ad44:	2300      	movpl	r3, #0
 800ad46:	9306      	strmi	r3, [sp, #24]
 800ad48:	2300      	movmi	r3, #0
 800ad4a:	bf54      	ite	pl
 800ad4c:	9306      	strpl	r3, [sp, #24]
 800ad4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	db3c      	blt.n	800add0 <_dtoa_r+0x238>
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad5c:	444b      	add	r3, r9
 800ad5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad60:	2300      	movs	r3, #0
 800ad62:	930a      	str	r3, [sp, #40]	; 0x28
 800ad64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d86c      	bhi.n	800ae44 <_dtoa_r+0x2ac>
 800ad6a:	2b05      	cmp	r3, #5
 800ad6c:	bfc4      	itt	gt
 800ad6e:	3b04      	subgt	r3, #4
 800ad70:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ad72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad74:	bfc8      	it	gt
 800ad76:	2400      	movgt	r4, #0
 800ad78:	f1a3 0302 	sub.w	r3, r3, #2
 800ad7c:	bfd8      	it	le
 800ad7e:	2401      	movle	r4, #1
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	f200 808b 	bhi.w	800ae9c <_dtoa_r+0x304>
 800ad86:	e8df f003 	tbb	[pc, r3]
 800ad8a:	4f2d      	.short	0x4f2d
 800ad8c:	5b4d      	.short	0x5b4d
 800ad8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad92:	441c      	add	r4, r3
 800ad94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad98:	2b20      	cmp	r3, #32
 800ad9a:	bfc3      	ittte	gt
 800ad9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ada0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ada4:	fa09 f303 	lslgt.w	r3, r9, r3
 800ada8:	f1c3 0320 	rsble	r3, r3, #32
 800adac:	bfc6      	itte	gt
 800adae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800adb2:	4318      	orrgt	r0, r3
 800adb4:	fa06 f003 	lslle.w	r0, r6, r3
 800adb8:	f7f5 fb14 	bl	80003e4 <__aeabi_ui2d>
 800adbc:	2301      	movs	r3, #1
 800adbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800adc2:	3c01      	subs	r4, #1
 800adc4:	9313      	str	r3, [sp, #76]	; 0x4c
 800adc6:	e770      	b.n	800acaa <_dtoa_r+0x112>
 800adc8:	2301      	movs	r3, #1
 800adca:	e7b3      	b.n	800ad34 <_dtoa_r+0x19c>
 800adcc:	900f      	str	r0, [sp, #60]	; 0x3c
 800adce:	e7b2      	b.n	800ad36 <_dtoa_r+0x19e>
 800add0:	9b06      	ldr	r3, [sp, #24]
 800add2:	eba3 0309 	sub.w	r3, r3, r9
 800add6:	9306      	str	r3, [sp, #24]
 800add8:	f1c9 0300 	rsb	r3, r9, #0
 800addc:	930a      	str	r3, [sp, #40]	; 0x28
 800adde:	2300      	movs	r3, #0
 800ade0:	930e      	str	r3, [sp, #56]	; 0x38
 800ade2:	e7bf      	b.n	800ad64 <_dtoa_r+0x1cc>
 800ade4:	2300      	movs	r3, #0
 800ade6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adea:	2b00      	cmp	r3, #0
 800adec:	dc59      	bgt.n	800aea2 <_dtoa_r+0x30a>
 800adee:	f04f 0b01 	mov.w	fp, #1
 800adf2:	465b      	mov	r3, fp
 800adf4:	f8cd b008 	str.w	fp, [sp, #8]
 800adf8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800adfc:	2200      	movs	r2, #0
 800adfe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ae00:	6042      	str	r2, [r0, #4]
 800ae02:	2204      	movs	r2, #4
 800ae04:	f102 0614 	add.w	r6, r2, #20
 800ae08:	429e      	cmp	r6, r3
 800ae0a:	6841      	ldr	r1, [r0, #4]
 800ae0c:	d94f      	bls.n	800aeae <_dtoa_r+0x316>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fcd8 	bl	800b7c4 <_Balloc>
 800ae14:	9008      	str	r0, [sp, #32]
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d14d      	bne.n	800aeb6 <_dtoa_r+0x31e>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae20:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <_dtoa_r+0x300>)
 800ae22:	e6cd      	b.n	800abc0 <_dtoa_r+0x28>
 800ae24:	2301      	movs	r3, #1
 800ae26:	e7de      	b.n	800ade6 <_dtoa_r+0x24e>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae2e:	eb09 0b03 	add.w	fp, r9, r3
 800ae32:	f10b 0301 	add.w	r3, fp, #1
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	9302      	str	r3, [sp, #8]
 800ae3a:	bfb8      	it	lt
 800ae3c:	2301      	movlt	r3, #1
 800ae3e:	e7dd      	b.n	800adfc <_dtoa_r+0x264>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e7f2      	b.n	800ae2a <_dtoa_r+0x292>
 800ae44:	2401      	movs	r4, #1
 800ae46:	2300      	movs	r3, #0
 800ae48:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae4a:	9322      	str	r3, [sp, #136]	; 0x88
 800ae4c:	f04f 3bff 	mov.w	fp, #4294967295
 800ae50:	2200      	movs	r2, #0
 800ae52:	2312      	movs	r3, #18
 800ae54:	f8cd b008 	str.w	fp, [sp, #8]
 800ae58:	9223      	str	r2, [sp, #140]	; 0x8c
 800ae5a:	e7cf      	b.n	800adfc <_dtoa_r+0x264>
 800ae5c:	f3af 8000 	nop.w
 800ae60:	636f4361 	.word	0x636f4361
 800ae64:	3fd287a7 	.word	0x3fd287a7
 800ae68:	8b60c8b3 	.word	0x8b60c8b3
 800ae6c:	3fc68a28 	.word	0x3fc68a28
 800ae70:	509f79fb 	.word	0x509f79fb
 800ae74:	3fd34413 	.word	0x3fd34413
 800ae78:	0800e12d 	.word	0x0800e12d
 800ae7c:	0800e144 	.word	0x0800e144
 800ae80:	7ff00000 	.word	0x7ff00000
 800ae84:	0800e129 	.word	0x0800e129
 800ae88:	0800e120 	.word	0x0800e120
 800ae8c:	0800e0fd 	.word	0x0800e0fd
 800ae90:	3ff80000 	.word	0x3ff80000
 800ae94:	0800e240 	.word	0x0800e240
 800ae98:	0800e1a3 	.word	0x0800e1a3
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea0:	e7d4      	b.n	800ae4c <_dtoa_r+0x2b4>
 800aea2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800aea6:	465b      	mov	r3, fp
 800aea8:	f8cd b008 	str.w	fp, [sp, #8]
 800aeac:	e7a6      	b.n	800adfc <_dtoa_r+0x264>
 800aeae:	3101      	adds	r1, #1
 800aeb0:	6041      	str	r1, [r0, #4]
 800aeb2:	0052      	lsls	r2, r2, #1
 800aeb4:	e7a6      	b.n	800ae04 <_dtoa_r+0x26c>
 800aeb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aeb8:	9a08      	ldr	r2, [sp, #32]
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	2b0e      	cmp	r3, #14
 800aec0:	f200 80a8 	bhi.w	800b014 <_dtoa_r+0x47c>
 800aec4:	2c00      	cmp	r4, #0
 800aec6:	f000 80a5 	beq.w	800b014 <_dtoa_r+0x47c>
 800aeca:	f1b9 0f00 	cmp.w	r9, #0
 800aece:	dd34      	ble.n	800af3a <_dtoa_r+0x3a2>
 800aed0:	4a9a      	ldr	r2, [pc, #616]	; (800b13c <_dtoa_r+0x5a4>)
 800aed2:	f009 030f 	and.w	r3, r9, #15
 800aed6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aeda:	f419 7f80 	tst.w	r9, #256	; 0x100
 800aede:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aee2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aee6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800aeea:	d016      	beq.n	800af1a <_dtoa_r+0x382>
 800aeec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aef0:	4b93      	ldr	r3, [pc, #588]	; (800b140 <_dtoa_r+0x5a8>)
 800aef2:	2703      	movs	r7, #3
 800aef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aef8:	f7f5 fc18 	bl	800072c <__aeabi_ddiv>
 800aefc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af00:	f004 040f 	and.w	r4, r4, #15
 800af04:	4e8e      	ldr	r6, [pc, #568]	; (800b140 <_dtoa_r+0x5a8>)
 800af06:	b954      	cbnz	r4, 800af1e <_dtoa_r+0x386>
 800af08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af10:	f7f5 fc0c 	bl	800072c <__aeabi_ddiv>
 800af14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af18:	e029      	b.n	800af6e <_dtoa_r+0x3d6>
 800af1a:	2702      	movs	r7, #2
 800af1c:	e7f2      	b.n	800af04 <_dtoa_r+0x36c>
 800af1e:	07e1      	lsls	r1, r4, #31
 800af20:	d508      	bpl.n	800af34 <_dtoa_r+0x39c>
 800af22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af32:	3701      	adds	r7, #1
 800af34:	1064      	asrs	r4, r4, #1
 800af36:	3608      	adds	r6, #8
 800af38:	e7e5      	b.n	800af06 <_dtoa_r+0x36e>
 800af3a:	f000 80a5 	beq.w	800b088 <_dtoa_r+0x4f0>
 800af3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af42:	f1c9 0400 	rsb	r4, r9, #0
 800af46:	4b7d      	ldr	r3, [pc, #500]	; (800b13c <_dtoa_r+0x5a4>)
 800af48:	f004 020f 	and.w	r2, r4, #15
 800af4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 fac0 	bl	80004d8 <__aeabi_dmul>
 800af58:	2702      	movs	r7, #2
 800af5a:	2300      	movs	r3, #0
 800af5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af60:	4e77      	ldr	r6, [pc, #476]	; (800b140 <_dtoa_r+0x5a8>)
 800af62:	1124      	asrs	r4, r4, #4
 800af64:	2c00      	cmp	r4, #0
 800af66:	f040 8084 	bne.w	800b072 <_dtoa_r+0x4da>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1d2      	bne.n	800af14 <_dtoa_r+0x37c>
 800af6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 808b 	beq.w	800b08c <_dtoa_r+0x4f4>
 800af76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af82:	2200      	movs	r2, #0
 800af84:	4b6f      	ldr	r3, [pc, #444]	; (800b144 <_dtoa_r+0x5ac>)
 800af86:	f7f5 fd19 	bl	80009bc <__aeabi_dcmplt>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d07e      	beq.n	800b08c <_dtoa_r+0x4f4>
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d07b      	beq.n	800b08c <_dtoa_r+0x4f4>
 800af94:	f1bb 0f00 	cmp.w	fp, #0
 800af98:	dd38      	ble.n	800b00c <_dtoa_r+0x474>
 800af9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af9e:	2200      	movs	r2, #0
 800afa0:	4b69      	ldr	r3, [pc, #420]	; (800b148 <_dtoa_r+0x5b0>)
 800afa2:	f7f5 fa99 	bl	80004d8 <__aeabi_dmul>
 800afa6:	465c      	mov	r4, fp
 800afa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afac:	f109 38ff 	add.w	r8, r9, #4294967295
 800afb0:	3701      	adds	r7, #1
 800afb2:	4638      	mov	r0, r7
 800afb4:	f7f5 fa26 	bl	8000404 <__aeabi_i2d>
 800afb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afbc:	f7f5 fa8c 	bl	80004d8 <__aeabi_dmul>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b62      	ldr	r3, [pc, #392]	; (800b14c <_dtoa_r+0x5b4>)
 800afc4:	f7f5 f8d2 	bl	800016c <__adddf3>
 800afc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800afcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afd0:	9611      	str	r6, [sp, #68]	; 0x44
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	d15d      	bne.n	800b092 <_dtoa_r+0x4fa>
 800afd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afda:	2200      	movs	r2, #0
 800afdc:	4b5c      	ldr	r3, [pc, #368]	; (800b150 <_dtoa_r+0x5b8>)
 800afde:	f7f5 f8c3 	bl	8000168 <__aeabi_dsub>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afea:	4633      	mov	r3, r6
 800afec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afee:	f7f5 fd03 	bl	80009f8 <__aeabi_dcmpgt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f040 829e 	bne.w	800b534 <_dtoa_r+0x99c>
 800aff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800affc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800affe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b002:	f7f5 fcdb 	bl	80009bc <__aeabi_dcmplt>
 800b006:	2800      	cmp	r0, #0
 800b008:	f040 8292 	bne.w	800b530 <_dtoa_r+0x998>
 800b00c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b010:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f2c0 8153 	blt.w	800b2c2 <_dtoa_r+0x72a>
 800b01c:	f1b9 0f0e 	cmp.w	r9, #14
 800b020:	f300 814f 	bgt.w	800b2c2 <_dtoa_r+0x72a>
 800b024:	4b45      	ldr	r3, [pc, #276]	; (800b13c <_dtoa_r+0x5a4>)
 800b026:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b02a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b02e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b034:	2b00      	cmp	r3, #0
 800b036:	f280 80db 	bge.w	800b1f0 <_dtoa_r+0x658>
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f300 80d7 	bgt.w	800b1f0 <_dtoa_r+0x658>
 800b042:	f040 8274 	bne.w	800b52e <_dtoa_r+0x996>
 800b046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b04a:	2200      	movs	r2, #0
 800b04c:	4b40      	ldr	r3, [pc, #256]	; (800b150 <_dtoa_r+0x5b8>)
 800b04e:	f7f5 fa43 	bl	80004d8 <__aeabi_dmul>
 800b052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b056:	f7f5 fcc5 	bl	80009e4 <__aeabi_dcmpge>
 800b05a:	9c02      	ldr	r4, [sp, #8]
 800b05c:	4626      	mov	r6, r4
 800b05e:	2800      	cmp	r0, #0
 800b060:	f040 824a 	bne.w	800b4f8 <_dtoa_r+0x960>
 800b064:	2331      	movs	r3, #49	; 0x31
 800b066:	9f08      	ldr	r7, [sp, #32]
 800b068:	f109 0901 	add.w	r9, r9, #1
 800b06c:	f807 3b01 	strb.w	r3, [r7], #1
 800b070:	e246      	b.n	800b500 <_dtoa_r+0x968>
 800b072:	07e2      	lsls	r2, r4, #31
 800b074:	d505      	bpl.n	800b082 <_dtoa_r+0x4ea>
 800b076:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b07a:	f7f5 fa2d 	bl	80004d8 <__aeabi_dmul>
 800b07e:	2301      	movs	r3, #1
 800b080:	3701      	adds	r7, #1
 800b082:	1064      	asrs	r4, r4, #1
 800b084:	3608      	adds	r6, #8
 800b086:	e76d      	b.n	800af64 <_dtoa_r+0x3cc>
 800b088:	2702      	movs	r7, #2
 800b08a:	e770      	b.n	800af6e <_dtoa_r+0x3d6>
 800b08c:	46c8      	mov	r8, r9
 800b08e:	9c02      	ldr	r4, [sp, #8]
 800b090:	e78f      	b.n	800afb2 <_dtoa_r+0x41a>
 800b092:	9908      	ldr	r1, [sp, #32]
 800b094:	4b29      	ldr	r3, [pc, #164]	; (800b13c <_dtoa_r+0x5a4>)
 800b096:	4421      	add	r1, r4
 800b098:	9112      	str	r1, [sp, #72]	; 0x48
 800b09a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b09c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b0a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d055      	beq.n	800b158 <_dtoa_r+0x5c0>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	4929      	ldr	r1, [pc, #164]	; (800b154 <_dtoa_r+0x5bc>)
 800b0b0:	f7f5 fb3c 	bl	800072c <__aeabi_ddiv>
 800b0b4:	463b      	mov	r3, r7
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	f7f5 f856 	bl	8000168 <__aeabi_dsub>
 800b0bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0c0:	9f08      	ldr	r7, [sp, #32]
 800b0c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c6:	f7f5 fcb7 	bl	8000a38 <__aeabi_d2iz>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	f7f5 f99a 	bl	8000404 <__aeabi_i2d>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d8:	f7f5 f846 	bl	8000168 <__aeabi_dsub>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	3430      	adds	r4, #48	; 0x30
 800b0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0ea:	f807 4b01 	strb.w	r4, [r7], #1
 800b0ee:	f7f5 fc65 	bl	80009bc <__aeabi_dcmplt>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d174      	bne.n	800b1e0 <_dtoa_r+0x648>
 800b0f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	4911      	ldr	r1, [pc, #68]	; (800b144 <_dtoa_r+0x5ac>)
 800b0fe:	f7f5 f833 	bl	8000168 <__aeabi_dsub>
 800b102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b106:	f7f5 fc59 	bl	80009bc <__aeabi_dcmplt>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	f040 80b6 	bne.w	800b27c <_dtoa_r+0x6e4>
 800b110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b112:	429f      	cmp	r7, r3
 800b114:	f43f af7a 	beq.w	800b00c <_dtoa_r+0x474>
 800b118:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b11c:	2200      	movs	r2, #0
 800b11e:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <_dtoa_r+0x5b0>)
 800b120:	f7f5 f9da 	bl	80004d8 <__aeabi_dmul>
 800b124:	2200      	movs	r2, #0
 800b126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <_dtoa_r+0x5b0>)
 800b130:	f7f5 f9d2 	bl	80004d8 <__aeabi_dmul>
 800b134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b138:	e7c3      	b.n	800b0c2 <_dtoa_r+0x52a>
 800b13a:	bf00      	nop
 800b13c:	0800e240 	.word	0x0800e240
 800b140:	0800e218 	.word	0x0800e218
 800b144:	3ff00000 	.word	0x3ff00000
 800b148:	40240000 	.word	0x40240000
 800b14c:	401c0000 	.word	0x401c0000
 800b150:	40140000 	.word	0x40140000
 800b154:	3fe00000 	.word	0x3fe00000
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 f9bc 	bl	80004d8 <__aeabi_dmul>
 800b160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b162:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b166:	9c08      	ldr	r4, [sp, #32]
 800b168:	9314      	str	r3, [sp, #80]	; 0x50
 800b16a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b16e:	f7f5 fc63 	bl	8000a38 <__aeabi_d2iz>
 800b172:	9015      	str	r0, [sp, #84]	; 0x54
 800b174:	f7f5 f946 	bl	8000404 <__aeabi_i2d>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b180:	f7f4 fff2 	bl	8000168 <__aeabi_dsub>
 800b184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b186:	4606      	mov	r6, r0
 800b188:	3330      	adds	r3, #48	; 0x30
 800b18a:	f804 3b01 	strb.w	r3, [r4], #1
 800b18e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b190:	460f      	mov	r7, r1
 800b192:	429c      	cmp	r4, r3
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	d124      	bne.n	800b1e4 <_dtoa_r+0x64c>
 800b19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b19e:	4bb3      	ldr	r3, [pc, #716]	; (800b46c <_dtoa_r+0x8d4>)
 800b1a0:	f7f4 ffe4 	bl	800016c <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fc24 	bl	80009f8 <__aeabi_dcmpgt>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d162      	bne.n	800b27a <_dtoa_r+0x6e2>
 800b1b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	49ac      	ldr	r1, [pc, #688]	; (800b46c <_dtoa_r+0x8d4>)
 800b1bc:	f7f4 ffd4 	bl	8000168 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fbf8 	bl	80009bc <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f43f af1d 	beq.w	800b00c <_dtoa_r+0x474>
 800b1d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b1d4:	1e7b      	subs	r3, r7, #1
 800b1d6:	9314      	str	r3, [sp, #80]	; 0x50
 800b1d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b1dc:	2b30      	cmp	r3, #48	; 0x30
 800b1de:	d0f8      	beq.n	800b1d2 <_dtoa_r+0x63a>
 800b1e0:	46c1      	mov	r9, r8
 800b1e2:	e03a      	b.n	800b25a <_dtoa_r+0x6c2>
 800b1e4:	4ba2      	ldr	r3, [pc, #648]	; (800b470 <_dtoa_r+0x8d8>)
 800b1e6:	f7f5 f977 	bl	80004d8 <__aeabi_dmul>
 800b1ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ee:	e7bc      	b.n	800b16a <_dtoa_r+0x5d2>
 800b1f0:	9f08      	ldr	r7, [sp, #32]
 800b1f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1fa:	f7f5 fa97 	bl	800072c <__aeabi_ddiv>
 800b1fe:	f7f5 fc1b 	bl	8000a38 <__aeabi_d2iz>
 800b202:	4604      	mov	r4, r0
 800b204:	f7f5 f8fe 	bl	8000404 <__aeabi_i2d>
 800b208:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b20c:	f7f5 f964 	bl	80004d8 <__aeabi_dmul>
 800b210:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b214:	460b      	mov	r3, r1
 800b216:	4602      	mov	r2, r0
 800b218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b21c:	f7f4 ffa4 	bl	8000168 <__aeabi_dsub>
 800b220:	f807 6b01 	strb.w	r6, [r7], #1
 800b224:	9e08      	ldr	r6, [sp, #32]
 800b226:	9b02      	ldr	r3, [sp, #8]
 800b228:	1bbe      	subs	r6, r7, r6
 800b22a:	42b3      	cmp	r3, r6
 800b22c:	d13a      	bne.n	800b2a4 <_dtoa_r+0x70c>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	f7f4 ff9b 	bl	800016c <__adddf3>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b23e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b242:	f7f5 fbd9 	bl	80009f8 <__aeabi_dcmpgt>
 800b246:	bb58      	cbnz	r0, 800b2a0 <_dtoa_r+0x708>
 800b248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b250:	f7f5 fbaa 	bl	80009a8 <__aeabi_dcmpeq>
 800b254:	b108      	cbz	r0, 800b25a <_dtoa_r+0x6c2>
 800b256:	07e1      	lsls	r1, r4, #31
 800b258:	d422      	bmi.n	800b2a0 <_dtoa_r+0x708>
 800b25a:	4628      	mov	r0, r5
 800b25c:	4651      	mov	r1, sl
 800b25e:	f000 faf1 	bl	800b844 <_Bfree>
 800b262:	2300      	movs	r3, #0
 800b264:	703b      	strb	r3, [r7, #0]
 800b266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b268:	f109 0001 	add.w	r0, r9, #1
 800b26c:	6018      	str	r0, [r3, #0]
 800b26e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b270:	2b00      	cmp	r3, #0
 800b272:	f43f acdf 	beq.w	800ac34 <_dtoa_r+0x9c>
 800b276:	601f      	str	r7, [r3, #0]
 800b278:	e4dc      	b.n	800ac34 <_dtoa_r+0x9c>
 800b27a:	4627      	mov	r7, r4
 800b27c:	463b      	mov	r3, r7
 800b27e:	461f      	mov	r7, r3
 800b280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b284:	2a39      	cmp	r2, #57	; 0x39
 800b286:	d107      	bne.n	800b298 <_dtoa_r+0x700>
 800b288:	9a08      	ldr	r2, [sp, #32]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d1f7      	bne.n	800b27e <_dtoa_r+0x6e6>
 800b28e:	2230      	movs	r2, #48	; 0x30
 800b290:	9908      	ldr	r1, [sp, #32]
 800b292:	f108 0801 	add.w	r8, r8, #1
 800b296:	700a      	strb	r2, [r1, #0]
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	3201      	adds	r2, #1
 800b29c:	701a      	strb	r2, [r3, #0]
 800b29e:	e79f      	b.n	800b1e0 <_dtoa_r+0x648>
 800b2a0:	46c8      	mov	r8, r9
 800b2a2:	e7eb      	b.n	800b27c <_dtoa_r+0x6e4>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4b72      	ldr	r3, [pc, #456]	; (800b470 <_dtoa_r+0x8d8>)
 800b2a8:	f7f5 f916 	bl	80004d8 <__aeabi_dmul>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f7f5 fb76 	bl	80009a8 <__aeabi_dcmpeq>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d098      	beq.n	800b1f2 <_dtoa_r+0x65a>
 800b2c0:	e7cb      	b.n	800b25a <_dtoa_r+0x6c2>
 800b2c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2c4:	2a00      	cmp	r2, #0
 800b2c6:	f000 80cd 	beq.w	800b464 <_dtoa_r+0x8cc>
 800b2ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b2cc:	2a01      	cmp	r2, #1
 800b2ce:	f300 80af 	bgt.w	800b430 <_dtoa_r+0x898>
 800b2d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	f000 80a7 	beq.w	800b428 <_dtoa_r+0x890>
 800b2da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2e0:	9f06      	ldr	r7, [sp, #24]
 800b2e2:	9a06      	ldr	r2, [sp, #24]
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	441a      	add	r2, r3
 800b2e8:	9206      	str	r2, [sp, #24]
 800b2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	441a      	add	r2, r3
 800b2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f2:	f000 fb61 	bl	800b9b8 <__i2b>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	2f00      	cmp	r7, #0
 800b2fa:	dd0c      	ble.n	800b316 <_dtoa_r+0x77e>
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dd09      	ble.n	800b316 <_dtoa_r+0x77e>
 800b302:	42bb      	cmp	r3, r7
 800b304:	bfa8      	it	ge
 800b306:	463b      	movge	r3, r7
 800b308:	9a06      	ldr	r2, [sp, #24]
 800b30a:	1aff      	subs	r7, r7, r3
 800b30c:	1ad2      	subs	r2, r2, r3
 800b30e:	9206      	str	r2, [sp, #24]
 800b310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	9309      	str	r3, [sp, #36]	; 0x24
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	b1f3      	cbz	r3, 800b358 <_dtoa_r+0x7c0>
 800b31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80a9 	beq.w	800b474 <_dtoa_r+0x8dc>
 800b322:	2c00      	cmp	r4, #0
 800b324:	dd10      	ble.n	800b348 <_dtoa_r+0x7b0>
 800b326:	4631      	mov	r1, r6
 800b328:	4622      	mov	r2, r4
 800b32a:	4628      	mov	r0, r5
 800b32c:	f000 fbfe 	bl	800bb2c <__pow5mult>
 800b330:	4652      	mov	r2, sl
 800b332:	4601      	mov	r1, r0
 800b334:	4606      	mov	r6, r0
 800b336:	4628      	mov	r0, r5
 800b338:	f000 fb54 	bl	800b9e4 <__multiply>
 800b33c:	4680      	mov	r8, r0
 800b33e:	4651      	mov	r1, sl
 800b340:	4628      	mov	r0, r5
 800b342:	f000 fa7f 	bl	800b844 <_Bfree>
 800b346:	46c2      	mov	sl, r8
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	1b1a      	subs	r2, r3, r4
 800b34c:	d004      	beq.n	800b358 <_dtoa_r+0x7c0>
 800b34e:	4651      	mov	r1, sl
 800b350:	4628      	mov	r0, r5
 800b352:	f000 fbeb 	bl	800bb2c <__pow5mult>
 800b356:	4682      	mov	sl, r0
 800b358:	2101      	movs	r1, #1
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 fb2c 	bl	800b9b8 <__i2b>
 800b360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b362:	4604      	mov	r4, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	f340 8087 	ble.w	800b478 <_dtoa_r+0x8e0>
 800b36a:	461a      	mov	r2, r3
 800b36c:	4601      	mov	r1, r0
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fbdc 	bl	800bb2c <__pow5mult>
 800b374:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b376:	4604      	mov	r4, r0
 800b378:	2b01      	cmp	r3, #1
 800b37a:	f340 8080 	ble.w	800b47e <_dtoa_r+0x8e6>
 800b37e:	f04f 0800 	mov.w	r8, #0
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b388:	6918      	ldr	r0, [r3, #16]
 800b38a:	f000 fac7 	bl	800b91c <__hi0bits>
 800b38e:	f1c0 0020 	rsb	r0, r0, #32
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	4418      	add	r0, r3
 800b396:	f010 001f 	ands.w	r0, r0, #31
 800b39a:	f000 8092 	beq.w	800b4c2 <_dtoa_r+0x92a>
 800b39e:	f1c0 0320 	rsb	r3, r0, #32
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	f340 808a 	ble.w	800b4bc <_dtoa_r+0x924>
 800b3a8:	f1c0 001c 	rsb	r0, r0, #28
 800b3ac:	9b06      	ldr	r3, [sp, #24]
 800b3ae:	4407      	add	r7, r0
 800b3b0:	4403      	add	r3, r0
 800b3b2:	9306      	str	r3, [sp, #24]
 800b3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b6:	4403      	add	r3, r0
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	9b06      	ldr	r3, [sp, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd05      	ble.n	800b3cc <_dtoa_r+0x834>
 800b3c0:	4651      	mov	r1, sl
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f000 fc0b 	bl	800bbe0 <__lshift>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	dd05      	ble.n	800b3de <_dtoa_r+0x846>
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 fc02 	bl	800bbe0 <__lshift>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d070      	beq.n	800b4c6 <_dtoa_r+0x92e>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	f000 fc66 	bl	800bcb8 <__mcmp>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	da6a      	bge.n	800b4c6 <_dtoa_r+0x92e>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4651      	mov	r1, sl
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 fa46 	bl	800b888 <__multadd>
 800b3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fe:	4682      	mov	sl, r0
 800b400:	f109 39ff 	add.w	r9, r9, #4294967295
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8193 	beq.w	800b730 <_dtoa_r+0xb98>
 800b40a:	4631      	mov	r1, r6
 800b40c:	2300      	movs	r3, #0
 800b40e:	220a      	movs	r2, #10
 800b410:	4628      	mov	r0, r5
 800b412:	f000 fa39 	bl	800b888 <__multadd>
 800b416:	f1bb 0f00 	cmp.w	fp, #0
 800b41a:	4606      	mov	r6, r0
 800b41c:	f300 8093 	bgt.w	800b546 <_dtoa_r+0x9ae>
 800b420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b422:	2b02      	cmp	r3, #2
 800b424:	dc57      	bgt.n	800b4d6 <_dtoa_r+0x93e>
 800b426:	e08e      	b.n	800b546 <_dtoa_r+0x9ae>
 800b428:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b42a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b42e:	e756      	b.n	800b2de <_dtoa_r+0x746>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	1e5c      	subs	r4, r3, #1
 800b434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b436:	42a3      	cmp	r3, r4
 800b438:	bfb7      	itett	lt
 800b43a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b43c:	1b1c      	subge	r4, r3, r4
 800b43e:	1ae2      	sublt	r2, r4, r3
 800b440:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b442:	bfbe      	ittt	lt
 800b444:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b446:	189b      	addlt	r3, r3, r2
 800b448:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	bfb8      	it	lt
 800b44e:	2400      	movlt	r4, #0
 800b450:	2b00      	cmp	r3, #0
 800b452:	bfbb      	ittet	lt
 800b454:	9b06      	ldrlt	r3, [sp, #24]
 800b456:	9a02      	ldrlt	r2, [sp, #8]
 800b458:	9f06      	ldrge	r7, [sp, #24]
 800b45a:	1a9f      	sublt	r7, r3, r2
 800b45c:	bfac      	ite	ge
 800b45e:	9b02      	ldrge	r3, [sp, #8]
 800b460:	2300      	movlt	r3, #0
 800b462:	e73e      	b.n	800b2e2 <_dtoa_r+0x74a>
 800b464:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b466:	9f06      	ldr	r7, [sp, #24]
 800b468:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b46a:	e745      	b.n	800b2f8 <_dtoa_r+0x760>
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	40240000 	.word	0x40240000
 800b474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b476:	e76a      	b.n	800b34e <_dtoa_r+0x7b6>
 800b478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	dc19      	bgt.n	800b4b2 <_dtoa_r+0x91a>
 800b47e:	9b04      	ldr	r3, [sp, #16]
 800b480:	b9bb      	cbnz	r3, 800b4b2 <_dtoa_r+0x91a>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b488:	b99b      	cbnz	r3, 800b4b2 <_dtoa_r+0x91a>
 800b48a:	9b05      	ldr	r3, [sp, #20]
 800b48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b490:	0d1b      	lsrs	r3, r3, #20
 800b492:	051b      	lsls	r3, r3, #20
 800b494:	b183      	cbz	r3, 800b4b8 <_dtoa_r+0x920>
 800b496:	f04f 0801 	mov.w	r8, #1
 800b49a:	9b06      	ldr	r3, [sp, #24]
 800b49c:	3301      	adds	r3, #1
 800b49e:	9306      	str	r3, [sp, #24]
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f af6a 	bne.w	800b382 <_dtoa_r+0x7ea>
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	e76f      	b.n	800b392 <_dtoa_r+0x7fa>
 800b4b2:	f04f 0800 	mov.w	r8, #0
 800b4b6:	e7f6      	b.n	800b4a6 <_dtoa_r+0x90e>
 800b4b8:	4698      	mov	r8, r3
 800b4ba:	e7f4      	b.n	800b4a6 <_dtoa_r+0x90e>
 800b4bc:	f43f af7d 	beq.w	800b3ba <_dtoa_r+0x822>
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	301c      	adds	r0, #28
 800b4c4:	e772      	b.n	800b3ac <_dtoa_r+0x814>
 800b4c6:	9b02      	ldr	r3, [sp, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc36      	bgt.n	800b53a <_dtoa_r+0x9a2>
 800b4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	dd33      	ble.n	800b53a <_dtoa_r+0x9a2>
 800b4d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b4d6:	f1bb 0f00 	cmp.w	fp, #0
 800b4da:	d10d      	bne.n	800b4f8 <_dtoa_r+0x960>
 800b4dc:	4621      	mov	r1, r4
 800b4de:	465b      	mov	r3, fp
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f000 f9d0 	bl	800b888 <__multadd>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	f000 fbe3 	bl	800bcb8 <__mcmp>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f73f adb6 	bgt.w	800b064 <_dtoa_r+0x4cc>
 800b4f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4fa:	9f08      	ldr	r7, [sp, #32]
 800b4fc:	ea6f 0903 	mvn.w	r9, r3
 800b500:	f04f 0800 	mov.w	r8, #0
 800b504:	4621      	mov	r1, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f99c 	bl	800b844 <_Bfree>
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	f43f aea4 	beq.w	800b25a <_dtoa_r+0x6c2>
 800b512:	f1b8 0f00 	cmp.w	r8, #0
 800b516:	d005      	beq.n	800b524 <_dtoa_r+0x98c>
 800b518:	45b0      	cmp	r8, r6
 800b51a:	d003      	beq.n	800b524 <_dtoa_r+0x98c>
 800b51c:	4641      	mov	r1, r8
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 f990 	bl	800b844 <_Bfree>
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	f000 f98c 	bl	800b844 <_Bfree>
 800b52c:	e695      	b.n	800b25a <_dtoa_r+0x6c2>
 800b52e:	2400      	movs	r4, #0
 800b530:	4626      	mov	r6, r4
 800b532:	e7e1      	b.n	800b4f8 <_dtoa_r+0x960>
 800b534:	46c1      	mov	r9, r8
 800b536:	4626      	mov	r6, r4
 800b538:	e594      	b.n	800b064 <_dtoa_r+0x4cc>
 800b53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b53c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 80fc 	beq.w	800b73e <_dtoa_r+0xba6>
 800b546:	2f00      	cmp	r7, #0
 800b548:	dd05      	ble.n	800b556 <_dtoa_r+0x9be>
 800b54a:	4631      	mov	r1, r6
 800b54c:	463a      	mov	r2, r7
 800b54e:	4628      	mov	r0, r5
 800b550:	f000 fb46 	bl	800bbe0 <__lshift>
 800b554:	4606      	mov	r6, r0
 800b556:	f1b8 0f00 	cmp.w	r8, #0
 800b55a:	d05c      	beq.n	800b616 <_dtoa_r+0xa7e>
 800b55c:	4628      	mov	r0, r5
 800b55e:	6871      	ldr	r1, [r6, #4]
 800b560:	f000 f930 	bl	800b7c4 <_Balloc>
 800b564:	4607      	mov	r7, r0
 800b566:	b928      	cbnz	r0, 800b574 <_dtoa_r+0x9dc>
 800b568:	4602      	mov	r2, r0
 800b56a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b56e:	4b7e      	ldr	r3, [pc, #504]	; (800b768 <_dtoa_r+0xbd0>)
 800b570:	f7ff bb26 	b.w	800abc0 <_dtoa_r+0x28>
 800b574:	6932      	ldr	r2, [r6, #16]
 800b576:	f106 010c 	add.w	r1, r6, #12
 800b57a:	3202      	adds	r2, #2
 800b57c:	0092      	lsls	r2, r2, #2
 800b57e:	300c      	adds	r0, #12
 800b580:	f000 f912 	bl	800b7a8 <memcpy>
 800b584:	2201      	movs	r2, #1
 800b586:	4639      	mov	r1, r7
 800b588:	4628      	mov	r0, r5
 800b58a:	f000 fb29 	bl	800bbe0 <__lshift>
 800b58e:	46b0      	mov	r8, r6
 800b590:	4606      	mov	r6, r0
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	3301      	adds	r3, #1
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	9b08      	ldr	r3, [sp, #32]
 800b59a:	445b      	add	r3, fp
 800b59c:	930a      	str	r3, [sp, #40]	; 0x28
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	f103 3bff 	add.w	fp, r3, #4294967295
 800b5b0:	f7ff fa64 	bl	800aa7c <quorem>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	4641      	mov	r1, r8
 800b5b8:	3330      	adds	r3, #48	; 0x30
 800b5ba:	9004      	str	r0, [sp, #16]
 800b5bc:	4650      	mov	r0, sl
 800b5be:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5c0:	f000 fb7a 	bl	800bcb8 <__mcmp>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	9006      	str	r0, [sp, #24]
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f000 fb90 	bl	800bcf0 <__mdiff>
 800b5d0:	68c2      	ldr	r2, [r0, #12]
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d6:	bb02      	cbnz	r2, 800b61a <_dtoa_r+0xa82>
 800b5d8:	4601      	mov	r1, r0
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f000 fb6c 	bl	800bcb8 <__mcmp>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b5ec:	f000 f92a 	bl	800b844 <_Bfree>
 800b5f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f4:	9f02      	ldr	r7, [sp, #8]
 800b5f6:	ea43 0102 	orr.w	r1, r3, r2
 800b5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b600:	d10d      	bne.n	800b61e <_dtoa_r+0xa86>
 800b602:	2b39      	cmp	r3, #57	; 0x39
 800b604:	d027      	beq.n	800b656 <_dtoa_r+0xabe>
 800b606:	9a06      	ldr	r2, [sp, #24]
 800b608:	2a00      	cmp	r2, #0
 800b60a:	dd01      	ble.n	800b610 <_dtoa_r+0xa78>
 800b60c:	9b04      	ldr	r3, [sp, #16]
 800b60e:	3331      	adds	r3, #49	; 0x31
 800b610:	f88b 3000 	strb.w	r3, [fp]
 800b614:	e776      	b.n	800b504 <_dtoa_r+0x96c>
 800b616:	4630      	mov	r0, r6
 800b618:	e7b9      	b.n	800b58e <_dtoa_r+0x9f6>
 800b61a:	2201      	movs	r2, #1
 800b61c:	e7e2      	b.n	800b5e4 <_dtoa_r+0xa4c>
 800b61e:	9906      	ldr	r1, [sp, #24]
 800b620:	2900      	cmp	r1, #0
 800b622:	db04      	blt.n	800b62e <_dtoa_r+0xa96>
 800b624:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b626:	4301      	orrs	r1, r0
 800b628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b62a:	4301      	orrs	r1, r0
 800b62c:	d120      	bne.n	800b670 <_dtoa_r+0xad8>
 800b62e:	2a00      	cmp	r2, #0
 800b630:	ddee      	ble.n	800b610 <_dtoa_r+0xa78>
 800b632:	4651      	mov	r1, sl
 800b634:	2201      	movs	r2, #1
 800b636:	4628      	mov	r0, r5
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	f000 fad1 	bl	800bbe0 <__lshift>
 800b63e:	4621      	mov	r1, r4
 800b640:	4682      	mov	sl, r0
 800b642:	f000 fb39 	bl	800bcb8 <__mcmp>
 800b646:	2800      	cmp	r0, #0
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	dc02      	bgt.n	800b652 <_dtoa_r+0xaba>
 800b64c:	d1e0      	bne.n	800b610 <_dtoa_r+0xa78>
 800b64e:	07da      	lsls	r2, r3, #31
 800b650:	d5de      	bpl.n	800b610 <_dtoa_r+0xa78>
 800b652:	2b39      	cmp	r3, #57	; 0x39
 800b654:	d1da      	bne.n	800b60c <_dtoa_r+0xa74>
 800b656:	2339      	movs	r3, #57	; 0x39
 800b658:	f88b 3000 	strb.w	r3, [fp]
 800b65c:	463b      	mov	r3, r7
 800b65e:	461f      	mov	r7, r3
 800b660:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b664:	3b01      	subs	r3, #1
 800b666:	2a39      	cmp	r2, #57	; 0x39
 800b668:	d050      	beq.n	800b70c <_dtoa_r+0xb74>
 800b66a:	3201      	adds	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
 800b66e:	e749      	b.n	800b504 <_dtoa_r+0x96c>
 800b670:	2a00      	cmp	r2, #0
 800b672:	dd03      	ble.n	800b67c <_dtoa_r+0xae4>
 800b674:	2b39      	cmp	r3, #57	; 0x39
 800b676:	d0ee      	beq.n	800b656 <_dtoa_r+0xabe>
 800b678:	3301      	adds	r3, #1
 800b67a:	e7c9      	b.n	800b610 <_dtoa_r+0xa78>
 800b67c:	9a02      	ldr	r2, [sp, #8]
 800b67e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b680:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b684:	428a      	cmp	r2, r1
 800b686:	d02a      	beq.n	800b6de <_dtoa_r+0xb46>
 800b688:	4651      	mov	r1, sl
 800b68a:	2300      	movs	r3, #0
 800b68c:	220a      	movs	r2, #10
 800b68e:	4628      	mov	r0, r5
 800b690:	f000 f8fa 	bl	800b888 <__multadd>
 800b694:	45b0      	cmp	r8, r6
 800b696:	4682      	mov	sl, r0
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	f04f 020a 	mov.w	r2, #10
 800b6a0:	4641      	mov	r1, r8
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	d107      	bne.n	800b6b6 <_dtoa_r+0xb1e>
 800b6a6:	f000 f8ef 	bl	800b888 <__multadd>
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	9b02      	ldr	r3, [sp, #8]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9302      	str	r3, [sp, #8]
 800b6b4:	e777      	b.n	800b5a6 <_dtoa_r+0xa0e>
 800b6b6:	f000 f8e7 	bl	800b888 <__multadd>
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4680      	mov	r8, r0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	220a      	movs	r2, #10
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f000 f8e0 	bl	800b888 <__multadd>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	e7f0      	b.n	800b6ae <_dtoa_r+0xb16>
 800b6cc:	f1bb 0f00 	cmp.w	fp, #0
 800b6d0:	bfcc      	ite	gt
 800b6d2:	465f      	movgt	r7, fp
 800b6d4:	2701      	movle	r7, #1
 800b6d6:	f04f 0800 	mov.w	r8, #0
 800b6da:	9a08      	ldr	r2, [sp, #32]
 800b6dc:	4417      	add	r7, r2
 800b6de:	4651      	mov	r1, sl
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	9302      	str	r3, [sp, #8]
 800b6e6:	f000 fa7b 	bl	800bbe0 <__lshift>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	f000 fae3 	bl	800bcb8 <__mcmp>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	dcb2      	bgt.n	800b65c <_dtoa_r+0xac4>
 800b6f6:	d102      	bne.n	800b6fe <_dtoa_r+0xb66>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	07db      	lsls	r3, r3, #31
 800b6fc:	d4ae      	bmi.n	800b65c <_dtoa_r+0xac4>
 800b6fe:	463b      	mov	r3, r7
 800b700:	461f      	mov	r7, r3
 800b702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b706:	2a30      	cmp	r2, #48	; 0x30
 800b708:	d0fa      	beq.n	800b700 <_dtoa_r+0xb68>
 800b70a:	e6fb      	b.n	800b504 <_dtoa_r+0x96c>
 800b70c:	9a08      	ldr	r2, [sp, #32]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d1a5      	bne.n	800b65e <_dtoa_r+0xac6>
 800b712:	2331      	movs	r3, #49	; 0x31
 800b714:	f109 0901 	add.w	r9, r9, #1
 800b718:	7013      	strb	r3, [r2, #0]
 800b71a:	e6f3      	b.n	800b504 <_dtoa_r+0x96c>
 800b71c:	4b13      	ldr	r3, [pc, #76]	; (800b76c <_dtoa_r+0xbd4>)
 800b71e:	f7ff baa7 	b.w	800ac70 <_dtoa_r+0xd8>
 800b722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b724:	2b00      	cmp	r3, #0
 800b726:	f47f aa80 	bne.w	800ac2a <_dtoa_r+0x92>
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <_dtoa_r+0xbd8>)
 800b72c:	f7ff baa0 	b.w	800ac70 <_dtoa_r+0xd8>
 800b730:	f1bb 0f00 	cmp.w	fp, #0
 800b734:	dc03      	bgt.n	800b73e <_dtoa_r+0xba6>
 800b736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b738:	2b02      	cmp	r3, #2
 800b73a:	f73f aecc 	bgt.w	800b4d6 <_dtoa_r+0x93e>
 800b73e:	9f08      	ldr	r7, [sp, #32]
 800b740:	4621      	mov	r1, r4
 800b742:	4650      	mov	r0, sl
 800b744:	f7ff f99a 	bl	800aa7c <quorem>
 800b748:	9a08      	ldr	r2, [sp, #32]
 800b74a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b74e:	f807 3b01 	strb.w	r3, [r7], #1
 800b752:	1aba      	subs	r2, r7, r2
 800b754:	4593      	cmp	fp, r2
 800b756:	ddb9      	ble.n	800b6cc <_dtoa_r+0xb34>
 800b758:	4651      	mov	r1, sl
 800b75a:	2300      	movs	r3, #0
 800b75c:	220a      	movs	r2, #10
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f892 	bl	800b888 <__multadd>
 800b764:	4682      	mov	sl, r0
 800b766:	e7eb      	b.n	800b740 <_dtoa_r+0xba8>
 800b768:	0800e1a3 	.word	0x0800e1a3
 800b76c:	0800e0fc 	.word	0x0800e0fc
 800b770:	0800e120 	.word	0x0800e120

0800b774 <_localeconv_r>:
 800b774:	4800      	ldr	r0, [pc, #0]	; (800b778 <_localeconv_r+0x4>)
 800b776:	4770      	bx	lr
 800b778:	2000021c 	.word	0x2000021c

0800b77c <malloc>:
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <malloc+0xc>)
 800b77e:	4601      	mov	r1, r0
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f000 bbfb 	b.w	800bf7c <_malloc_r>
 800b786:	bf00      	nop
 800b788:	200000c8 	.word	0x200000c8

0800b78c <memchr>:
 800b78c:	4603      	mov	r3, r0
 800b78e:	b510      	push	{r4, lr}
 800b790:	b2c9      	uxtb	r1, r1
 800b792:	4402      	add	r2, r0
 800b794:	4293      	cmp	r3, r2
 800b796:	4618      	mov	r0, r3
 800b798:	d101      	bne.n	800b79e <memchr+0x12>
 800b79a:	2000      	movs	r0, #0
 800b79c:	e003      	b.n	800b7a6 <memchr+0x1a>
 800b79e:	7804      	ldrb	r4, [r0, #0]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	428c      	cmp	r4, r1
 800b7a4:	d1f6      	bne.n	800b794 <memchr+0x8>
 800b7a6:	bd10      	pop	{r4, pc}

0800b7a8 <memcpy>:
 800b7a8:	440a      	add	r2, r1
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7b0:	d100      	bne.n	800b7b4 <memcpy+0xc>
 800b7b2:	4770      	bx	lr
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ba:	4291      	cmp	r1, r2
 800b7bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7c0:	d1f9      	bne.n	800b7b6 <memcpy+0xe>
 800b7c2:	bd10      	pop	{r4, pc}

0800b7c4 <_Balloc>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	b976      	cbnz	r6, 800b7ec <_Balloc+0x28>
 800b7ce:	2010      	movs	r0, #16
 800b7d0:	f7ff ffd4 	bl	800b77c <malloc>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	6260      	str	r0, [r4, #36]	; 0x24
 800b7d8:	b920      	cbnz	r0, 800b7e4 <_Balloc+0x20>
 800b7da:	2166      	movs	r1, #102	; 0x66
 800b7dc:	4b17      	ldr	r3, [pc, #92]	; (800b83c <_Balloc+0x78>)
 800b7de:	4818      	ldr	r0, [pc, #96]	; (800b840 <_Balloc+0x7c>)
 800b7e0:	f000 fd92 	bl	800c308 <__assert_func>
 800b7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7e8:	6006      	str	r6, [r0, #0]
 800b7ea:	60c6      	str	r6, [r0, #12]
 800b7ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7ee:	68f3      	ldr	r3, [r6, #12]
 800b7f0:	b183      	cbz	r3, 800b814 <_Balloc+0x50>
 800b7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7fa:	b9b8      	cbnz	r0, 800b82c <_Balloc+0x68>
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b802:	1d72      	adds	r2, r6, #5
 800b804:	4620      	mov	r0, r4
 800b806:	0092      	lsls	r2, r2, #2
 800b808:	f000 fb5e 	bl	800bec8 <_calloc_r>
 800b80c:	b160      	cbz	r0, 800b828 <_Balloc+0x64>
 800b80e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b812:	e00e      	b.n	800b832 <_Balloc+0x6e>
 800b814:	2221      	movs	r2, #33	; 0x21
 800b816:	2104      	movs	r1, #4
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 fb55 	bl	800bec8 <_calloc_r>
 800b81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b820:	60f0      	str	r0, [r6, #12]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e4      	bne.n	800b7f2 <_Balloc+0x2e>
 800b828:	2000      	movs	r0, #0
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	6802      	ldr	r2, [r0, #0]
 800b82e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b832:	2300      	movs	r3, #0
 800b834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b838:	e7f7      	b.n	800b82a <_Balloc+0x66>
 800b83a:	bf00      	nop
 800b83c:	0800e12d 	.word	0x0800e12d
 800b840:	0800e1b4 	.word	0x0800e1b4

0800b844 <_Bfree>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b848:	4605      	mov	r5, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	b976      	cbnz	r6, 800b86c <_Bfree+0x28>
 800b84e:	2010      	movs	r0, #16
 800b850:	f7ff ff94 	bl	800b77c <malloc>
 800b854:	4602      	mov	r2, r0
 800b856:	6268      	str	r0, [r5, #36]	; 0x24
 800b858:	b920      	cbnz	r0, 800b864 <_Bfree+0x20>
 800b85a:	218a      	movs	r1, #138	; 0x8a
 800b85c:	4b08      	ldr	r3, [pc, #32]	; (800b880 <_Bfree+0x3c>)
 800b85e:	4809      	ldr	r0, [pc, #36]	; (800b884 <_Bfree+0x40>)
 800b860:	f000 fd52 	bl	800c308 <__assert_func>
 800b864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b868:	6006      	str	r6, [r0, #0]
 800b86a:	60c6      	str	r6, [r0, #12]
 800b86c:	b13c      	cbz	r4, 800b87e <_Bfree+0x3a>
 800b86e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b870:	6862      	ldr	r2, [r4, #4]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b878:	6021      	str	r1, [r4, #0]
 800b87a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	0800e12d 	.word	0x0800e12d
 800b884:	0800e1b4 	.word	0x0800e1b4

0800b888 <__multadd>:
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	4698      	mov	r8, r3
 800b88e:	460c      	mov	r4, r1
 800b890:	2300      	movs	r3, #0
 800b892:	690e      	ldr	r6, [r1, #16]
 800b894:	4607      	mov	r7, r0
 800b896:	f101 0014 	add.w	r0, r1, #20
 800b89a:	6805      	ldr	r5, [r0, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	b2a9      	uxth	r1, r5
 800b8a0:	fb02 8101 	mla	r1, r2, r1, r8
 800b8a4:	0c2d      	lsrs	r5, r5, #16
 800b8a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b8aa:	fb02 c505 	mla	r5, r2, r5, ip
 800b8ae:	b289      	uxth	r1, r1
 800b8b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b8b4:	429e      	cmp	r6, r3
 800b8b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b8ba:	f840 1b04 	str.w	r1, [r0], #4
 800b8be:	dcec      	bgt.n	800b89a <__multadd+0x12>
 800b8c0:	f1b8 0f00 	cmp.w	r8, #0
 800b8c4:	d022      	beq.n	800b90c <__multadd+0x84>
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	42b3      	cmp	r3, r6
 800b8ca:	dc19      	bgt.n	800b900 <__multadd+0x78>
 800b8cc:	6861      	ldr	r1, [r4, #4]
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	3101      	adds	r1, #1
 800b8d2:	f7ff ff77 	bl	800b7c4 <_Balloc>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	b928      	cbnz	r0, 800b8e6 <__multadd+0x5e>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	21b5      	movs	r1, #181	; 0xb5
 800b8de:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <__multadd+0x8c>)
 800b8e0:	480d      	ldr	r0, [pc, #52]	; (800b918 <__multadd+0x90>)
 800b8e2:	f000 fd11 	bl	800c308 <__assert_func>
 800b8e6:	6922      	ldr	r2, [r4, #16]
 800b8e8:	f104 010c 	add.w	r1, r4, #12
 800b8ec:	3202      	adds	r2, #2
 800b8ee:	0092      	lsls	r2, r2, #2
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	f7ff ff59 	bl	800b7a8 <memcpy>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7ff ffa3 	bl	800b844 <_Bfree>
 800b8fe:	462c      	mov	r4, r5
 800b900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b904:	3601      	adds	r6, #1
 800b906:	f8c3 8014 	str.w	r8, [r3, #20]
 800b90a:	6126      	str	r6, [r4, #16]
 800b90c:	4620      	mov	r0, r4
 800b90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b912:	bf00      	nop
 800b914:	0800e1a3 	.word	0x0800e1a3
 800b918:	0800e1b4 	.word	0x0800e1b4

0800b91c <__hi0bits>:
 800b91c:	0c02      	lsrs	r2, r0, #16
 800b91e:	0412      	lsls	r2, r2, #16
 800b920:	4603      	mov	r3, r0
 800b922:	b9ca      	cbnz	r2, 800b958 <__hi0bits+0x3c>
 800b924:	0403      	lsls	r3, r0, #16
 800b926:	2010      	movs	r0, #16
 800b928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b92c:	bf04      	itt	eq
 800b92e:	021b      	lsleq	r3, r3, #8
 800b930:	3008      	addeq	r0, #8
 800b932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b936:	bf04      	itt	eq
 800b938:	011b      	lsleq	r3, r3, #4
 800b93a:	3004      	addeq	r0, #4
 800b93c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b940:	bf04      	itt	eq
 800b942:	009b      	lsleq	r3, r3, #2
 800b944:	3002      	addeq	r0, #2
 800b946:	2b00      	cmp	r3, #0
 800b948:	db05      	blt.n	800b956 <__hi0bits+0x3a>
 800b94a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b94e:	f100 0001 	add.w	r0, r0, #1
 800b952:	bf08      	it	eq
 800b954:	2020      	moveq	r0, #32
 800b956:	4770      	bx	lr
 800b958:	2000      	movs	r0, #0
 800b95a:	e7e5      	b.n	800b928 <__hi0bits+0xc>

0800b95c <__lo0bits>:
 800b95c:	6803      	ldr	r3, [r0, #0]
 800b95e:	4602      	mov	r2, r0
 800b960:	f013 0007 	ands.w	r0, r3, #7
 800b964:	d00b      	beq.n	800b97e <__lo0bits+0x22>
 800b966:	07d9      	lsls	r1, r3, #31
 800b968:	d422      	bmi.n	800b9b0 <__lo0bits+0x54>
 800b96a:	0798      	lsls	r0, r3, #30
 800b96c:	bf49      	itett	mi
 800b96e:	085b      	lsrmi	r3, r3, #1
 800b970:	089b      	lsrpl	r3, r3, #2
 800b972:	2001      	movmi	r0, #1
 800b974:	6013      	strmi	r3, [r2, #0]
 800b976:	bf5c      	itt	pl
 800b978:	2002      	movpl	r0, #2
 800b97a:	6013      	strpl	r3, [r2, #0]
 800b97c:	4770      	bx	lr
 800b97e:	b299      	uxth	r1, r3
 800b980:	b909      	cbnz	r1, 800b986 <__lo0bits+0x2a>
 800b982:	2010      	movs	r0, #16
 800b984:	0c1b      	lsrs	r3, r3, #16
 800b986:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b98a:	bf04      	itt	eq
 800b98c:	0a1b      	lsreq	r3, r3, #8
 800b98e:	3008      	addeq	r0, #8
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	bf04      	itt	eq
 800b994:	091b      	lsreq	r3, r3, #4
 800b996:	3004      	addeq	r0, #4
 800b998:	0799      	lsls	r1, r3, #30
 800b99a:	bf04      	itt	eq
 800b99c:	089b      	lsreq	r3, r3, #2
 800b99e:	3002      	addeq	r0, #2
 800b9a0:	07d9      	lsls	r1, r3, #31
 800b9a2:	d403      	bmi.n	800b9ac <__lo0bits+0x50>
 800b9a4:	085b      	lsrs	r3, r3, #1
 800b9a6:	f100 0001 	add.w	r0, r0, #1
 800b9aa:	d003      	beq.n	800b9b4 <__lo0bits+0x58>
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	4770      	bx	lr
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4770      	bx	lr
 800b9b4:	2020      	movs	r0, #32
 800b9b6:	4770      	bx	lr

0800b9b8 <__i2b>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	2101      	movs	r1, #1
 800b9be:	f7ff ff01 	bl	800b7c4 <_Balloc>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	b928      	cbnz	r0, 800b9d2 <__i2b+0x1a>
 800b9c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9ca:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <__i2b+0x24>)
 800b9cc:	4804      	ldr	r0, [pc, #16]	; (800b9e0 <__i2b+0x28>)
 800b9ce:	f000 fc9b 	bl	800c308 <__assert_func>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	6144      	str	r4, [r0, #20]
 800b9d6:	6103      	str	r3, [r0, #16]
 800b9d8:	bd10      	pop	{r4, pc}
 800b9da:	bf00      	nop
 800b9dc:	0800e1a3 	.word	0x0800e1a3
 800b9e0:	0800e1b4 	.word	0x0800e1b4

0800b9e4 <__multiply>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	690a      	ldr	r2, [r1, #16]
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	bfbe      	ittt	lt
 800b9f4:	460b      	movlt	r3, r1
 800b9f6:	4625      	movlt	r5, r4
 800b9f8:	461c      	movlt	r4, r3
 800b9fa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b9fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba02:	68ab      	ldr	r3, [r5, #8]
 800ba04:	6869      	ldr	r1, [r5, #4]
 800ba06:	eb0a 0709 	add.w	r7, sl, r9
 800ba0a:	42bb      	cmp	r3, r7
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	bfb8      	it	lt
 800ba10:	3101      	addlt	r1, #1
 800ba12:	f7ff fed7 	bl	800b7c4 <_Balloc>
 800ba16:	b930      	cbnz	r0, 800ba26 <__multiply+0x42>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f240 115d 	movw	r1, #349	; 0x15d
 800ba1e:	4b41      	ldr	r3, [pc, #260]	; (800bb24 <__multiply+0x140>)
 800ba20:	4841      	ldr	r0, [pc, #260]	; (800bb28 <__multiply+0x144>)
 800ba22:	f000 fc71 	bl	800c308 <__assert_func>
 800ba26:	f100 0614 	add.w	r6, r0, #20
 800ba2a:	4633      	mov	r3, r6
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba32:	4543      	cmp	r3, r8
 800ba34:	d31e      	bcc.n	800ba74 <__multiply+0x90>
 800ba36:	f105 0c14 	add.w	ip, r5, #20
 800ba3a:	f104 0314 	add.w	r3, r4, #20
 800ba3e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba42:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba46:	9202      	str	r2, [sp, #8]
 800ba48:	ebac 0205 	sub.w	r2, ip, r5
 800ba4c:	3a15      	subs	r2, #21
 800ba4e:	f022 0203 	bic.w	r2, r2, #3
 800ba52:	3204      	adds	r2, #4
 800ba54:	f105 0115 	add.w	r1, r5, #21
 800ba58:	458c      	cmp	ip, r1
 800ba5a:	bf38      	it	cc
 800ba5c:	2204      	movcc	r2, #4
 800ba5e:	9201      	str	r2, [sp, #4]
 800ba60:	9a02      	ldr	r2, [sp, #8]
 800ba62:	9303      	str	r3, [sp, #12]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d808      	bhi.n	800ba7a <__multiply+0x96>
 800ba68:	2f00      	cmp	r7, #0
 800ba6a:	dc55      	bgt.n	800bb18 <__multiply+0x134>
 800ba6c:	6107      	str	r7, [r0, #16]
 800ba6e:	b005      	add	sp, #20
 800ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	f843 2b04 	str.w	r2, [r3], #4
 800ba78:	e7db      	b.n	800ba32 <__multiply+0x4e>
 800ba7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba7e:	f1ba 0f00 	cmp.w	sl, #0
 800ba82:	d020      	beq.n	800bac6 <__multiply+0xe2>
 800ba84:	46b1      	mov	r9, r6
 800ba86:	2200      	movs	r2, #0
 800ba88:	f105 0e14 	add.w	lr, r5, #20
 800ba8c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba90:	f8d9 b000 	ldr.w	fp, [r9]
 800ba94:	b2a1      	uxth	r1, r4
 800ba96:	fa1f fb8b 	uxth.w	fp, fp
 800ba9a:	fb0a b101 	mla	r1, sl, r1, fp
 800ba9e:	4411      	add	r1, r2
 800baa0:	f8d9 2000 	ldr.w	r2, [r9]
 800baa4:	0c24      	lsrs	r4, r4, #16
 800baa6:	0c12      	lsrs	r2, r2, #16
 800baa8:	fb0a 2404 	mla	r4, sl, r4, r2
 800baac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bab0:	b289      	uxth	r1, r1
 800bab2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bab6:	45f4      	cmp	ip, lr
 800bab8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800babc:	f849 1b04 	str.w	r1, [r9], #4
 800bac0:	d8e4      	bhi.n	800ba8c <__multiply+0xa8>
 800bac2:	9901      	ldr	r1, [sp, #4]
 800bac4:	5072      	str	r2, [r6, r1]
 800bac6:	9a03      	ldr	r2, [sp, #12]
 800bac8:	3304      	adds	r3, #4
 800baca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bace:	f1b9 0f00 	cmp.w	r9, #0
 800bad2:	d01f      	beq.n	800bb14 <__multiply+0x130>
 800bad4:	46b6      	mov	lr, r6
 800bad6:	f04f 0a00 	mov.w	sl, #0
 800bada:	6834      	ldr	r4, [r6, #0]
 800badc:	f105 0114 	add.w	r1, r5, #20
 800bae0:	880a      	ldrh	r2, [r1, #0]
 800bae2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bae6:	b2a4      	uxth	r4, r4
 800bae8:	fb09 b202 	mla	r2, r9, r2, fp
 800baec:	4492      	add	sl, r2
 800baee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800baf2:	f84e 4b04 	str.w	r4, [lr], #4
 800baf6:	f851 4b04 	ldr.w	r4, [r1], #4
 800bafa:	f8be 2000 	ldrh.w	r2, [lr]
 800bafe:	0c24      	lsrs	r4, r4, #16
 800bb00:	fb09 2404 	mla	r4, r9, r4, r2
 800bb04:	458c      	cmp	ip, r1
 800bb06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bb0a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb0e:	d8e7      	bhi.n	800bae0 <__multiply+0xfc>
 800bb10:	9a01      	ldr	r2, [sp, #4]
 800bb12:	50b4      	str	r4, [r6, r2]
 800bb14:	3604      	adds	r6, #4
 800bb16:	e7a3      	b.n	800ba60 <__multiply+0x7c>
 800bb18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1a5      	bne.n	800ba6c <__multiply+0x88>
 800bb20:	3f01      	subs	r7, #1
 800bb22:	e7a1      	b.n	800ba68 <__multiply+0x84>
 800bb24:	0800e1a3 	.word	0x0800e1a3
 800bb28:	0800e1b4 	.word	0x0800e1b4

0800bb2c <__pow5mult>:
 800bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb30:	4615      	mov	r5, r2
 800bb32:	f012 0203 	ands.w	r2, r2, #3
 800bb36:	4606      	mov	r6, r0
 800bb38:	460f      	mov	r7, r1
 800bb3a:	d007      	beq.n	800bb4c <__pow5mult+0x20>
 800bb3c:	4c25      	ldr	r4, [pc, #148]	; (800bbd4 <__pow5mult+0xa8>)
 800bb3e:	3a01      	subs	r2, #1
 800bb40:	2300      	movs	r3, #0
 800bb42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb46:	f7ff fe9f 	bl	800b888 <__multadd>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	10ad      	asrs	r5, r5, #2
 800bb4e:	d03d      	beq.n	800bbcc <__pow5mult+0xa0>
 800bb50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb52:	b97c      	cbnz	r4, 800bb74 <__pow5mult+0x48>
 800bb54:	2010      	movs	r0, #16
 800bb56:	f7ff fe11 	bl	800b77c <malloc>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb5e:	b928      	cbnz	r0, 800bb6c <__pow5mult+0x40>
 800bb60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb64:	4b1c      	ldr	r3, [pc, #112]	; (800bbd8 <__pow5mult+0xac>)
 800bb66:	481d      	ldr	r0, [pc, #116]	; (800bbdc <__pow5mult+0xb0>)
 800bb68:	f000 fbce 	bl	800c308 <__assert_func>
 800bb6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb70:	6004      	str	r4, [r0, #0]
 800bb72:	60c4      	str	r4, [r0, #12]
 800bb74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb7c:	b94c      	cbnz	r4, 800bb92 <__pow5mult+0x66>
 800bb7e:	f240 2171 	movw	r1, #625	; 0x271
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff18 	bl	800b9b8 <__i2b>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	f04f 0900 	mov.w	r9, #0
 800bb96:	07eb      	lsls	r3, r5, #31
 800bb98:	d50a      	bpl.n	800bbb0 <__pow5mult+0x84>
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f7ff ff20 	bl	800b9e4 <__multiply>
 800bba4:	4680      	mov	r8, r0
 800bba6:	4639      	mov	r1, r7
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fe4b 	bl	800b844 <_Bfree>
 800bbae:	4647      	mov	r7, r8
 800bbb0:	106d      	asrs	r5, r5, #1
 800bbb2:	d00b      	beq.n	800bbcc <__pow5mult+0xa0>
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	b938      	cbnz	r0, 800bbc8 <__pow5mult+0x9c>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7ff ff11 	bl	800b9e4 <__multiply>
 800bbc2:	6020      	str	r0, [r4, #0]
 800bbc4:	f8c0 9000 	str.w	r9, [r0]
 800bbc8:	4604      	mov	r4, r0
 800bbca:	e7e4      	b.n	800bb96 <__pow5mult+0x6a>
 800bbcc:	4638      	mov	r0, r7
 800bbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800e308 	.word	0x0800e308
 800bbd8:	0800e12d 	.word	0x0800e12d
 800bbdc:	0800e1b4 	.word	0x0800e1b4

0800bbe0 <__lshift>:
 800bbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	4691      	mov	r9, r2
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	6849      	ldr	r1, [r1, #4]
 800bbee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbf8:	f108 0601 	add.w	r6, r8, #1
 800bbfc:	42b3      	cmp	r3, r6
 800bbfe:	db0b      	blt.n	800bc18 <__lshift+0x38>
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff fddf 	bl	800b7c4 <_Balloc>
 800bc06:	4605      	mov	r5, r0
 800bc08:	b948      	cbnz	r0, 800bc1e <__lshift+0x3e>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc10:	4b27      	ldr	r3, [pc, #156]	; (800bcb0 <__lshift+0xd0>)
 800bc12:	4828      	ldr	r0, [pc, #160]	; (800bcb4 <__lshift+0xd4>)
 800bc14:	f000 fb78 	bl	800c308 <__assert_func>
 800bc18:	3101      	adds	r1, #1
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	e7ee      	b.n	800bbfc <__lshift+0x1c>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f100 0114 	add.w	r1, r0, #20
 800bc24:	f100 0210 	add.w	r2, r0, #16
 800bc28:	4618      	mov	r0, r3
 800bc2a:	4553      	cmp	r3, sl
 800bc2c:	db33      	blt.n	800bc96 <__lshift+0xb6>
 800bc2e:	6920      	ldr	r0, [r4, #16]
 800bc30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc34:	f104 0314 	add.w	r3, r4, #20
 800bc38:	f019 091f 	ands.w	r9, r9, #31
 800bc3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc44:	d02b      	beq.n	800bc9e <__lshift+0xbe>
 800bc46:	468a      	mov	sl, r1
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc4e:	6818      	ldr	r0, [r3, #0]
 800bc50:	fa00 f009 	lsl.w	r0, r0, r9
 800bc54:	4302      	orrs	r2, r0
 800bc56:	f84a 2b04 	str.w	r2, [sl], #4
 800bc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5e:	459c      	cmp	ip, r3
 800bc60:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc64:	d8f3      	bhi.n	800bc4e <__lshift+0x6e>
 800bc66:	ebac 0304 	sub.w	r3, ip, r4
 800bc6a:	3b15      	subs	r3, #21
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	3304      	adds	r3, #4
 800bc72:	f104 0015 	add.w	r0, r4, #21
 800bc76:	4584      	cmp	ip, r0
 800bc78:	bf38      	it	cc
 800bc7a:	2304      	movcc	r3, #4
 800bc7c:	50ca      	str	r2, [r1, r3]
 800bc7e:	b10a      	cbz	r2, 800bc84 <__lshift+0xa4>
 800bc80:	f108 0602 	add.w	r6, r8, #2
 800bc84:	3e01      	subs	r6, #1
 800bc86:	4638      	mov	r0, r7
 800bc88:	4621      	mov	r1, r4
 800bc8a:	612e      	str	r6, [r5, #16]
 800bc8c:	f7ff fdda 	bl	800b844 <_Bfree>
 800bc90:	4628      	mov	r0, r5
 800bc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc96:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	e7c5      	b.n	800bc2a <__lshift+0x4a>
 800bc9e:	3904      	subs	r1, #4
 800bca0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca4:	459c      	cmp	ip, r3
 800bca6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcaa:	d8f9      	bhi.n	800bca0 <__lshift+0xc0>
 800bcac:	e7ea      	b.n	800bc84 <__lshift+0xa4>
 800bcae:	bf00      	nop
 800bcb0:	0800e1a3 	.word	0x0800e1a3
 800bcb4:	0800e1b4 	.word	0x0800e1b4

0800bcb8 <__mcmp>:
 800bcb8:	4603      	mov	r3, r0
 800bcba:	690a      	ldr	r2, [r1, #16]
 800bcbc:	6900      	ldr	r0, [r0, #16]
 800bcbe:	b530      	push	{r4, r5, lr}
 800bcc0:	1a80      	subs	r0, r0, r2
 800bcc2:	d10d      	bne.n	800bce0 <__mcmp+0x28>
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	3114      	adds	r1, #20
 800bcc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bccc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcd8:	4295      	cmp	r5, r2
 800bcda:	d002      	beq.n	800bce2 <__mcmp+0x2a>
 800bcdc:	d304      	bcc.n	800bce8 <__mcmp+0x30>
 800bcde:	2001      	movs	r0, #1
 800bce0:	bd30      	pop	{r4, r5, pc}
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	d3f4      	bcc.n	800bcd0 <__mcmp+0x18>
 800bce6:	e7fb      	b.n	800bce0 <__mcmp+0x28>
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcec:	e7f8      	b.n	800bce0 <__mcmp+0x28>
	...

0800bcf0 <__mdiff>:
 800bcf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4692      	mov	sl, r2
 800bcfe:	f7ff ffdb 	bl	800bcb8 <__mcmp>
 800bd02:	1e05      	subs	r5, r0, #0
 800bd04:	d111      	bne.n	800bd2a <__mdiff+0x3a>
 800bd06:	4629      	mov	r1, r5
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fd5b 	bl	800b7c4 <_Balloc>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	b928      	cbnz	r0, 800bd1e <__mdiff+0x2e>
 800bd12:	f240 2132 	movw	r1, #562	; 0x232
 800bd16:	4b3c      	ldr	r3, [pc, #240]	; (800be08 <__mdiff+0x118>)
 800bd18:	483c      	ldr	r0, [pc, #240]	; (800be0c <__mdiff+0x11c>)
 800bd1a:	f000 faf5 	bl	800c308 <__assert_func>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd24:	4610      	mov	r0, r2
 800bd26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2a:	bfa4      	itt	ge
 800bd2c:	4653      	movge	r3, sl
 800bd2e:	46a2      	movge	sl, r4
 800bd30:	4630      	mov	r0, r6
 800bd32:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bd36:	bfa6      	itte	ge
 800bd38:	461c      	movge	r4, r3
 800bd3a:	2500      	movge	r5, #0
 800bd3c:	2501      	movlt	r5, #1
 800bd3e:	f7ff fd41 	bl	800b7c4 <_Balloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	b918      	cbnz	r0, 800bd4e <__mdiff+0x5e>
 800bd46:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd4a:	4b2f      	ldr	r3, [pc, #188]	; (800be08 <__mdiff+0x118>)
 800bd4c:	e7e4      	b.n	800bd18 <__mdiff+0x28>
 800bd4e:	f100 0814 	add.w	r8, r0, #20
 800bd52:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bd56:	60c5      	str	r5, [r0, #12]
 800bd58:	f04f 0c00 	mov.w	ip, #0
 800bd5c:	f10a 0514 	add.w	r5, sl, #20
 800bd60:	f10a 0010 	add.w	r0, sl, #16
 800bd64:	46c2      	mov	sl, r8
 800bd66:	6926      	ldr	r6, [r4, #16]
 800bd68:	f104 0914 	add.w	r9, r4, #20
 800bd6c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bd70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd74:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bd78:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd7c:	fa1f f18b 	uxth.w	r1, fp
 800bd80:	4461      	add	r1, ip
 800bd82:	fa1f fc83 	uxth.w	ip, r3
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	eba1 010c 	sub.w	r1, r1, ip
 800bd8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bd94:	b289      	uxth	r1, r1
 800bd96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bd9a:	454e      	cmp	r6, r9
 800bd9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bda0:	f84a 3b04 	str.w	r3, [sl], #4
 800bda4:	d8e6      	bhi.n	800bd74 <__mdiff+0x84>
 800bda6:	1b33      	subs	r3, r6, r4
 800bda8:	3b15      	subs	r3, #21
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	3415      	adds	r4, #21
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	42a6      	cmp	r6, r4
 800bdb4:	bf38      	it	cc
 800bdb6:	2304      	movcc	r3, #4
 800bdb8:	441d      	add	r5, r3
 800bdba:	4443      	add	r3, r8
 800bdbc:	461e      	mov	r6, r3
 800bdbe:	462c      	mov	r4, r5
 800bdc0:	4574      	cmp	r4, lr
 800bdc2:	d30e      	bcc.n	800bde2 <__mdiff+0xf2>
 800bdc4:	f10e 0103 	add.w	r1, lr, #3
 800bdc8:	1b49      	subs	r1, r1, r5
 800bdca:	f021 0103 	bic.w	r1, r1, #3
 800bdce:	3d03      	subs	r5, #3
 800bdd0:	45ae      	cmp	lr, r5
 800bdd2:	bf38      	it	cc
 800bdd4:	2100      	movcc	r1, #0
 800bdd6:	4419      	add	r1, r3
 800bdd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bddc:	b18b      	cbz	r3, 800be02 <__mdiff+0x112>
 800bdde:	6117      	str	r7, [r2, #16]
 800bde0:	e7a0      	b.n	800bd24 <__mdiff+0x34>
 800bde2:	f854 8b04 	ldr.w	r8, [r4], #4
 800bde6:	fa1f f188 	uxth.w	r1, r8
 800bdea:	4461      	add	r1, ip
 800bdec:	1408      	asrs	r0, r1, #16
 800bdee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bdf2:	b289      	uxth	r1, r1
 800bdf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdfc:	f846 1b04 	str.w	r1, [r6], #4
 800be00:	e7de      	b.n	800bdc0 <__mdiff+0xd0>
 800be02:	3f01      	subs	r7, #1
 800be04:	e7e8      	b.n	800bdd8 <__mdiff+0xe8>
 800be06:	bf00      	nop
 800be08:	0800e1a3 	.word	0x0800e1a3
 800be0c:	0800e1b4 	.word	0x0800e1b4

0800be10 <__d2b>:
 800be10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800be14:	2101      	movs	r1, #1
 800be16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800be1a:	4690      	mov	r8, r2
 800be1c:	461d      	mov	r5, r3
 800be1e:	f7ff fcd1 	bl	800b7c4 <_Balloc>
 800be22:	4604      	mov	r4, r0
 800be24:	b930      	cbnz	r0, 800be34 <__d2b+0x24>
 800be26:	4602      	mov	r2, r0
 800be28:	f240 310a 	movw	r1, #778	; 0x30a
 800be2c:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <__d2b+0xb0>)
 800be2e:	4825      	ldr	r0, [pc, #148]	; (800bec4 <__d2b+0xb4>)
 800be30:	f000 fa6a 	bl	800c308 <__assert_func>
 800be34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800be38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800be3c:	bb2d      	cbnz	r5, 800be8a <__d2b+0x7a>
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	f1b8 0300 	subs.w	r3, r8, #0
 800be44:	d026      	beq.n	800be94 <__d2b+0x84>
 800be46:	4668      	mov	r0, sp
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	f7ff fd87 	bl	800b95c <__lo0bits>
 800be4e:	9900      	ldr	r1, [sp, #0]
 800be50:	b1f0      	cbz	r0, 800be90 <__d2b+0x80>
 800be52:	9a01      	ldr	r2, [sp, #4]
 800be54:	f1c0 0320 	rsb	r3, r0, #32
 800be58:	fa02 f303 	lsl.w	r3, r2, r3
 800be5c:	430b      	orrs	r3, r1
 800be5e:	40c2      	lsrs	r2, r0
 800be60:	6163      	str	r3, [r4, #20]
 800be62:	9201      	str	r2, [sp, #4]
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	bf14      	ite	ne
 800be6a:	2102      	movne	r1, #2
 800be6c:	2101      	moveq	r1, #1
 800be6e:	61a3      	str	r3, [r4, #24]
 800be70:	6121      	str	r1, [r4, #16]
 800be72:	b1c5      	cbz	r5, 800bea6 <__d2b+0x96>
 800be74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be78:	4405      	add	r5, r0
 800be7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be7e:	603d      	str	r5, [r7, #0]
 800be80:	6030      	str	r0, [r6, #0]
 800be82:	4620      	mov	r0, r4
 800be84:	b002      	add	sp, #8
 800be86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be8e:	e7d6      	b.n	800be3e <__d2b+0x2e>
 800be90:	6161      	str	r1, [r4, #20]
 800be92:	e7e7      	b.n	800be64 <__d2b+0x54>
 800be94:	a801      	add	r0, sp, #4
 800be96:	f7ff fd61 	bl	800b95c <__lo0bits>
 800be9a:	2101      	movs	r1, #1
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	6121      	str	r1, [r4, #16]
 800bea0:	6163      	str	r3, [r4, #20]
 800bea2:	3020      	adds	r0, #32
 800bea4:	e7e5      	b.n	800be72 <__d2b+0x62>
 800bea6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800beaa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800beae:	6038      	str	r0, [r7, #0]
 800beb0:	6918      	ldr	r0, [r3, #16]
 800beb2:	f7ff fd33 	bl	800b91c <__hi0bits>
 800beb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800beba:	6031      	str	r1, [r6, #0]
 800bebc:	e7e1      	b.n	800be82 <__d2b+0x72>
 800bebe:	bf00      	nop
 800bec0:	0800e1a3 	.word	0x0800e1a3
 800bec4:	0800e1b4 	.word	0x0800e1b4

0800bec8 <_calloc_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	fb02 f501 	mul.w	r5, r2, r1
 800bece:	4629      	mov	r1, r5
 800bed0:	f000 f854 	bl	800bf7c <_malloc_r>
 800bed4:	4604      	mov	r4, r0
 800bed6:	b118      	cbz	r0, 800bee0 <_calloc_r+0x18>
 800bed8:	462a      	mov	r2, r5
 800beda:	2100      	movs	r1, #0
 800bedc:	f7fe f934 	bl	800a148 <memset>
 800bee0:	4620      	mov	r0, r4
 800bee2:	bd38      	pop	{r3, r4, r5, pc}

0800bee4 <_free_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4605      	mov	r5, r0
 800bee8:	2900      	cmp	r1, #0
 800beea:	d043      	beq.n	800bf74 <_free_r+0x90>
 800beec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef0:	1f0c      	subs	r4, r1, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bfb8      	it	lt
 800bef6:	18e4      	addlt	r4, r4, r3
 800bef8:	f000 fa62 	bl	800c3c0 <__malloc_lock>
 800befc:	4a1e      	ldr	r2, [pc, #120]	; (800bf78 <_free_r+0x94>)
 800befe:	6813      	ldr	r3, [r2, #0]
 800bf00:	4610      	mov	r0, r2
 800bf02:	b933      	cbnz	r3, 800bf12 <_free_r+0x2e>
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	6014      	str	r4, [r2, #0]
 800bf08:	4628      	mov	r0, r5
 800bf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf0e:	f000 ba5d 	b.w	800c3cc <__malloc_unlock>
 800bf12:	42a3      	cmp	r3, r4
 800bf14:	d90a      	bls.n	800bf2c <_free_r+0x48>
 800bf16:	6821      	ldr	r1, [r4, #0]
 800bf18:	1862      	adds	r2, r4, r1
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	bf01      	itttt	eq
 800bf1e:	681a      	ldreq	r2, [r3, #0]
 800bf20:	685b      	ldreq	r3, [r3, #4]
 800bf22:	1852      	addeq	r2, r2, r1
 800bf24:	6022      	streq	r2, [r4, #0]
 800bf26:	6063      	str	r3, [r4, #4]
 800bf28:	6004      	str	r4, [r0, #0]
 800bf2a:	e7ed      	b.n	800bf08 <_free_r+0x24>
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	b10b      	cbz	r3, 800bf36 <_free_r+0x52>
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	d9fa      	bls.n	800bf2c <_free_r+0x48>
 800bf36:	6811      	ldr	r1, [r2, #0]
 800bf38:	1850      	adds	r0, r2, r1
 800bf3a:	42a0      	cmp	r0, r4
 800bf3c:	d10b      	bne.n	800bf56 <_free_r+0x72>
 800bf3e:	6820      	ldr	r0, [r4, #0]
 800bf40:	4401      	add	r1, r0
 800bf42:	1850      	adds	r0, r2, r1
 800bf44:	4283      	cmp	r3, r0
 800bf46:	6011      	str	r1, [r2, #0]
 800bf48:	d1de      	bne.n	800bf08 <_free_r+0x24>
 800bf4a:	6818      	ldr	r0, [r3, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4401      	add	r1, r0
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	6053      	str	r3, [r2, #4]
 800bf54:	e7d8      	b.n	800bf08 <_free_r+0x24>
 800bf56:	d902      	bls.n	800bf5e <_free_r+0x7a>
 800bf58:	230c      	movs	r3, #12
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	e7d4      	b.n	800bf08 <_free_r+0x24>
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	1821      	adds	r1, r4, r0
 800bf62:	428b      	cmp	r3, r1
 800bf64:	bf01      	itttt	eq
 800bf66:	6819      	ldreq	r1, [r3, #0]
 800bf68:	685b      	ldreq	r3, [r3, #4]
 800bf6a:	1809      	addeq	r1, r1, r0
 800bf6c:	6021      	streq	r1, [r4, #0]
 800bf6e:	6063      	str	r3, [r4, #4]
 800bf70:	6054      	str	r4, [r2, #4]
 800bf72:	e7c9      	b.n	800bf08 <_free_r+0x24>
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	bf00      	nop
 800bf78:	20000590 	.word	0x20000590

0800bf7c <_malloc_r>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	1ccd      	adds	r5, r1, #3
 800bf80:	f025 0503 	bic.w	r5, r5, #3
 800bf84:	3508      	adds	r5, #8
 800bf86:	2d0c      	cmp	r5, #12
 800bf88:	bf38      	it	cc
 800bf8a:	250c      	movcc	r5, #12
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	4606      	mov	r6, r0
 800bf90:	db01      	blt.n	800bf96 <_malloc_r+0x1a>
 800bf92:	42a9      	cmp	r1, r5
 800bf94:	d903      	bls.n	800bf9e <_malloc_r+0x22>
 800bf96:	230c      	movs	r3, #12
 800bf98:	6033      	str	r3, [r6, #0]
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9e:	f000 fa0f 	bl	800c3c0 <__malloc_lock>
 800bfa2:	4921      	ldr	r1, [pc, #132]	; (800c028 <_malloc_r+0xac>)
 800bfa4:	680a      	ldr	r2, [r1, #0]
 800bfa6:	4614      	mov	r4, r2
 800bfa8:	b99c      	cbnz	r4, 800bfd2 <_malloc_r+0x56>
 800bfaa:	4f20      	ldr	r7, [pc, #128]	; (800c02c <_malloc_r+0xb0>)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	b923      	cbnz	r3, 800bfba <_malloc_r+0x3e>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f000 f998 	bl	800c2e8 <_sbrk_r>
 800bfb8:	6038      	str	r0, [r7, #0]
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f000 f993 	bl	800c2e8 <_sbrk_r>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d123      	bne.n	800c00e <_malloc_r+0x92>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	4630      	mov	r0, r6
 800bfca:	6033      	str	r3, [r6, #0]
 800bfcc:	f000 f9fe 	bl	800c3cc <__malloc_unlock>
 800bfd0:	e7e3      	b.n	800bf9a <_malloc_r+0x1e>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	1b5b      	subs	r3, r3, r5
 800bfd6:	d417      	bmi.n	800c008 <_malloc_r+0x8c>
 800bfd8:	2b0b      	cmp	r3, #11
 800bfda:	d903      	bls.n	800bfe4 <_malloc_r+0x68>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	441c      	add	r4, r3
 800bfe0:	6025      	str	r5, [r4, #0]
 800bfe2:	e004      	b.n	800bfee <_malloc_r+0x72>
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	42a2      	cmp	r2, r4
 800bfe8:	bf0c      	ite	eq
 800bfea:	600b      	streq	r3, [r1, #0]
 800bfec:	6053      	strne	r3, [r2, #4]
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 f9ec 	bl	800c3cc <__malloc_unlock>
 800bff4:	f104 000b 	add.w	r0, r4, #11
 800bff8:	1d23      	adds	r3, r4, #4
 800bffa:	f020 0007 	bic.w	r0, r0, #7
 800bffe:	1ac2      	subs	r2, r0, r3
 800c000:	d0cc      	beq.n	800bf9c <_malloc_r+0x20>
 800c002:	1a1b      	subs	r3, r3, r0
 800c004:	50a3      	str	r3, [r4, r2]
 800c006:	e7c9      	b.n	800bf9c <_malloc_r+0x20>
 800c008:	4622      	mov	r2, r4
 800c00a:	6864      	ldr	r4, [r4, #4]
 800c00c:	e7cc      	b.n	800bfa8 <_malloc_r+0x2c>
 800c00e:	1cc4      	adds	r4, r0, #3
 800c010:	f024 0403 	bic.w	r4, r4, #3
 800c014:	42a0      	cmp	r0, r4
 800c016:	d0e3      	beq.n	800bfe0 <_malloc_r+0x64>
 800c018:	1a21      	subs	r1, r4, r0
 800c01a:	4630      	mov	r0, r6
 800c01c:	f000 f964 	bl	800c2e8 <_sbrk_r>
 800c020:	3001      	adds	r0, #1
 800c022:	d1dd      	bne.n	800bfe0 <_malloc_r+0x64>
 800c024:	e7cf      	b.n	800bfc6 <_malloc_r+0x4a>
 800c026:	bf00      	nop
 800c028:	20000590 	.word	0x20000590
 800c02c:	20000594 	.word	0x20000594

0800c030 <__ssputs_r>:
 800c030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c034:	688e      	ldr	r6, [r1, #8]
 800c036:	4682      	mov	sl, r0
 800c038:	429e      	cmp	r6, r3
 800c03a:	460c      	mov	r4, r1
 800c03c:	4690      	mov	r8, r2
 800c03e:	461f      	mov	r7, r3
 800c040:	d838      	bhi.n	800c0b4 <__ssputs_r+0x84>
 800c042:	898a      	ldrh	r2, [r1, #12]
 800c044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c048:	d032      	beq.n	800c0b0 <__ssputs_r+0x80>
 800c04a:	6825      	ldr	r5, [r4, #0]
 800c04c:	6909      	ldr	r1, [r1, #16]
 800c04e:	3301      	adds	r3, #1
 800c050:	eba5 0901 	sub.w	r9, r5, r1
 800c054:	6965      	ldr	r5, [r4, #20]
 800c056:	444b      	add	r3, r9
 800c058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c060:	106d      	asrs	r5, r5, #1
 800c062:	429d      	cmp	r5, r3
 800c064:	bf38      	it	cc
 800c066:	461d      	movcc	r5, r3
 800c068:	0553      	lsls	r3, r2, #21
 800c06a:	d531      	bpl.n	800c0d0 <__ssputs_r+0xa0>
 800c06c:	4629      	mov	r1, r5
 800c06e:	f7ff ff85 	bl	800bf7c <_malloc_r>
 800c072:	4606      	mov	r6, r0
 800c074:	b950      	cbnz	r0, 800c08c <__ssputs_r+0x5c>
 800c076:	230c      	movs	r3, #12
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	f8ca 3000 	str.w	r3, [sl]
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08c:	464a      	mov	r2, r9
 800c08e:	6921      	ldr	r1, [r4, #16]
 800c090:	f7ff fb8a 	bl	800b7a8 <memcpy>
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09e:	81a3      	strh	r3, [r4, #12]
 800c0a0:	6126      	str	r6, [r4, #16]
 800c0a2:	444e      	add	r6, r9
 800c0a4:	6026      	str	r6, [r4, #0]
 800c0a6:	463e      	mov	r6, r7
 800c0a8:	6165      	str	r5, [r4, #20]
 800c0aa:	eba5 0509 	sub.w	r5, r5, r9
 800c0ae:	60a5      	str	r5, [r4, #8]
 800c0b0:	42be      	cmp	r6, r7
 800c0b2:	d900      	bls.n	800c0b6 <__ssputs_r+0x86>
 800c0b4:	463e      	mov	r6, r7
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	4641      	mov	r1, r8
 800c0ba:	6820      	ldr	r0, [r4, #0]
 800c0bc:	f000 f966 	bl	800c38c <memmove>
 800c0c0:	68a3      	ldr	r3, [r4, #8]
 800c0c2:	6822      	ldr	r2, [r4, #0]
 800c0c4:	1b9b      	subs	r3, r3, r6
 800c0c6:	4432      	add	r2, r6
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	60a3      	str	r3, [r4, #8]
 800c0cc:	6022      	str	r2, [r4, #0]
 800c0ce:	e7db      	b.n	800c088 <__ssputs_r+0x58>
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	f000 f981 	bl	800c3d8 <_realloc_r>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1e1      	bne.n	800c0a0 <__ssputs_r+0x70>
 800c0dc:	4650      	mov	r0, sl
 800c0de:	6921      	ldr	r1, [r4, #16]
 800c0e0:	f7ff ff00 	bl	800bee4 <_free_r>
 800c0e4:	e7c7      	b.n	800c076 <__ssputs_r+0x46>
	...

0800c0e8 <_svfiprintf_r>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4698      	mov	r8, r3
 800c0ee:	898b      	ldrh	r3, [r1, #12]
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	061b      	lsls	r3, r3, #24
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	4614      	mov	r4, r2
 800c0f8:	b09d      	sub	sp, #116	; 0x74
 800c0fa:	d50e      	bpl.n	800c11a <_svfiprintf_r+0x32>
 800c0fc:	690b      	ldr	r3, [r1, #16]
 800c0fe:	b963      	cbnz	r3, 800c11a <_svfiprintf_r+0x32>
 800c100:	2140      	movs	r1, #64	; 0x40
 800c102:	f7ff ff3b 	bl	800bf7c <_malloc_r>
 800c106:	6028      	str	r0, [r5, #0]
 800c108:	6128      	str	r0, [r5, #16]
 800c10a:	b920      	cbnz	r0, 800c116 <_svfiprintf_r+0x2e>
 800c10c:	230c      	movs	r3, #12
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	f04f 30ff 	mov.w	r0, #4294967295
 800c114:	e0d1      	b.n	800c2ba <_svfiprintf_r+0x1d2>
 800c116:	2340      	movs	r3, #64	; 0x40
 800c118:	616b      	str	r3, [r5, #20]
 800c11a:	2300      	movs	r3, #0
 800c11c:	9309      	str	r3, [sp, #36]	; 0x24
 800c11e:	2320      	movs	r3, #32
 800c120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c124:	2330      	movs	r3, #48	; 0x30
 800c126:	f04f 0901 	mov.w	r9, #1
 800c12a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c12e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2d4 <_svfiprintf_r+0x1ec>
 800c132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c136:	4623      	mov	r3, r4
 800c138:	469a      	mov	sl, r3
 800c13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c13e:	b10a      	cbz	r2, 800c144 <_svfiprintf_r+0x5c>
 800c140:	2a25      	cmp	r2, #37	; 0x25
 800c142:	d1f9      	bne.n	800c138 <_svfiprintf_r+0x50>
 800c144:	ebba 0b04 	subs.w	fp, sl, r4
 800c148:	d00b      	beq.n	800c162 <_svfiprintf_r+0x7a>
 800c14a:	465b      	mov	r3, fp
 800c14c:	4622      	mov	r2, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	4638      	mov	r0, r7
 800c152:	f7ff ff6d 	bl	800c030 <__ssputs_r>
 800c156:	3001      	adds	r0, #1
 800c158:	f000 80aa 	beq.w	800c2b0 <_svfiprintf_r+0x1c8>
 800c15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c15e:	445a      	add	r2, fp
 800c160:	9209      	str	r2, [sp, #36]	; 0x24
 800c162:	f89a 3000 	ldrb.w	r3, [sl]
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 80a2 	beq.w	800c2b0 <_svfiprintf_r+0x1c8>
 800c16c:	2300      	movs	r3, #0
 800c16e:	f04f 32ff 	mov.w	r2, #4294967295
 800c172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c176:	f10a 0a01 	add.w	sl, sl, #1
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	9307      	str	r3, [sp, #28]
 800c17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c182:	931a      	str	r3, [sp, #104]	; 0x68
 800c184:	4654      	mov	r4, sl
 800c186:	2205      	movs	r2, #5
 800c188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18c:	4851      	ldr	r0, [pc, #324]	; (800c2d4 <_svfiprintf_r+0x1ec>)
 800c18e:	f7ff fafd 	bl	800b78c <memchr>
 800c192:	9a04      	ldr	r2, [sp, #16]
 800c194:	b9d8      	cbnz	r0, 800c1ce <_svfiprintf_r+0xe6>
 800c196:	06d0      	lsls	r0, r2, #27
 800c198:	bf44      	itt	mi
 800c19a:	2320      	movmi	r3, #32
 800c19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1a0:	0711      	lsls	r1, r2, #28
 800c1a2:	bf44      	itt	mi
 800c1a4:	232b      	movmi	r3, #43	; 0x2b
 800c1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b0:	d015      	beq.n	800c1de <_svfiprintf_r+0xf6>
 800c1b2:	4654      	mov	r4, sl
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	f04f 0c0a 	mov.w	ip, #10
 800c1ba:	9a07      	ldr	r2, [sp, #28]
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1c2:	3b30      	subs	r3, #48	; 0x30
 800c1c4:	2b09      	cmp	r3, #9
 800c1c6:	d94e      	bls.n	800c266 <_svfiprintf_r+0x17e>
 800c1c8:	b1b0      	cbz	r0, 800c1f8 <_svfiprintf_r+0x110>
 800c1ca:	9207      	str	r2, [sp, #28]
 800c1cc:	e014      	b.n	800c1f8 <_svfiprintf_r+0x110>
 800c1ce:	eba0 0308 	sub.w	r3, r0, r8
 800c1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	46a2      	mov	sl, r4
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	e7d2      	b.n	800c184 <_svfiprintf_r+0x9c>
 800c1de:	9b03      	ldr	r3, [sp, #12]
 800c1e0:	1d19      	adds	r1, r3, #4
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	9103      	str	r1, [sp, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bfbb      	ittet	lt
 800c1ea:	425b      	neglt	r3, r3
 800c1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c1f0:	9307      	strge	r3, [sp, #28]
 800c1f2:	9307      	strlt	r3, [sp, #28]
 800c1f4:	bfb8      	it	lt
 800c1f6:	9204      	strlt	r2, [sp, #16]
 800c1f8:	7823      	ldrb	r3, [r4, #0]
 800c1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c1fc:	d10c      	bne.n	800c218 <_svfiprintf_r+0x130>
 800c1fe:	7863      	ldrb	r3, [r4, #1]
 800c200:	2b2a      	cmp	r3, #42	; 0x2a
 800c202:	d135      	bne.n	800c270 <_svfiprintf_r+0x188>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	3402      	adds	r4, #2
 800c208:	1d1a      	adds	r2, r3, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	9203      	str	r2, [sp, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfb8      	it	lt
 800c212:	f04f 33ff 	movlt.w	r3, #4294967295
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2e4 <_svfiprintf_r+0x1fc>
 800c21c:	2203      	movs	r2, #3
 800c21e:	4650      	mov	r0, sl
 800c220:	7821      	ldrb	r1, [r4, #0]
 800c222:	f7ff fab3 	bl	800b78c <memchr>
 800c226:	b140      	cbz	r0, 800c23a <_svfiprintf_r+0x152>
 800c228:	2340      	movs	r3, #64	; 0x40
 800c22a:	eba0 000a 	sub.w	r0, r0, sl
 800c22e:	fa03 f000 	lsl.w	r0, r3, r0
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	3401      	adds	r4, #1
 800c236:	4303      	orrs	r3, r0
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c23e:	2206      	movs	r2, #6
 800c240:	4825      	ldr	r0, [pc, #148]	; (800c2d8 <_svfiprintf_r+0x1f0>)
 800c242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c246:	f7ff faa1 	bl	800b78c <memchr>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d038      	beq.n	800c2c0 <_svfiprintf_r+0x1d8>
 800c24e:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <_svfiprintf_r+0x1f4>)
 800c250:	bb1b      	cbnz	r3, 800c29a <_svfiprintf_r+0x1b2>
 800c252:	9b03      	ldr	r3, [sp, #12]
 800c254:	3307      	adds	r3, #7
 800c256:	f023 0307 	bic.w	r3, r3, #7
 800c25a:	3308      	adds	r3, #8
 800c25c:	9303      	str	r3, [sp, #12]
 800c25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c260:	4433      	add	r3, r6
 800c262:	9309      	str	r3, [sp, #36]	; 0x24
 800c264:	e767      	b.n	800c136 <_svfiprintf_r+0x4e>
 800c266:	460c      	mov	r4, r1
 800c268:	2001      	movs	r0, #1
 800c26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c26e:	e7a5      	b.n	800c1bc <_svfiprintf_r+0xd4>
 800c270:	2300      	movs	r3, #0
 800c272:	f04f 0c0a 	mov.w	ip, #10
 800c276:	4619      	mov	r1, r3
 800c278:	3401      	adds	r4, #1
 800c27a:	9305      	str	r3, [sp, #20]
 800c27c:	4620      	mov	r0, r4
 800c27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c282:	3a30      	subs	r2, #48	; 0x30
 800c284:	2a09      	cmp	r2, #9
 800c286:	d903      	bls.n	800c290 <_svfiprintf_r+0x1a8>
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d0c5      	beq.n	800c218 <_svfiprintf_r+0x130>
 800c28c:	9105      	str	r1, [sp, #20]
 800c28e:	e7c3      	b.n	800c218 <_svfiprintf_r+0x130>
 800c290:	4604      	mov	r4, r0
 800c292:	2301      	movs	r3, #1
 800c294:	fb0c 2101 	mla	r1, ip, r1, r2
 800c298:	e7f0      	b.n	800c27c <_svfiprintf_r+0x194>
 800c29a:	ab03      	add	r3, sp, #12
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	462a      	mov	r2, r5
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	4b0f      	ldr	r3, [pc, #60]	; (800c2e0 <_svfiprintf_r+0x1f8>)
 800c2a4:	a904      	add	r1, sp, #16
 800c2a6:	f7fd fff5 	bl	800a294 <_printf_float>
 800c2aa:	1c42      	adds	r2, r0, #1
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	d1d6      	bne.n	800c25e <_svfiprintf_r+0x176>
 800c2b0:	89ab      	ldrh	r3, [r5, #12]
 800c2b2:	065b      	lsls	r3, r3, #25
 800c2b4:	f53f af2c 	bmi.w	800c110 <_svfiprintf_r+0x28>
 800c2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ba:	b01d      	add	sp, #116	; 0x74
 800c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c0:	ab03      	add	r3, sp, #12
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	462a      	mov	r2, r5
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <_svfiprintf_r+0x1f8>)
 800c2ca:	a904      	add	r1, sp, #16
 800c2cc:	f7fe fa7e 	bl	800a7cc <_printf_i>
 800c2d0:	e7eb      	b.n	800c2aa <_svfiprintf_r+0x1c2>
 800c2d2:	bf00      	nop
 800c2d4:	0800e314 	.word	0x0800e314
 800c2d8:	0800e31e 	.word	0x0800e31e
 800c2dc:	0800a295 	.word	0x0800a295
 800c2e0:	0800c031 	.word	0x0800c031
 800c2e4:	0800e31a 	.word	0x0800e31a

0800c2e8 <_sbrk_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4d05      	ldr	r5, [pc, #20]	; (800c304 <_sbrk_r+0x1c>)
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f7 faa6 	bl	8003844 <_sbrk>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_sbrk_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_sbrk_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	200023ac 	.word	0x200023ac

0800c308 <__assert_func>:
 800c308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c30a:	4614      	mov	r4, r2
 800c30c:	461a      	mov	r2, r3
 800c30e:	4b09      	ldr	r3, [pc, #36]	; (800c334 <__assert_func+0x2c>)
 800c310:	4605      	mov	r5, r0
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68d8      	ldr	r0, [r3, #12]
 800c316:	b14c      	cbz	r4, 800c32c <__assert_func+0x24>
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <__assert_func+0x30>)
 800c31a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c31e:	9100      	str	r1, [sp, #0]
 800c320:	462b      	mov	r3, r5
 800c322:	4906      	ldr	r1, [pc, #24]	; (800c33c <__assert_func+0x34>)
 800c324:	f000 f80e 	bl	800c344 <fiprintf>
 800c328:	f000 faa2 	bl	800c870 <abort>
 800c32c:	4b04      	ldr	r3, [pc, #16]	; (800c340 <__assert_func+0x38>)
 800c32e:	461c      	mov	r4, r3
 800c330:	e7f3      	b.n	800c31a <__assert_func+0x12>
 800c332:	bf00      	nop
 800c334:	200000c8 	.word	0x200000c8
 800c338:	0800e325 	.word	0x0800e325
 800c33c:	0800e332 	.word	0x0800e332
 800c340:	0800e360 	.word	0x0800e360

0800c344 <fiprintf>:
 800c344:	b40e      	push	{r1, r2, r3}
 800c346:	b503      	push	{r0, r1, lr}
 800c348:	4601      	mov	r1, r0
 800c34a:	ab03      	add	r3, sp, #12
 800c34c:	4805      	ldr	r0, [pc, #20]	; (800c364 <fiprintf+0x20>)
 800c34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c352:	6800      	ldr	r0, [r0, #0]
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	f000 f88d 	bl	800c474 <_vfiprintf_r>
 800c35a:	b002      	add	sp, #8
 800c35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c360:	b003      	add	sp, #12
 800c362:	4770      	bx	lr
 800c364:	200000c8 	.word	0x200000c8

0800c368 <__ascii_mbtowc>:
 800c368:	b082      	sub	sp, #8
 800c36a:	b901      	cbnz	r1, 800c36e <__ascii_mbtowc+0x6>
 800c36c:	a901      	add	r1, sp, #4
 800c36e:	b142      	cbz	r2, 800c382 <__ascii_mbtowc+0x1a>
 800c370:	b14b      	cbz	r3, 800c386 <__ascii_mbtowc+0x1e>
 800c372:	7813      	ldrb	r3, [r2, #0]
 800c374:	600b      	str	r3, [r1, #0]
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	1e10      	subs	r0, r2, #0
 800c37a:	bf18      	it	ne
 800c37c:	2001      	movne	r0, #1
 800c37e:	b002      	add	sp, #8
 800c380:	4770      	bx	lr
 800c382:	4610      	mov	r0, r2
 800c384:	e7fb      	b.n	800c37e <__ascii_mbtowc+0x16>
 800c386:	f06f 0001 	mvn.w	r0, #1
 800c38a:	e7f8      	b.n	800c37e <__ascii_mbtowc+0x16>

0800c38c <memmove>:
 800c38c:	4288      	cmp	r0, r1
 800c38e:	b510      	push	{r4, lr}
 800c390:	eb01 0402 	add.w	r4, r1, r2
 800c394:	d902      	bls.n	800c39c <memmove+0x10>
 800c396:	4284      	cmp	r4, r0
 800c398:	4623      	mov	r3, r4
 800c39a:	d807      	bhi.n	800c3ac <memmove+0x20>
 800c39c:	1e43      	subs	r3, r0, #1
 800c39e:	42a1      	cmp	r1, r4
 800c3a0:	d008      	beq.n	800c3b4 <memmove+0x28>
 800c3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3aa:	e7f8      	b.n	800c39e <memmove+0x12>
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	4402      	add	r2, r0
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	d100      	bne.n	800c3b6 <memmove+0x2a>
 800c3b4:	bd10      	pop	{r4, pc}
 800c3b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3be:	e7f7      	b.n	800c3b0 <memmove+0x24>

0800c3c0 <__malloc_lock>:
 800c3c0:	4801      	ldr	r0, [pc, #4]	; (800c3c8 <__malloc_lock+0x8>)
 800c3c2:	f000 bc15 	b.w	800cbf0 <__retarget_lock_acquire_recursive>
 800c3c6:	bf00      	nop
 800c3c8:	200023b4 	.word	0x200023b4

0800c3cc <__malloc_unlock>:
 800c3cc:	4801      	ldr	r0, [pc, #4]	; (800c3d4 <__malloc_unlock+0x8>)
 800c3ce:	f000 bc10 	b.w	800cbf2 <__retarget_lock_release_recursive>
 800c3d2:	bf00      	nop
 800c3d4:	200023b4 	.word	0x200023b4

0800c3d8 <_realloc_r>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	4607      	mov	r7, r0
 800c3dc:	4614      	mov	r4, r2
 800c3de:	460e      	mov	r6, r1
 800c3e0:	b921      	cbnz	r1, 800c3ec <_realloc_r+0x14>
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3e8:	f7ff bdc8 	b.w	800bf7c <_malloc_r>
 800c3ec:	b922      	cbnz	r2, 800c3f8 <_realloc_r+0x20>
 800c3ee:	f7ff fd79 	bl	800bee4 <_free_r>
 800c3f2:	4625      	mov	r5, r4
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f8:	f000 fc60 	bl	800ccbc <_malloc_usable_size_r>
 800c3fc:	42a0      	cmp	r0, r4
 800c3fe:	d20f      	bcs.n	800c420 <_realloc_r+0x48>
 800c400:	4621      	mov	r1, r4
 800c402:	4638      	mov	r0, r7
 800c404:	f7ff fdba 	bl	800bf7c <_malloc_r>
 800c408:	4605      	mov	r5, r0
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d0f2      	beq.n	800c3f4 <_realloc_r+0x1c>
 800c40e:	4631      	mov	r1, r6
 800c410:	4622      	mov	r2, r4
 800c412:	f7ff f9c9 	bl	800b7a8 <memcpy>
 800c416:	4631      	mov	r1, r6
 800c418:	4638      	mov	r0, r7
 800c41a:	f7ff fd63 	bl	800bee4 <_free_r>
 800c41e:	e7e9      	b.n	800c3f4 <_realloc_r+0x1c>
 800c420:	4635      	mov	r5, r6
 800c422:	e7e7      	b.n	800c3f4 <_realloc_r+0x1c>

0800c424 <__sfputc_r>:
 800c424:	6893      	ldr	r3, [r2, #8]
 800c426:	b410      	push	{r4}
 800c428:	3b01      	subs	r3, #1
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	6093      	str	r3, [r2, #8]
 800c42e:	da07      	bge.n	800c440 <__sfputc_r+0x1c>
 800c430:	6994      	ldr	r4, [r2, #24]
 800c432:	42a3      	cmp	r3, r4
 800c434:	db01      	blt.n	800c43a <__sfputc_r+0x16>
 800c436:	290a      	cmp	r1, #10
 800c438:	d102      	bne.n	800c440 <__sfputc_r+0x1c>
 800c43a:	bc10      	pop	{r4}
 800c43c:	f000 b94a 	b.w	800c6d4 <__swbuf_r>
 800c440:	6813      	ldr	r3, [r2, #0]
 800c442:	1c58      	adds	r0, r3, #1
 800c444:	6010      	str	r0, [r2, #0]
 800c446:	7019      	strb	r1, [r3, #0]
 800c448:	4608      	mov	r0, r1
 800c44a:	bc10      	pop	{r4}
 800c44c:	4770      	bx	lr

0800c44e <__sfputs_r>:
 800c44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c450:	4606      	mov	r6, r0
 800c452:	460f      	mov	r7, r1
 800c454:	4614      	mov	r4, r2
 800c456:	18d5      	adds	r5, r2, r3
 800c458:	42ac      	cmp	r4, r5
 800c45a:	d101      	bne.n	800c460 <__sfputs_r+0x12>
 800c45c:	2000      	movs	r0, #0
 800c45e:	e007      	b.n	800c470 <__sfputs_r+0x22>
 800c460:	463a      	mov	r2, r7
 800c462:	4630      	mov	r0, r6
 800c464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c468:	f7ff ffdc 	bl	800c424 <__sfputc_r>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d1f3      	bne.n	800c458 <__sfputs_r+0xa>
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c474 <_vfiprintf_r>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	460d      	mov	r5, r1
 800c47a:	4614      	mov	r4, r2
 800c47c:	4698      	mov	r8, r3
 800c47e:	4606      	mov	r6, r0
 800c480:	b09d      	sub	sp, #116	; 0x74
 800c482:	b118      	cbz	r0, 800c48c <_vfiprintf_r+0x18>
 800c484:	6983      	ldr	r3, [r0, #24]
 800c486:	b90b      	cbnz	r3, 800c48c <_vfiprintf_r+0x18>
 800c488:	f000 fb14 	bl	800cab4 <__sinit>
 800c48c:	4b89      	ldr	r3, [pc, #548]	; (800c6b4 <_vfiprintf_r+0x240>)
 800c48e:	429d      	cmp	r5, r3
 800c490:	d11b      	bne.n	800c4ca <_vfiprintf_r+0x56>
 800c492:	6875      	ldr	r5, [r6, #4]
 800c494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c496:	07d9      	lsls	r1, r3, #31
 800c498:	d405      	bmi.n	800c4a6 <_vfiprintf_r+0x32>
 800c49a:	89ab      	ldrh	r3, [r5, #12]
 800c49c:	059a      	lsls	r2, r3, #22
 800c49e:	d402      	bmi.n	800c4a6 <_vfiprintf_r+0x32>
 800c4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4a2:	f000 fba5 	bl	800cbf0 <__retarget_lock_acquire_recursive>
 800c4a6:	89ab      	ldrh	r3, [r5, #12]
 800c4a8:	071b      	lsls	r3, r3, #28
 800c4aa:	d501      	bpl.n	800c4b0 <_vfiprintf_r+0x3c>
 800c4ac:	692b      	ldr	r3, [r5, #16]
 800c4ae:	b9eb      	cbnz	r3, 800c4ec <_vfiprintf_r+0x78>
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 f96e 	bl	800c794 <__swsetup_r>
 800c4b8:	b1c0      	cbz	r0, 800c4ec <_vfiprintf_r+0x78>
 800c4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4bc:	07dc      	lsls	r4, r3, #31
 800c4be:	d50e      	bpl.n	800c4de <_vfiprintf_r+0x6a>
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	b01d      	add	sp, #116	; 0x74
 800c4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ca:	4b7b      	ldr	r3, [pc, #492]	; (800c6b8 <_vfiprintf_r+0x244>)
 800c4cc:	429d      	cmp	r5, r3
 800c4ce:	d101      	bne.n	800c4d4 <_vfiprintf_r+0x60>
 800c4d0:	68b5      	ldr	r5, [r6, #8]
 800c4d2:	e7df      	b.n	800c494 <_vfiprintf_r+0x20>
 800c4d4:	4b79      	ldr	r3, [pc, #484]	; (800c6bc <_vfiprintf_r+0x248>)
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	bf08      	it	eq
 800c4da:	68f5      	ldreq	r5, [r6, #12]
 800c4dc:	e7da      	b.n	800c494 <_vfiprintf_r+0x20>
 800c4de:	89ab      	ldrh	r3, [r5, #12]
 800c4e0:	0598      	lsls	r0, r3, #22
 800c4e2:	d4ed      	bmi.n	800c4c0 <_vfiprintf_r+0x4c>
 800c4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4e6:	f000 fb84 	bl	800cbf2 <__retarget_lock_release_recursive>
 800c4ea:	e7e9      	b.n	800c4c0 <_vfiprintf_r+0x4c>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4f6:	2330      	movs	r3, #48	; 0x30
 800c4f8:	f04f 0901 	mov.w	r9, #1
 800c4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c500:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c6c0 <_vfiprintf_r+0x24c>
 800c504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c508:	4623      	mov	r3, r4
 800c50a:	469a      	mov	sl, r3
 800c50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c510:	b10a      	cbz	r2, 800c516 <_vfiprintf_r+0xa2>
 800c512:	2a25      	cmp	r2, #37	; 0x25
 800c514:	d1f9      	bne.n	800c50a <_vfiprintf_r+0x96>
 800c516:	ebba 0b04 	subs.w	fp, sl, r4
 800c51a:	d00b      	beq.n	800c534 <_vfiprintf_r+0xc0>
 800c51c:	465b      	mov	r3, fp
 800c51e:	4622      	mov	r2, r4
 800c520:	4629      	mov	r1, r5
 800c522:	4630      	mov	r0, r6
 800c524:	f7ff ff93 	bl	800c44e <__sfputs_r>
 800c528:	3001      	adds	r0, #1
 800c52a:	f000 80aa 	beq.w	800c682 <_vfiprintf_r+0x20e>
 800c52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c530:	445a      	add	r2, fp
 800c532:	9209      	str	r2, [sp, #36]	; 0x24
 800c534:	f89a 3000 	ldrb.w	r3, [sl]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 80a2 	beq.w	800c682 <_vfiprintf_r+0x20e>
 800c53e:	2300      	movs	r3, #0
 800c540:	f04f 32ff 	mov.w	r2, #4294967295
 800c544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c548:	f10a 0a01 	add.w	sl, sl, #1
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c554:	931a      	str	r3, [sp, #104]	; 0x68
 800c556:	4654      	mov	r4, sl
 800c558:	2205      	movs	r2, #5
 800c55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55e:	4858      	ldr	r0, [pc, #352]	; (800c6c0 <_vfiprintf_r+0x24c>)
 800c560:	f7ff f914 	bl	800b78c <memchr>
 800c564:	9a04      	ldr	r2, [sp, #16]
 800c566:	b9d8      	cbnz	r0, 800c5a0 <_vfiprintf_r+0x12c>
 800c568:	06d1      	lsls	r1, r2, #27
 800c56a:	bf44      	itt	mi
 800c56c:	2320      	movmi	r3, #32
 800c56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c572:	0713      	lsls	r3, r2, #28
 800c574:	bf44      	itt	mi
 800c576:	232b      	movmi	r3, #43	; 0x2b
 800c578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c57c:	f89a 3000 	ldrb.w	r3, [sl]
 800c580:	2b2a      	cmp	r3, #42	; 0x2a
 800c582:	d015      	beq.n	800c5b0 <_vfiprintf_r+0x13c>
 800c584:	4654      	mov	r4, sl
 800c586:	2000      	movs	r0, #0
 800c588:	f04f 0c0a 	mov.w	ip, #10
 800c58c:	9a07      	ldr	r2, [sp, #28]
 800c58e:	4621      	mov	r1, r4
 800c590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c594:	3b30      	subs	r3, #48	; 0x30
 800c596:	2b09      	cmp	r3, #9
 800c598:	d94e      	bls.n	800c638 <_vfiprintf_r+0x1c4>
 800c59a:	b1b0      	cbz	r0, 800c5ca <_vfiprintf_r+0x156>
 800c59c:	9207      	str	r2, [sp, #28]
 800c59e:	e014      	b.n	800c5ca <_vfiprintf_r+0x156>
 800c5a0:	eba0 0308 	sub.w	r3, r0, r8
 800c5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	46a2      	mov	sl, r4
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	e7d2      	b.n	800c556 <_vfiprintf_r+0xe2>
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	1d19      	adds	r1, r3, #4
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	9103      	str	r1, [sp, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bfbb      	ittet	lt
 800c5bc:	425b      	neglt	r3, r3
 800c5be:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c2:	9307      	strge	r3, [sp, #28]
 800c5c4:	9307      	strlt	r3, [sp, #28]
 800c5c6:	bfb8      	it	lt
 800c5c8:	9204      	strlt	r2, [sp, #16]
 800c5ca:	7823      	ldrb	r3, [r4, #0]
 800c5cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ce:	d10c      	bne.n	800c5ea <_vfiprintf_r+0x176>
 800c5d0:	7863      	ldrb	r3, [r4, #1]
 800c5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d4:	d135      	bne.n	800c642 <_vfiprintf_r+0x1ce>
 800c5d6:	9b03      	ldr	r3, [sp, #12]
 800c5d8:	3402      	adds	r4, #2
 800c5da:	1d1a      	adds	r2, r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	9203      	str	r2, [sp, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bfb8      	it	lt
 800c5e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6d0 <_vfiprintf_r+0x25c>
 800c5ee:	2203      	movs	r2, #3
 800c5f0:	4650      	mov	r0, sl
 800c5f2:	7821      	ldrb	r1, [r4, #0]
 800c5f4:	f7ff f8ca 	bl	800b78c <memchr>
 800c5f8:	b140      	cbz	r0, 800c60c <_vfiprintf_r+0x198>
 800c5fa:	2340      	movs	r3, #64	; 0x40
 800c5fc:	eba0 000a 	sub.w	r0, r0, sl
 800c600:	fa03 f000 	lsl.w	r0, r3, r0
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	3401      	adds	r4, #1
 800c608:	4303      	orrs	r3, r0
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c610:	2206      	movs	r2, #6
 800c612:	482c      	ldr	r0, [pc, #176]	; (800c6c4 <_vfiprintf_r+0x250>)
 800c614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c618:	f7ff f8b8 	bl	800b78c <memchr>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d03f      	beq.n	800c6a0 <_vfiprintf_r+0x22c>
 800c620:	4b29      	ldr	r3, [pc, #164]	; (800c6c8 <_vfiprintf_r+0x254>)
 800c622:	bb1b      	cbnz	r3, 800c66c <_vfiprintf_r+0x1f8>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	3307      	adds	r3, #7
 800c628:	f023 0307 	bic.w	r3, r3, #7
 800c62c:	3308      	adds	r3, #8
 800c62e:	9303      	str	r3, [sp, #12]
 800c630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c632:	443b      	add	r3, r7
 800c634:	9309      	str	r3, [sp, #36]	; 0x24
 800c636:	e767      	b.n	800c508 <_vfiprintf_r+0x94>
 800c638:	460c      	mov	r4, r1
 800c63a:	2001      	movs	r0, #1
 800c63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c640:	e7a5      	b.n	800c58e <_vfiprintf_r+0x11a>
 800c642:	2300      	movs	r3, #0
 800c644:	f04f 0c0a 	mov.w	ip, #10
 800c648:	4619      	mov	r1, r3
 800c64a:	3401      	adds	r4, #1
 800c64c:	9305      	str	r3, [sp, #20]
 800c64e:	4620      	mov	r0, r4
 800c650:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c654:	3a30      	subs	r2, #48	; 0x30
 800c656:	2a09      	cmp	r2, #9
 800c658:	d903      	bls.n	800c662 <_vfiprintf_r+0x1ee>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0c5      	beq.n	800c5ea <_vfiprintf_r+0x176>
 800c65e:	9105      	str	r1, [sp, #20]
 800c660:	e7c3      	b.n	800c5ea <_vfiprintf_r+0x176>
 800c662:	4604      	mov	r4, r0
 800c664:	2301      	movs	r3, #1
 800c666:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66a:	e7f0      	b.n	800c64e <_vfiprintf_r+0x1da>
 800c66c:	ab03      	add	r3, sp, #12
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	462a      	mov	r2, r5
 800c672:	4630      	mov	r0, r6
 800c674:	4b15      	ldr	r3, [pc, #84]	; (800c6cc <_vfiprintf_r+0x258>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	f7fd fe0c 	bl	800a294 <_printf_float>
 800c67c:	4607      	mov	r7, r0
 800c67e:	1c78      	adds	r0, r7, #1
 800c680:	d1d6      	bne.n	800c630 <_vfiprintf_r+0x1bc>
 800c682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c684:	07d9      	lsls	r1, r3, #31
 800c686:	d405      	bmi.n	800c694 <_vfiprintf_r+0x220>
 800c688:	89ab      	ldrh	r3, [r5, #12]
 800c68a:	059a      	lsls	r2, r3, #22
 800c68c:	d402      	bmi.n	800c694 <_vfiprintf_r+0x220>
 800c68e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c690:	f000 faaf 	bl	800cbf2 <__retarget_lock_release_recursive>
 800c694:	89ab      	ldrh	r3, [r5, #12]
 800c696:	065b      	lsls	r3, r3, #25
 800c698:	f53f af12 	bmi.w	800c4c0 <_vfiprintf_r+0x4c>
 800c69c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c69e:	e711      	b.n	800c4c4 <_vfiprintf_r+0x50>
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <_vfiprintf_r+0x258>)
 800c6aa:	a904      	add	r1, sp, #16
 800c6ac:	f7fe f88e 	bl	800a7cc <_printf_i>
 800c6b0:	e7e4      	b.n	800c67c <_vfiprintf_r+0x208>
 800c6b2:	bf00      	nop
 800c6b4:	0800e48c 	.word	0x0800e48c
 800c6b8:	0800e4ac 	.word	0x0800e4ac
 800c6bc:	0800e46c 	.word	0x0800e46c
 800c6c0:	0800e314 	.word	0x0800e314
 800c6c4:	0800e31e 	.word	0x0800e31e
 800c6c8:	0800a295 	.word	0x0800a295
 800c6cc:	0800c44f 	.word	0x0800c44f
 800c6d0:	0800e31a 	.word	0x0800e31a

0800c6d4 <__swbuf_r>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	460e      	mov	r6, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	4605      	mov	r5, r0
 800c6dc:	b118      	cbz	r0, 800c6e6 <__swbuf_r+0x12>
 800c6de:	6983      	ldr	r3, [r0, #24]
 800c6e0:	b90b      	cbnz	r3, 800c6e6 <__swbuf_r+0x12>
 800c6e2:	f000 f9e7 	bl	800cab4 <__sinit>
 800c6e6:	4b21      	ldr	r3, [pc, #132]	; (800c76c <__swbuf_r+0x98>)
 800c6e8:	429c      	cmp	r4, r3
 800c6ea:	d12b      	bne.n	800c744 <__swbuf_r+0x70>
 800c6ec:	686c      	ldr	r4, [r5, #4]
 800c6ee:	69a3      	ldr	r3, [r4, #24]
 800c6f0:	60a3      	str	r3, [r4, #8]
 800c6f2:	89a3      	ldrh	r3, [r4, #12]
 800c6f4:	071a      	lsls	r2, r3, #28
 800c6f6:	d52f      	bpl.n	800c758 <__swbuf_r+0x84>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	b36b      	cbz	r3, 800c758 <__swbuf_r+0x84>
 800c6fc:	6923      	ldr	r3, [r4, #16]
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	b2f6      	uxtb	r6, r6
 800c702:	1ac0      	subs	r0, r0, r3
 800c704:	6963      	ldr	r3, [r4, #20]
 800c706:	4637      	mov	r7, r6
 800c708:	4283      	cmp	r3, r0
 800c70a:	dc04      	bgt.n	800c716 <__swbuf_r+0x42>
 800c70c:	4621      	mov	r1, r4
 800c70e:	4628      	mov	r0, r5
 800c710:	f000 f93c 	bl	800c98c <_fflush_r>
 800c714:	bb30      	cbnz	r0, 800c764 <__swbuf_r+0x90>
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	3001      	adds	r0, #1
 800c71a:	3b01      	subs	r3, #1
 800c71c:	60a3      	str	r3, [r4, #8]
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	6022      	str	r2, [r4, #0]
 800c724:	701e      	strb	r6, [r3, #0]
 800c726:	6963      	ldr	r3, [r4, #20]
 800c728:	4283      	cmp	r3, r0
 800c72a:	d004      	beq.n	800c736 <__swbuf_r+0x62>
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	07db      	lsls	r3, r3, #31
 800c730:	d506      	bpl.n	800c740 <__swbuf_r+0x6c>
 800c732:	2e0a      	cmp	r6, #10
 800c734:	d104      	bne.n	800c740 <__swbuf_r+0x6c>
 800c736:	4621      	mov	r1, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 f927 	bl	800c98c <_fflush_r>
 800c73e:	b988      	cbnz	r0, 800c764 <__swbuf_r+0x90>
 800c740:	4638      	mov	r0, r7
 800c742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c744:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <__swbuf_r+0x9c>)
 800c746:	429c      	cmp	r4, r3
 800c748:	d101      	bne.n	800c74e <__swbuf_r+0x7a>
 800c74a:	68ac      	ldr	r4, [r5, #8]
 800c74c:	e7cf      	b.n	800c6ee <__swbuf_r+0x1a>
 800c74e:	4b09      	ldr	r3, [pc, #36]	; (800c774 <__swbuf_r+0xa0>)
 800c750:	429c      	cmp	r4, r3
 800c752:	bf08      	it	eq
 800c754:	68ec      	ldreq	r4, [r5, #12]
 800c756:	e7ca      	b.n	800c6ee <__swbuf_r+0x1a>
 800c758:	4621      	mov	r1, r4
 800c75a:	4628      	mov	r0, r5
 800c75c:	f000 f81a 	bl	800c794 <__swsetup_r>
 800c760:	2800      	cmp	r0, #0
 800c762:	d0cb      	beq.n	800c6fc <__swbuf_r+0x28>
 800c764:	f04f 37ff 	mov.w	r7, #4294967295
 800c768:	e7ea      	b.n	800c740 <__swbuf_r+0x6c>
 800c76a:	bf00      	nop
 800c76c:	0800e48c 	.word	0x0800e48c
 800c770:	0800e4ac 	.word	0x0800e4ac
 800c774:	0800e46c 	.word	0x0800e46c

0800c778 <__ascii_wctomb>:
 800c778:	4603      	mov	r3, r0
 800c77a:	4608      	mov	r0, r1
 800c77c:	b141      	cbz	r1, 800c790 <__ascii_wctomb+0x18>
 800c77e:	2aff      	cmp	r2, #255	; 0xff
 800c780:	d904      	bls.n	800c78c <__ascii_wctomb+0x14>
 800c782:	228a      	movs	r2, #138	; 0x8a
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	4770      	bx	lr
 800c78c:	2001      	movs	r0, #1
 800c78e:	700a      	strb	r2, [r1, #0]
 800c790:	4770      	bx	lr
	...

0800c794 <__swsetup_r>:
 800c794:	4b32      	ldr	r3, [pc, #200]	; (800c860 <__swsetup_r+0xcc>)
 800c796:	b570      	push	{r4, r5, r6, lr}
 800c798:	681d      	ldr	r5, [r3, #0]
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	b125      	cbz	r5, 800c7aa <__swsetup_r+0x16>
 800c7a0:	69ab      	ldr	r3, [r5, #24]
 800c7a2:	b913      	cbnz	r3, 800c7aa <__swsetup_r+0x16>
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 f985 	bl	800cab4 <__sinit>
 800c7aa:	4b2e      	ldr	r3, [pc, #184]	; (800c864 <__swsetup_r+0xd0>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	d10f      	bne.n	800c7d0 <__swsetup_r+0x3c>
 800c7b0:	686c      	ldr	r4, [r5, #4]
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b8:	0719      	lsls	r1, r3, #28
 800c7ba:	d42c      	bmi.n	800c816 <__swsetup_r+0x82>
 800c7bc:	06dd      	lsls	r5, r3, #27
 800c7be:	d411      	bmi.n	800c7e4 <__swsetup_r+0x50>
 800c7c0:	2309      	movs	r3, #9
 800c7c2:	6033      	str	r3, [r6, #0]
 800c7c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e03e      	b.n	800c84e <__swsetup_r+0xba>
 800c7d0:	4b25      	ldr	r3, [pc, #148]	; (800c868 <__swsetup_r+0xd4>)
 800c7d2:	429c      	cmp	r4, r3
 800c7d4:	d101      	bne.n	800c7da <__swsetup_r+0x46>
 800c7d6:	68ac      	ldr	r4, [r5, #8]
 800c7d8:	e7eb      	b.n	800c7b2 <__swsetup_r+0x1e>
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <__swsetup_r+0xd8>)
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	bf08      	it	eq
 800c7e0:	68ec      	ldreq	r4, [r5, #12]
 800c7e2:	e7e6      	b.n	800c7b2 <__swsetup_r+0x1e>
 800c7e4:	0758      	lsls	r0, r3, #29
 800c7e6:	d512      	bpl.n	800c80e <__swsetup_r+0x7a>
 800c7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ea:	b141      	cbz	r1, 800c7fe <__swsetup_r+0x6a>
 800c7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d002      	beq.n	800c7fa <__swsetup_r+0x66>
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff fb75 	bl	800bee4 <_free_r>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c804:	81a3      	strh	r3, [r4, #12]
 800c806:	2300      	movs	r3, #0
 800c808:	6063      	str	r3, [r4, #4]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f043 0308 	orr.w	r3, r3, #8
 800c814:	81a3      	strh	r3, [r4, #12]
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	b94b      	cbnz	r3, 800c82e <__swsetup_r+0x9a>
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c824:	d003      	beq.n	800c82e <__swsetup_r+0x9a>
 800c826:	4621      	mov	r1, r4
 800c828:	4630      	mov	r0, r6
 800c82a:	f000 fa07 	bl	800cc3c <__smakebuf_r>
 800c82e:	89a0      	ldrh	r0, [r4, #12]
 800c830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c834:	f010 0301 	ands.w	r3, r0, #1
 800c838:	d00a      	beq.n	800c850 <__swsetup_r+0xbc>
 800c83a:	2300      	movs	r3, #0
 800c83c:	60a3      	str	r3, [r4, #8]
 800c83e:	6963      	ldr	r3, [r4, #20]
 800c840:	425b      	negs	r3, r3
 800c842:	61a3      	str	r3, [r4, #24]
 800c844:	6923      	ldr	r3, [r4, #16]
 800c846:	b943      	cbnz	r3, 800c85a <__swsetup_r+0xc6>
 800c848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c84c:	d1ba      	bne.n	800c7c4 <__swsetup_r+0x30>
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	0781      	lsls	r1, r0, #30
 800c852:	bf58      	it	pl
 800c854:	6963      	ldrpl	r3, [r4, #20]
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	e7f4      	b.n	800c844 <__swsetup_r+0xb0>
 800c85a:	2000      	movs	r0, #0
 800c85c:	e7f7      	b.n	800c84e <__swsetup_r+0xba>
 800c85e:	bf00      	nop
 800c860:	200000c8 	.word	0x200000c8
 800c864:	0800e48c 	.word	0x0800e48c
 800c868:	0800e4ac 	.word	0x0800e4ac
 800c86c:	0800e46c 	.word	0x0800e46c

0800c870 <abort>:
 800c870:	2006      	movs	r0, #6
 800c872:	b508      	push	{r3, lr}
 800c874:	f000 fa52 	bl	800cd1c <raise>
 800c878:	2001      	movs	r0, #1
 800c87a:	f7f6 ff70 	bl	800375e <_exit>
	...

0800c880 <__sflush_r>:
 800c880:	898a      	ldrh	r2, [r1, #12]
 800c882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c886:	4605      	mov	r5, r0
 800c888:	0710      	lsls	r0, r2, #28
 800c88a:	460c      	mov	r4, r1
 800c88c:	d458      	bmi.n	800c940 <__sflush_r+0xc0>
 800c88e:	684b      	ldr	r3, [r1, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	dc05      	bgt.n	800c8a0 <__sflush_r+0x20>
 800c894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c896:	2b00      	cmp	r3, #0
 800c898:	dc02      	bgt.n	800c8a0 <__sflush_r+0x20>
 800c89a:	2000      	movs	r0, #0
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8a2:	2e00      	cmp	r6, #0
 800c8a4:	d0f9      	beq.n	800c89a <__sflush_r+0x1a>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8ac:	682f      	ldr	r7, [r5, #0]
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	d032      	beq.n	800c918 <__sflush_r+0x98>
 800c8b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	075a      	lsls	r2, r3, #29
 800c8b8:	d505      	bpl.n	800c8c6 <__sflush_r+0x46>
 800c8ba:	6863      	ldr	r3, [r4, #4]
 800c8bc:	1ac0      	subs	r0, r0, r3
 800c8be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8c0:	b10b      	cbz	r3, 800c8c6 <__sflush_r+0x46>
 800c8c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8c4:	1ac0      	subs	r0, r0, r3
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	6a21      	ldr	r1, [r4, #32]
 800c8d0:	47b0      	blx	r6
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	89a3      	ldrh	r3, [r4, #12]
 800c8d6:	d106      	bne.n	800c8e6 <__sflush_r+0x66>
 800c8d8:	6829      	ldr	r1, [r5, #0]
 800c8da:	291d      	cmp	r1, #29
 800c8dc:	d82c      	bhi.n	800c938 <__sflush_r+0xb8>
 800c8de:	4a2a      	ldr	r2, [pc, #168]	; (800c988 <__sflush_r+0x108>)
 800c8e0:	40ca      	lsrs	r2, r1
 800c8e2:	07d6      	lsls	r6, r2, #31
 800c8e4:	d528      	bpl.n	800c938 <__sflush_r+0xb8>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	6062      	str	r2, [r4, #4]
 800c8ea:	6922      	ldr	r2, [r4, #16]
 800c8ec:	04d9      	lsls	r1, r3, #19
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	d504      	bpl.n	800c8fc <__sflush_r+0x7c>
 800c8f2:	1c42      	adds	r2, r0, #1
 800c8f4:	d101      	bne.n	800c8fa <__sflush_r+0x7a>
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	b903      	cbnz	r3, 800c8fc <__sflush_r+0x7c>
 800c8fa:	6560      	str	r0, [r4, #84]	; 0x54
 800c8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8fe:	602f      	str	r7, [r5, #0]
 800c900:	2900      	cmp	r1, #0
 800c902:	d0ca      	beq.n	800c89a <__sflush_r+0x1a>
 800c904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c908:	4299      	cmp	r1, r3
 800c90a:	d002      	beq.n	800c912 <__sflush_r+0x92>
 800c90c:	4628      	mov	r0, r5
 800c90e:	f7ff fae9 	bl	800bee4 <_free_r>
 800c912:	2000      	movs	r0, #0
 800c914:	6360      	str	r0, [r4, #52]	; 0x34
 800c916:	e7c1      	b.n	800c89c <__sflush_r+0x1c>
 800c918:	6a21      	ldr	r1, [r4, #32]
 800c91a:	2301      	movs	r3, #1
 800c91c:	4628      	mov	r0, r5
 800c91e:	47b0      	blx	r6
 800c920:	1c41      	adds	r1, r0, #1
 800c922:	d1c7      	bne.n	800c8b4 <__sflush_r+0x34>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0c4      	beq.n	800c8b4 <__sflush_r+0x34>
 800c92a:	2b1d      	cmp	r3, #29
 800c92c:	d001      	beq.n	800c932 <__sflush_r+0xb2>
 800c92e:	2b16      	cmp	r3, #22
 800c930:	d101      	bne.n	800c936 <__sflush_r+0xb6>
 800c932:	602f      	str	r7, [r5, #0]
 800c934:	e7b1      	b.n	800c89a <__sflush_r+0x1a>
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	e7ad      	b.n	800c89c <__sflush_r+0x1c>
 800c940:	690f      	ldr	r7, [r1, #16]
 800c942:	2f00      	cmp	r7, #0
 800c944:	d0a9      	beq.n	800c89a <__sflush_r+0x1a>
 800c946:	0793      	lsls	r3, r2, #30
 800c948:	bf18      	it	ne
 800c94a:	2300      	movne	r3, #0
 800c94c:	680e      	ldr	r6, [r1, #0]
 800c94e:	bf08      	it	eq
 800c950:	694b      	ldreq	r3, [r1, #20]
 800c952:	eba6 0807 	sub.w	r8, r6, r7
 800c956:	600f      	str	r7, [r1, #0]
 800c958:	608b      	str	r3, [r1, #8]
 800c95a:	f1b8 0f00 	cmp.w	r8, #0
 800c95e:	dd9c      	ble.n	800c89a <__sflush_r+0x1a>
 800c960:	4643      	mov	r3, r8
 800c962:	463a      	mov	r2, r7
 800c964:	4628      	mov	r0, r5
 800c966:	6a21      	ldr	r1, [r4, #32]
 800c968:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c96a:	47b0      	blx	r6
 800c96c:	2800      	cmp	r0, #0
 800c96e:	dc06      	bgt.n	800c97e <__sflush_r+0xfe>
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	f04f 30ff 	mov.w	r0, #4294967295
 800c976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	e78e      	b.n	800c89c <__sflush_r+0x1c>
 800c97e:	4407      	add	r7, r0
 800c980:	eba8 0800 	sub.w	r8, r8, r0
 800c984:	e7e9      	b.n	800c95a <__sflush_r+0xda>
 800c986:	bf00      	nop
 800c988:	20400001 	.word	0x20400001

0800c98c <_fflush_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	690b      	ldr	r3, [r1, #16]
 800c990:	4605      	mov	r5, r0
 800c992:	460c      	mov	r4, r1
 800c994:	b913      	cbnz	r3, 800c99c <_fflush_r+0x10>
 800c996:	2500      	movs	r5, #0
 800c998:	4628      	mov	r0, r5
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	b118      	cbz	r0, 800c9a6 <_fflush_r+0x1a>
 800c99e:	6983      	ldr	r3, [r0, #24]
 800c9a0:	b90b      	cbnz	r3, 800c9a6 <_fflush_r+0x1a>
 800c9a2:	f000 f887 	bl	800cab4 <__sinit>
 800c9a6:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <_fflush_r+0x6c>)
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	d11b      	bne.n	800c9e4 <_fflush_r+0x58>
 800c9ac:	686c      	ldr	r4, [r5, #4]
 800c9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0ef      	beq.n	800c996 <_fflush_r+0xa>
 800c9b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9b8:	07d0      	lsls	r0, r2, #31
 800c9ba:	d404      	bmi.n	800c9c6 <_fflush_r+0x3a>
 800c9bc:	0599      	lsls	r1, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_fflush_r+0x3a>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c2:	f000 f915 	bl	800cbf0 <__retarget_lock_acquire_recursive>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	f7ff ff59 	bl	800c880 <__sflush_r>
 800c9ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	07da      	lsls	r2, r3, #31
 800c9d4:	d4e0      	bmi.n	800c998 <_fflush_r+0xc>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	059b      	lsls	r3, r3, #22
 800c9da:	d4dd      	bmi.n	800c998 <_fflush_r+0xc>
 800c9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9de:	f000 f908 	bl	800cbf2 <__retarget_lock_release_recursive>
 800c9e2:	e7d9      	b.n	800c998 <_fflush_r+0xc>
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <_fflush_r+0x70>)
 800c9e6:	429c      	cmp	r4, r3
 800c9e8:	d101      	bne.n	800c9ee <_fflush_r+0x62>
 800c9ea:	68ac      	ldr	r4, [r5, #8]
 800c9ec:	e7df      	b.n	800c9ae <_fflush_r+0x22>
 800c9ee:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <_fflush_r+0x74>)
 800c9f0:	429c      	cmp	r4, r3
 800c9f2:	bf08      	it	eq
 800c9f4:	68ec      	ldreq	r4, [r5, #12]
 800c9f6:	e7da      	b.n	800c9ae <_fflush_r+0x22>
 800c9f8:	0800e48c 	.word	0x0800e48c
 800c9fc:	0800e4ac 	.word	0x0800e4ac
 800ca00:	0800e46c 	.word	0x0800e46c

0800ca04 <std>:
 800ca04:	2300      	movs	r3, #0
 800ca06:	b510      	push	{r4, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca12:	6083      	str	r3, [r0, #8]
 800ca14:	8181      	strh	r1, [r0, #12]
 800ca16:	6643      	str	r3, [r0, #100]	; 0x64
 800ca18:	81c2      	strh	r2, [r0, #14]
 800ca1a:	6183      	str	r3, [r0, #24]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	2208      	movs	r2, #8
 800ca20:	305c      	adds	r0, #92	; 0x5c
 800ca22:	f7fd fb91 	bl	800a148 <memset>
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <std+0x38>)
 800ca28:	6224      	str	r4, [r4, #32]
 800ca2a:	6263      	str	r3, [r4, #36]	; 0x24
 800ca2c:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <std+0x3c>)
 800ca2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca30:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <std+0x40>)
 800ca32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <std+0x44>)
 800ca36:	6323      	str	r3, [r4, #48]	; 0x30
 800ca38:	bd10      	pop	{r4, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0800cd55 	.word	0x0800cd55
 800ca40:	0800cd77 	.word	0x0800cd77
 800ca44:	0800cdaf 	.word	0x0800cdaf
 800ca48:	0800cdd3 	.word	0x0800cdd3

0800ca4c <_cleanup_r>:
 800ca4c:	4901      	ldr	r1, [pc, #4]	; (800ca54 <_cleanup_r+0x8>)
 800ca4e:	f000 b8af 	b.w	800cbb0 <_fwalk_reent>
 800ca52:	bf00      	nop
 800ca54:	0800c98d 	.word	0x0800c98d

0800ca58 <__sfmoreglue>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	2568      	movs	r5, #104	; 0x68
 800ca5c:	1e4a      	subs	r2, r1, #1
 800ca5e:	4355      	muls	r5, r2
 800ca60:	460e      	mov	r6, r1
 800ca62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca66:	f7ff fa89 	bl	800bf7c <_malloc_r>
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	b140      	cbz	r0, 800ca80 <__sfmoreglue+0x28>
 800ca6e:	2100      	movs	r1, #0
 800ca70:	e9c0 1600 	strd	r1, r6, [r0]
 800ca74:	300c      	adds	r0, #12
 800ca76:	60a0      	str	r0, [r4, #8]
 800ca78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca7c:	f7fd fb64 	bl	800a148 <memset>
 800ca80:	4620      	mov	r0, r4
 800ca82:	bd70      	pop	{r4, r5, r6, pc}

0800ca84 <__sfp_lock_acquire>:
 800ca84:	4801      	ldr	r0, [pc, #4]	; (800ca8c <__sfp_lock_acquire+0x8>)
 800ca86:	f000 b8b3 	b.w	800cbf0 <__retarget_lock_acquire_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	200023b8 	.word	0x200023b8

0800ca90 <__sfp_lock_release>:
 800ca90:	4801      	ldr	r0, [pc, #4]	; (800ca98 <__sfp_lock_release+0x8>)
 800ca92:	f000 b8ae 	b.w	800cbf2 <__retarget_lock_release_recursive>
 800ca96:	bf00      	nop
 800ca98:	200023b8 	.word	0x200023b8

0800ca9c <__sinit_lock_acquire>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	; (800caa4 <__sinit_lock_acquire+0x8>)
 800ca9e:	f000 b8a7 	b.w	800cbf0 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	200023b3 	.word	0x200023b3

0800caa8 <__sinit_lock_release>:
 800caa8:	4801      	ldr	r0, [pc, #4]	; (800cab0 <__sinit_lock_release+0x8>)
 800caaa:	f000 b8a2 	b.w	800cbf2 <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	200023b3 	.word	0x200023b3

0800cab4 <__sinit>:
 800cab4:	b510      	push	{r4, lr}
 800cab6:	4604      	mov	r4, r0
 800cab8:	f7ff fff0 	bl	800ca9c <__sinit_lock_acquire>
 800cabc:	69a3      	ldr	r3, [r4, #24]
 800cabe:	b11b      	cbz	r3, 800cac8 <__sinit+0x14>
 800cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac4:	f7ff bff0 	b.w	800caa8 <__sinit_lock_release>
 800cac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cacc:	6523      	str	r3, [r4, #80]	; 0x50
 800cace:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <__sinit+0x68>)
 800cad0:	4a13      	ldr	r2, [pc, #76]	; (800cb20 <__sinit+0x6c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cad6:	42a3      	cmp	r3, r4
 800cad8:	bf08      	it	eq
 800cada:	2301      	moveq	r3, #1
 800cadc:	4620      	mov	r0, r4
 800cade:	bf08      	it	eq
 800cae0:	61a3      	streq	r3, [r4, #24]
 800cae2:	f000 f81f 	bl	800cb24 <__sfp>
 800cae6:	6060      	str	r0, [r4, #4]
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 f81b 	bl	800cb24 <__sfp>
 800caee:	60a0      	str	r0, [r4, #8]
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 f817 	bl	800cb24 <__sfp>
 800caf6:	2200      	movs	r2, #0
 800caf8:	2104      	movs	r1, #4
 800cafa:	60e0      	str	r0, [r4, #12]
 800cafc:	6860      	ldr	r0, [r4, #4]
 800cafe:	f7ff ff81 	bl	800ca04 <std>
 800cb02:	2201      	movs	r2, #1
 800cb04:	2109      	movs	r1, #9
 800cb06:	68a0      	ldr	r0, [r4, #8]
 800cb08:	f7ff ff7c 	bl	800ca04 <std>
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	2112      	movs	r1, #18
 800cb10:	68e0      	ldr	r0, [r4, #12]
 800cb12:	f7ff ff77 	bl	800ca04 <std>
 800cb16:	2301      	movs	r3, #1
 800cb18:	61a3      	str	r3, [r4, #24]
 800cb1a:	e7d1      	b.n	800cac0 <__sinit+0xc>
 800cb1c:	0800e0e8 	.word	0x0800e0e8
 800cb20:	0800ca4d 	.word	0x0800ca4d

0800cb24 <__sfp>:
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb26:	4607      	mov	r7, r0
 800cb28:	f7ff ffac 	bl	800ca84 <__sfp_lock_acquire>
 800cb2c:	4b1e      	ldr	r3, [pc, #120]	; (800cba8 <__sfp+0x84>)
 800cb2e:	681e      	ldr	r6, [r3, #0]
 800cb30:	69b3      	ldr	r3, [r6, #24]
 800cb32:	b913      	cbnz	r3, 800cb3a <__sfp+0x16>
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7ff ffbd 	bl	800cab4 <__sinit>
 800cb3a:	3648      	adds	r6, #72	; 0x48
 800cb3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	d503      	bpl.n	800cb4c <__sfp+0x28>
 800cb44:	6833      	ldr	r3, [r6, #0]
 800cb46:	b30b      	cbz	r3, 800cb8c <__sfp+0x68>
 800cb48:	6836      	ldr	r6, [r6, #0]
 800cb4a:	e7f7      	b.n	800cb3c <__sfp+0x18>
 800cb4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb50:	b9d5      	cbnz	r5, 800cb88 <__sfp+0x64>
 800cb52:	4b16      	ldr	r3, [pc, #88]	; (800cbac <__sfp+0x88>)
 800cb54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb58:	60e3      	str	r3, [r4, #12]
 800cb5a:	6665      	str	r5, [r4, #100]	; 0x64
 800cb5c:	f000 f847 	bl	800cbee <__retarget_lock_init_recursive>
 800cb60:	f7ff ff96 	bl	800ca90 <__sfp_lock_release>
 800cb64:	2208      	movs	r2, #8
 800cb66:	4629      	mov	r1, r5
 800cb68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb70:	6025      	str	r5, [r4, #0]
 800cb72:	61a5      	str	r5, [r4, #24]
 800cb74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb78:	f7fd fae6 	bl	800a148 <memset>
 800cb7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb84:	4620      	mov	r0, r4
 800cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb88:	3468      	adds	r4, #104	; 0x68
 800cb8a:	e7d9      	b.n	800cb40 <__sfp+0x1c>
 800cb8c:	2104      	movs	r1, #4
 800cb8e:	4638      	mov	r0, r7
 800cb90:	f7ff ff62 	bl	800ca58 <__sfmoreglue>
 800cb94:	4604      	mov	r4, r0
 800cb96:	6030      	str	r0, [r6, #0]
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1d5      	bne.n	800cb48 <__sfp+0x24>
 800cb9c:	f7ff ff78 	bl	800ca90 <__sfp_lock_release>
 800cba0:	230c      	movs	r3, #12
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	e7ee      	b.n	800cb84 <__sfp+0x60>
 800cba6:	bf00      	nop
 800cba8:	0800e0e8 	.word	0x0800e0e8
 800cbac:	ffff0001 	.word	0xffff0001

0800cbb0 <_fwalk_reent>:
 800cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	4688      	mov	r8, r1
 800cbb8:	2700      	movs	r7, #0
 800cbba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbc2:	f1b9 0901 	subs.w	r9, r9, #1
 800cbc6:	d505      	bpl.n	800cbd4 <_fwalk_reent+0x24>
 800cbc8:	6824      	ldr	r4, [r4, #0]
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d1f7      	bne.n	800cbbe <_fwalk_reent+0xe>
 800cbce:	4638      	mov	r0, r7
 800cbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd4:	89ab      	ldrh	r3, [r5, #12]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d907      	bls.n	800cbea <_fwalk_reent+0x3a>
 800cbda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	d003      	beq.n	800cbea <_fwalk_reent+0x3a>
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	47c0      	blx	r8
 800cbe8:	4307      	orrs	r7, r0
 800cbea:	3568      	adds	r5, #104	; 0x68
 800cbec:	e7e9      	b.n	800cbc2 <_fwalk_reent+0x12>

0800cbee <__retarget_lock_init_recursive>:
 800cbee:	4770      	bx	lr

0800cbf0 <__retarget_lock_acquire_recursive>:
 800cbf0:	4770      	bx	lr

0800cbf2 <__retarget_lock_release_recursive>:
 800cbf2:	4770      	bx	lr

0800cbf4 <__swhatbuf_r>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	460e      	mov	r6, r1
 800cbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	461d      	mov	r5, r3
 800cc02:	b096      	sub	sp, #88	; 0x58
 800cc04:	da07      	bge.n	800cc16 <__swhatbuf_r+0x22>
 800cc06:	2300      	movs	r3, #0
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	89b3      	ldrh	r3, [r6, #12]
 800cc0c:	061a      	lsls	r2, r3, #24
 800cc0e:	d410      	bmi.n	800cc32 <__swhatbuf_r+0x3e>
 800cc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc14:	e00e      	b.n	800cc34 <__swhatbuf_r+0x40>
 800cc16:	466a      	mov	r2, sp
 800cc18:	f000 f902 	bl	800ce20 <_fstat_r>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	dbf2      	blt.n	800cc06 <__swhatbuf_r+0x12>
 800cc20:	9a01      	ldr	r2, [sp, #4]
 800cc22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc2a:	425a      	negs	r2, r3
 800cc2c:	415a      	adcs	r2, r3
 800cc2e:	602a      	str	r2, [r5, #0]
 800cc30:	e7ee      	b.n	800cc10 <__swhatbuf_r+0x1c>
 800cc32:	2340      	movs	r3, #64	; 0x40
 800cc34:	2000      	movs	r0, #0
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	b016      	add	sp, #88	; 0x58
 800cc3a:	bd70      	pop	{r4, r5, r6, pc}

0800cc3c <__smakebuf_r>:
 800cc3c:	898b      	ldrh	r3, [r1, #12]
 800cc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc40:	079d      	lsls	r5, r3, #30
 800cc42:	4606      	mov	r6, r0
 800cc44:	460c      	mov	r4, r1
 800cc46:	d507      	bpl.n	800cc58 <__smakebuf_r+0x1c>
 800cc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	2301      	movs	r3, #1
 800cc52:	6163      	str	r3, [r4, #20]
 800cc54:	b002      	add	sp, #8
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	466a      	mov	r2, sp
 800cc5a:	ab01      	add	r3, sp, #4
 800cc5c:	f7ff ffca 	bl	800cbf4 <__swhatbuf_r>
 800cc60:	9900      	ldr	r1, [sp, #0]
 800cc62:	4605      	mov	r5, r0
 800cc64:	4630      	mov	r0, r6
 800cc66:	f7ff f989 	bl	800bf7c <_malloc_r>
 800cc6a:	b948      	cbnz	r0, 800cc80 <__smakebuf_r+0x44>
 800cc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc70:	059a      	lsls	r2, r3, #22
 800cc72:	d4ef      	bmi.n	800cc54 <__smakebuf_r+0x18>
 800cc74:	f023 0303 	bic.w	r3, r3, #3
 800cc78:	f043 0302 	orr.w	r3, r3, #2
 800cc7c:	81a3      	strh	r3, [r4, #12]
 800cc7e:	e7e3      	b.n	800cc48 <__smakebuf_r+0xc>
 800cc80:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <__smakebuf_r+0x7c>)
 800cc82:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	6020      	str	r0, [r4, #0]
 800cc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	9b00      	ldr	r3, [sp, #0]
 800cc90:	6120      	str	r0, [r4, #16]
 800cc92:	6163      	str	r3, [r4, #20]
 800cc94:	9b01      	ldr	r3, [sp, #4]
 800cc96:	b15b      	cbz	r3, 800ccb0 <__smakebuf_r+0x74>
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9e:	f000 f8d1 	bl	800ce44 <_isatty_r>
 800cca2:	b128      	cbz	r0, 800ccb0 <__smakebuf_r+0x74>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	f023 0303 	bic.w	r3, r3, #3
 800ccaa:	f043 0301 	orr.w	r3, r3, #1
 800ccae:	81a3      	strh	r3, [r4, #12]
 800ccb0:	89a0      	ldrh	r0, [r4, #12]
 800ccb2:	4305      	orrs	r5, r0
 800ccb4:	81a5      	strh	r5, [r4, #12]
 800ccb6:	e7cd      	b.n	800cc54 <__smakebuf_r+0x18>
 800ccb8:	0800ca4d 	.word	0x0800ca4d

0800ccbc <_malloc_usable_size_r>:
 800ccbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc0:	1f18      	subs	r0, r3, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bfbc      	itt	lt
 800ccc6:	580b      	ldrlt	r3, [r1, r0]
 800ccc8:	18c0      	addlt	r0, r0, r3
 800ccca:	4770      	bx	lr

0800cccc <_raise_r>:
 800cccc:	291f      	cmp	r1, #31
 800ccce:	b538      	push	{r3, r4, r5, lr}
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	460d      	mov	r5, r1
 800ccd4:	d904      	bls.n	800cce0 <_raise_r+0x14>
 800ccd6:	2316      	movs	r3, #22
 800ccd8:	6003      	str	r3, [r0, #0]
 800ccda:	f04f 30ff 	mov.w	r0, #4294967295
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cce2:	b112      	cbz	r2, 800ccea <_raise_r+0x1e>
 800cce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cce8:	b94b      	cbnz	r3, 800ccfe <_raise_r+0x32>
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 f830 	bl	800cd50 <_getpid_r>
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	4601      	mov	r1, r0
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccfa:	f000 b817 	b.w	800cd2c <_kill_r>
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d00a      	beq.n	800cd18 <_raise_r+0x4c>
 800cd02:	1c59      	adds	r1, r3, #1
 800cd04:	d103      	bne.n	800cd0e <_raise_r+0x42>
 800cd06:	2316      	movs	r3, #22
 800cd08:	6003      	str	r3, [r0, #0]
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	e7e7      	b.n	800ccde <_raise_r+0x12>
 800cd0e:	2400      	movs	r4, #0
 800cd10:	4628      	mov	r0, r5
 800cd12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd16:	4798      	blx	r3
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e7e0      	b.n	800ccde <_raise_r+0x12>

0800cd1c <raise>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	; (800cd28 <raise+0xc>)
 800cd1e:	4601      	mov	r1, r0
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f7ff bfd3 	b.w	800cccc <_raise_r>
 800cd26:	bf00      	nop
 800cd28:	200000c8 	.word	0x200000c8

0800cd2c <_kill_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4d06      	ldr	r5, [pc, #24]	; (800cd4c <_kill_r+0x20>)
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	4611      	mov	r1, r2
 800cd38:	602b      	str	r3, [r5, #0]
 800cd3a:	f7f6 fd00 	bl	800373e <_kill>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d102      	bne.n	800cd48 <_kill_r+0x1c>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	b103      	cbz	r3, 800cd48 <_kill_r+0x1c>
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	bd38      	pop	{r3, r4, r5, pc}
 800cd4a:	bf00      	nop
 800cd4c:	200023ac 	.word	0x200023ac

0800cd50 <_getpid_r>:
 800cd50:	f7f6 bcee 	b.w	8003730 <_getpid>

0800cd54 <__sread>:
 800cd54:	b510      	push	{r4, lr}
 800cd56:	460c      	mov	r4, r1
 800cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd5c:	f000 f894 	bl	800ce88 <_read_r>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	bfab      	itete	ge
 800cd64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd66:	89a3      	ldrhlt	r3, [r4, #12]
 800cd68:	181b      	addge	r3, r3, r0
 800cd6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd6e:	bfac      	ite	ge
 800cd70:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd72:	81a3      	strhlt	r3, [r4, #12]
 800cd74:	bd10      	pop	{r4, pc}

0800cd76 <__swrite>:
 800cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	898b      	ldrh	r3, [r1, #12]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	05db      	lsls	r3, r3, #23
 800cd82:	460c      	mov	r4, r1
 800cd84:	4616      	mov	r6, r2
 800cd86:	d505      	bpl.n	800cd94 <__swrite+0x1e>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd90:	f000 f868 	bl	800ce64 <_lseek_r>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	4632      	mov	r2, r6
 800cd98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd9c:	81a3      	strh	r3, [r4, #12]
 800cd9e:	4628      	mov	r0, r5
 800cda0:	463b      	mov	r3, r7
 800cda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdaa:	f000 b817 	b.w	800cddc <_write_r>

0800cdae <__sseek>:
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb6:	f000 f855 	bl	800ce64 <_lseek_r>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	bf15      	itete	ne
 800cdc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdca:	81a3      	strheq	r3, [r4, #12]
 800cdcc:	bf18      	it	ne
 800cdce:	81a3      	strhne	r3, [r4, #12]
 800cdd0:	bd10      	pop	{r4, pc}

0800cdd2 <__sclose>:
 800cdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd6:	f000 b813 	b.w	800ce00 <_close_r>
	...

0800cddc <_write_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	4611      	mov	r1, r2
 800cde4:	2200      	movs	r2, #0
 800cde6:	4d05      	ldr	r5, [pc, #20]	; (800cdfc <_write_r+0x20>)
 800cde8:	602a      	str	r2, [r5, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	f7f6 fcde 	bl	80037ac <_write>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_write_r+0x1e>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_write_r+0x1e>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	200023ac 	.word	0x200023ac

0800ce00 <_close_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	2300      	movs	r3, #0
 800ce04:	4d05      	ldr	r5, [pc, #20]	; (800ce1c <_close_r+0x1c>)
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f6 fcea 	bl	80037e4 <_close>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_close_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_close_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	200023ac 	.word	0x200023ac

0800ce20 <_fstat_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	2300      	movs	r3, #0
 800ce24:	4d06      	ldr	r5, [pc, #24]	; (800ce40 <_fstat_r+0x20>)
 800ce26:	4604      	mov	r4, r0
 800ce28:	4608      	mov	r0, r1
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	602b      	str	r3, [r5, #0]
 800ce2e:	f7f6 fce4 	bl	80037fa <_fstat>
 800ce32:	1c43      	adds	r3, r0, #1
 800ce34:	d102      	bne.n	800ce3c <_fstat_r+0x1c>
 800ce36:	682b      	ldr	r3, [r5, #0]
 800ce38:	b103      	cbz	r3, 800ce3c <_fstat_r+0x1c>
 800ce3a:	6023      	str	r3, [r4, #0]
 800ce3c:	bd38      	pop	{r3, r4, r5, pc}
 800ce3e:	bf00      	nop
 800ce40:	200023ac 	.word	0x200023ac

0800ce44 <_isatty_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	2300      	movs	r3, #0
 800ce48:	4d05      	ldr	r5, [pc, #20]	; (800ce60 <_isatty_r+0x1c>)
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	602b      	str	r3, [r5, #0]
 800ce50:	f7f6 fce2 	bl	8003818 <_isatty>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	d102      	bne.n	800ce5e <_isatty_r+0x1a>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	b103      	cbz	r3, 800ce5e <_isatty_r+0x1a>
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	200023ac 	.word	0x200023ac

0800ce64 <_lseek_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	4d05      	ldr	r5, [pc, #20]	; (800ce84 <_lseek_r+0x20>)
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	f7f6 fcda 	bl	800382c <_lseek>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_lseek_r+0x1e>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_lseek_r+0x1e>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	200023ac 	.word	0x200023ac

0800ce88 <_read_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	4611      	mov	r1, r2
 800ce90:	2200      	movs	r2, #0
 800ce92:	4d05      	ldr	r5, [pc, #20]	; (800cea8 <_read_r+0x20>)
 800ce94:	602a      	str	r2, [r5, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f7f6 fc6b 	bl	8003772 <_read>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_read_r+0x1e>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_read_r+0x1e>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	200023ac 	.word	0x200023ac
 800ceac:	00000000 	.word	0x00000000

0800ceb0 <atan>:
 800ceb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	4bb6      	ldr	r3, [pc, #728]	; (800d190 <atan+0x2e0>)
 800ceb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ceba:	429e      	cmp	r6, r3
 800cebc:	4604      	mov	r4, r0
 800cebe:	460d      	mov	r5, r1
 800cec0:	468b      	mov	fp, r1
 800cec2:	dd17      	ble.n	800cef4 <atan+0x44>
 800cec4:	4bb3      	ldr	r3, [pc, #716]	; (800d194 <atan+0x2e4>)
 800cec6:	429e      	cmp	r6, r3
 800cec8:	dc01      	bgt.n	800cece <atan+0x1e>
 800ceca:	d109      	bne.n	800cee0 <atan+0x30>
 800cecc:	b140      	cbz	r0, 800cee0 <atan+0x30>
 800cece:	4622      	mov	r2, r4
 800ced0:	462b      	mov	r3, r5
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	f7f3 f949 	bl	800016c <__adddf3>
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	e005      	b.n	800ceec <atan+0x3c>
 800cee0:	f1bb 0f00 	cmp.w	fp, #0
 800cee4:	4cac      	ldr	r4, [pc, #688]	; (800d198 <atan+0x2e8>)
 800cee6:	f300 8121 	bgt.w	800d12c <atan+0x27c>
 800ceea:	4dac      	ldr	r5, [pc, #688]	; (800d19c <atan+0x2ec>)
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	4baa      	ldr	r3, [pc, #680]	; (800d1a0 <atan+0x2f0>)
 800cef6:	429e      	cmp	r6, r3
 800cef8:	dc11      	bgt.n	800cf1e <atan+0x6e>
 800cefa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cefe:	429e      	cmp	r6, r3
 800cf00:	dc0a      	bgt.n	800cf18 <atan+0x68>
 800cf02:	a38b      	add	r3, pc, #556	; (adr r3, 800d130 <atan+0x280>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 f930 	bl	800016c <__adddf3>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	4ba5      	ldr	r3, [pc, #660]	; (800d1a4 <atan+0x2f4>)
 800cf10:	f7f3 fd72 	bl	80009f8 <__aeabi_dcmpgt>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d1e9      	bne.n	800ceec <atan+0x3c>
 800cf18:	f04f 3aff 	mov.w	sl, #4294967295
 800cf1c:	e027      	b.n	800cf6e <atan+0xbe>
 800cf1e:	f000 f951 	bl	800d1c4 <fabs>
 800cf22:	4ba1      	ldr	r3, [pc, #644]	; (800d1a8 <atan+0x2f8>)
 800cf24:	4604      	mov	r4, r0
 800cf26:	429e      	cmp	r6, r3
 800cf28:	460d      	mov	r5, r1
 800cf2a:	f300 80b8 	bgt.w	800d09e <atan+0x1ee>
 800cf2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cf32:	429e      	cmp	r6, r3
 800cf34:	f300 809c 	bgt.w	800d070 <atan+0x1c0>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	f7f3 f916 	bl	800016c <__adddf3>
 800cf40:	2200      	movs	r2, #0
 800cf42:	4b98      	ldr	r3, [pc, #608]	; (800d1a4 <atan+0x2f4>)
 800cf44:	f7f3 f910 	bl	8000168 <__aeabi_dsub>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	460f      	mov	r7, r1
 800cf4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 f909 	bl	800016c <__adddf3>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	f7f3 fbe3 	bl	800072c <__aeabi_ddiv>
 800cf66:	f04f 0a00 	mov.w	sl, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	4620      	mov	r0, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	f7f3 faaf 	bl	80004d8 <__aeabi_dmul>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4680      	mov	r8, r0
 800cf80:	4689      	mov	r9, r1
 800cf82:	f7f3 faa9 	bl	80004d8 <__aeabi_dmul>
 800cf86:	a36c      	add	r3, pc, #432	; (adr r3, 800d138 <atan+0x288>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	460f      	mov	r7, r1
 800cf90:	f7f3 faa2 	bl	80004d8 <__aeabi_dmul>
 800cf94:	a36a      	add	r3, pc, #424	; (adr r3, 800d140 <atan+0x290>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	f7f3 f8e7 	bl	800016c <__adddf3>
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	463b      	mov	r3, r7
 800cfa2:	f7f3 fa99 	bl	80004d8 <__aeabi_dmul>
 800cfa6:	a368      	add	r3, pc, #416	; (adr r3, 800d148 <atan+0x298>)
 800cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfac:	f7f3 f8de 	bl	800016c <__adddf3>
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	463b      	mov	r3, r7
 800cfb4:	f7f3 fa90 	bl	80004d8 <__aeabi_dmul>
 800cfb8:	a365      	add	r3, pc, #404	; (adr r3, 800d150 <atan+0x2a0>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 f8d5 	bl	800016c <__adddf3>
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	463b      	mov	r3, r7
 800cfc6:	f7f3 fa87 	bl	80004d8 <__aeabi_dmul>
 800cfca:	a363      	add	r3, pc, #396	; (adr r3, 800d158 <atan+0x2a8>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f8cc 	bl	800016c <__adddf3>
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	463b      	mov	r3, r7
 800cfd8:	f7f3 fa7e 	bl	80004d8 <__aeabi_dmul>
 800cfdc:	a360      	add	r3, pc, #384	; (adr r3, 800d160 <atan+0x2b0>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 f8c3 	bl	800016c <__adddf3>
 800cfe6:	4642      	mov	r2, r8
 800cfe8:	464b      	mov	r3, r9
 800cfea:	f7f3 fa75 	bl	80004d8 <__aeabi_dmul>
 800cfee:	a35e      	add	r3, pc, #376	; (adr r3, 800d168 <atan+0x2b8>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	4680      	mov	r8, r0
 800cff6:	4689      	mov	r9, r1
 800cff8:	4630      	mov	r0, r6
 800cffa:	4639      	mov	r1, r7
 800cffc:	f7f3 fa6c 	bl	80004d8 <__aeabi_dmul>
 800d000:	a35b      	add	r3, pc, #364	; (adr r3, 800d170 <atan+0x2c0>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	f7f3 f8af 	bl	8000168 <__aeabi_dsub>
 800d00a:	4632      	mov	r2, r6
 800d00c:	463b      	mov	r3, r7
 800d00e:	f7f3 fa63 	bl	80004d8 <__aeabi_dmul>
 800d012:	a359      	add	r3, pc, #356	; (adr r3, 800d178 <atan+0x2c8>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 f8a6 	bl	8000168 <__aeabi_dsub>
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	f7f3 fa5a 	bl	80004d8 <__aeabi_dmul>
 800d024:	a356      	add	r3, pc, #344	; (adr r3, 800d180 <atan+0x2d0>)
 800d026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02a:	f7f3 f89d 	bl	8000168 <__aeabi_dsub>
 800d02e:	4632      	mov	r2, r6
 800d030:	463b      	mov	r3, r7
 800d032:	f7f3 fa51 	bl	80004d8 <__aeabi_dmul>
 800d036:	a354      	add	r3, pc, #336	; (adr r3, 800d188 <atan+0x2d8>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7f3 f894 	bl	8000168 <__aeabi_dsub>
 800d040:	4632      	mov	r2, r6
 800d042:	463b      	mov	r3, r7
 800d044:	f7f3 fa48 	bl	80004d8 <__aeabi_dmul>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4640      	mov	r0, r8
 800d04e:	4649      	mov	r1, r9
 800d050:	f7f3 f88c 	bl	800016c <__adddf3>
 800d054:	4622      	mov	r2, r4
 800d056:	462b      	mov	r3, r5
 800d058:	f7f3 fa3e 	bl	80004d8 <__aeabi_dmul>
 800d05c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	d144      	bne.n	800d0f0 <atan+0x240>
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 f87d 	bl	8000168 <__aeabi_dsub>
 800d06e:	e734      	b.n	800ceda <atan+0x2a>
 800d070:	2200      	movs	r2, #0
 800d072:	4b4c      	ldr	r3, [pc, #304]	; (800d1a4 <atan+0x2f4>)
 800d074:	f7f3 f878 	bl	8000168 <__aeabi_dsub>
 800d078:	2200      	movs	r2, #0
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	4b48      	ldr	r3, [pc, #288]	; (800d1a4 <atan+0x2f4>)
 800d084:	f7f3 f872 	bl	800016c <__adddf3>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	4630      	mov	r0, r6
 800d08e:	4639      	mov	r1, r7
 800d090:	f7f3 fb4c 	bl	800072c <__aeabi_ddiv>
 800d094:	f04f 0a01 	mov.w	sl, #1
 800d098:	4604      	mov	r4, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	e767      	b.n	800cf6e <atan+0xbe>
 800d09e:	4b43      	ldr	r3, [pc, #268]	; (800d1ac <atan+0x2fc>)
 800d0a0:	429e      	cmp	r6, r3
 800d0a2:	da1a      	bge.n	800d0da <atan+0x22a>
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4b42      	ldr	r3, [pc, #264]	; (800d1b0 <atan+0x300>)
 800d0a8:	f7f3 f85e 	bl	8000168 <__aeabi_dsub>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	4b3e      	ldr	r3, [pc, #248]	; (800d1b0 <atan+0x300>)
 800d0b8:	f7f3 fa0e 	bl	80004d8 <__aeabi_dmul>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4b39      	ldr	r3, [pc, #228]	; (800d1a4 <atan+0x2f4>)
 800d0c0:	f7f3 f854 	bl	800016c <__adddf3>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	f7f3 fb2e 	bl	800072c <__aeabi_ddiv>
 800d0d0:	f04f 0a02 	mov.w	sl, #2
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	e749      	b.n	800cf6e <atan+0xbe>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	2000      	movs	r0, #0
 800d0e0:	4934      	ldr	r1, [pc, #208]	; (800d1b4 <atan+0x304>)
 800d0e2:	f7f3 fb23 	bl	800072c <__aeabi_ddiv>
 800d0e6:	f04f 0a03 	mov.w	sl, #3
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	e73e      	b.n	800cf6e <atan+0xbe>
 800d0f0:	4b31      	ldr	r3, [pc, #196]	; (800d1b8 <atan+0x308>)
 800d0f2:	4e32      	ldr	r6, [pc, #200]	; (800d1bc <atan+0x30c>)
 800d0f4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d0f8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d0fc:	e9da 2300 	ldrd	r2, r3, [sl]
 800d100:	f7f3 f832 	bl	8000168 <__aeabi_dsub>
 800d104:	4622      	mov	r2, r4
 800d106:	462b      	mov	r3, r5
 800d108:	f7f3 f82e 	bl	8000168 <__aeabi_dsub>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d114:	f7f3 f828 	bl	8000168 <__aeabi_dsub>
 800d118:	f1bb 0f00 	cmp.w	fp, #0
 800d11c:	4604      	mov	r4, r0
 800d11e:	460d      	mov	r5, r1
 800d120:	f6bf aee4 	bge.w	800ceec <atan+0x3c>
 800d124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d128:	461d      	mov	r5, r3
 800d12a:	e6df      	b.n	800ceec <atan+0x3c>
 800d12c:	4d24      	ldr	r5, [pc, #144]	; (800d1c0 <atan+0x310>)
 800d12e:	e6dd      	b.n	800ceec <atan+0x3c>
 800d130:	8800759c 	.word	0x8800759c
 800d134:	7e37e43c 	.word	0x7e37e43c
 800d138:	e322da11 	.word	0xe322da11
 800d13c:	3f90ad3a 	.word	0x3f90ad3a
 800d140:	24760deb 	.word	0x24760deb
 800d144:	3fa97b4b 	.word	0x3fa97b4b
 800d148:	a0d03d51 	.word	0xa0d03d51
 800d14c:	3fb10d66 	.word	0x3fb10d66
 800d150:	c54c206e 	.word	0xc54c206e
 800d154:	3fb745cd 	.word	0x3fb745cd
 800d158:	920083ff 	.word	0x920083ff
 800d15c:	3fc24924 	.word	0x3fc24924
 800d160:	5555550d 	.word	0x5555550d
 800d164:	3fd55555 	.word	0x3fd55555
 800d168:	2c6a6c2f 	.word	0x2c6a6c2f
 800d16c:	bfa2b444 	.word	0xbfa2b444
 800d170:	52defd9a 	.word	0x52defd9a
 800d174:	3fadde2d 	.word	0x3fadde2d
 800d178:	af749a6d 	.word	0xaf749a6d
 800d17c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d180:	fe231671 	.word	0xfe231671
 800d184:	3fbc71c6 	.word	0x3fbc71c6
 800d188:	9998ebc4 	.word	0x9998ebc4
 800d18c:	3fc99999 	.word	0x3fc99999
 800d190:	440fffff 	.word	0x440fffff
 800d194:	7ff00000 	.word	0x7ff00000
 800d198:	54442d18 	.word	0x54442d18
 800d19c:	bff921fb 	.word	0xbff921fb
 800d1a0:	3fdbffff 	.word	0x3fdbffff
 800d1a4:	3ff00000 	.word	0x3ff00000
 800d1a8:	3ff2ffff 	.word	0x3ff2ffff
 800d1ac:	40038000 	.word	0x40038000
 800d1b0:	3ff80000 	.word	0x3ff80000
 800d1b4:	bff00000 	.word	0xbff00000
 800d1b8:	0800e4f0 	.word	0x0800e4f0
 800d1bc:	0800e4d0 	.word	0x0800e4d0
 800d1c0:	3ff921fb 	.word	0x3ff921fb

0800d1c4 <fabs>:
 800d1c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d1c8:	4770      	bx	lr

0800d1ca <atan2>:
 800d1ca:	f000 b82d 	b.w	800d228 <__ieee754_atan2>
	...

0800d1d0 <sqrt>:
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	f000 f8f9 	bl	800d3cc <__ieee754_sqrt>
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <sqrt+0x54>)
 800d1dc:	4604      	mov	r4, r0
 800d1de:	f993 3000 	ldrsb.w	r3, [r3]
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	d019      	beq.n	800d21c <sqrt+0x4c>
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	f7f3 fc0c 	bl	8000a0c <__aeabi_dcmpun>
 800d1f4:	b990      	cbnz	r0, 800d21c <sqrt+0x4c>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	f7f3 fbdd 	bl	80009bc <__aeabi_dcmplt>
 800d202:	b158      	cbz	r0, 800d21c <sqrt+0x4c>
 800d204:	f7fc ff76 	bl	800a0f4 <__errno>
 800d208:	2321      	movs	r3, #33	; 0x21
 800d20a:	2200      	movs	r2, #0
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	4610      	mov	r0, r2
 800d212:	4619      	mov	r1, r3
 800d214:	f7f3 fa8a 	bl	800072c <__aeabi_ddiv>
 800d218:	4604      	mov	r4, r0
 800d21a:	460d      	mov	r5, r1
 800d21c:	4620      	mov	r0, r4
 800d21e:	4629      	mov	r1, r5
 800d220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d222:	bf00      	nop
 800d224:	20000298 	.word	0x20000298

0800d228 <__ieee754_atan2>:
 800d228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22c:	4692      	mov	sl, r2
 800d22e:	4699      	mov	r9, r3
 800d230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d234:	461f      	mov	r7, r3
 800d236:	f1ca 0300 	rsb	r3, sl, #0
 800d23a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800d3c8 <__ieee754_atan2+0x1a0>
 800d23e:	ea43 030a 	orr.w	r3, r3, sl
 800d242:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d246:	4573      	cmp	r3, lr
 800d248:	4604      	mov	r4, r0
 800d24a:	460d      	mov	r5, r1
 800d24c:	d808      	bhi.n	800d260 <__ieee754_atan2+0x38>
 800d24e:	4246      	negs	r6, r0
 800d250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d254:	4306      	orrs	r6, r0
 800d256:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800d25a:	4576      	cmp	r6, lr
 800d25c:	468c      	mov	ip, r1
 800d25e:	d908      	bls.n	800d272 <__ieee754_atan2+0x4a>
 800d260:	4652      	mov	r2, sl
 800d262:	464b      	mov	r3, r9
 800d264:	4620      	mov	r0, r4
 800d266:	4629      	mov	r1, r5
 800d268:	f7f2 ff80 	bl	800016c <__adddf3>
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	e019      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d272:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800d276:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800d27a:	ea56 060a 	orrs.w	r6, r6, sl
 800d27e:	d103      	bne.n	800d288 <__ieee754_atan2+0x60>
 800d280:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	f7ff be14 	b.w	800ceb0 <atan>
 800d288:	17be      	asrs	r6, r7, #30
 800d28a:	f006 0602 	and.w	r6, r6, #2
 800d28e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800d292:	ea53 0100 	orrs.w	r1, r3, r0
 800d296:	d10a      	bne.n	800d2ae <__ieee754_atan2+0x86>
 800d298:	2e02      	cmp	r6, #2
 800d29a:	d067      	beq.n	800d36c <__ieee754_atan2+0x144>
 800d29c:	2e03      	cmp	r6, #3
 800d29e:	d102      	bne.n	800d2a6 <__ieee754_atan2+0x7e>
 800d2a0:	a53b      	add	r5, pc, #236	; (adr r5, 800d390 <__ieee754_atan2+0x168>)
 800d2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	ea52 010a 	orrs.w	r1, r2, sl
 800d2b2:	d106      	bne.n	800d2c2 <__ieee754_atan2+0x9a>
 800d2b4:	f1bc 0f00 	cmp.w	ip, #0
 800d2b8:	da63      	bge.n	800d382 <__ieee754_atan2+0x15a>
 800d2ba:	a537      	add	r5, pc, #220	; (adr r5, 800d398 <__ieee754_atan2+0x170>)
 800d2bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d2c0:	e7f1      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d2c2:	4572      	cmp	r2, lr
 800d2c4:	d10f      	bne.n	800d2e6 <__ieee754_atan2+0xbe>
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	f106 36ff 	add.w	r6, r6, #4294967295
 800d2cc:	d107      	bne.n	800d2de <__ieee754_atan2+0xb6>
 800d2ce:	2e02      	cmp	r6, #2
 800d2d0:	d850      	bhi.n	800d374 <__ieee754_atan2+0x14c>
 800d2d2:	4b3b      	ldr	r3, [pc, #236]	; (800d3c0 <__ieee754_atan2+0x198>)
 800d2d4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d2d8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d2dc:	e7e3      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d2de:	2e02      	cmp	r6, #2
 800d2e0:	d84c      	bhi.n	800d37c <__ieee754_atan2+0x154>
 800d2e2:	4b38      	ldr	r3, [pc, #224]	; (800d3c4 <__ieee754_atan2+0x19c>)
 800d2e4:	e7f6      	b.n	800d2d4 <__ieee754_atan2+0xac>
 800d2e6:	4573      	cmp	r3, lr
 800d2e8:	d0e4      	beq.n	800d2b4 <__ieee754_atan2+0x8c>
 800d2ea:	1a9b      	subs	r3, r3, r2
 800d2ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d2f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2f4:	da20      	bge.n	800d338 <__ieee754_atan2+0x110>
 800d2f6:	2f00      	cmp	r7, #0
 800d2f8:	da01      	bge.n	800d2fe <__ieee754_atan2+0xd6>
 800d2fa:	323c      	adds	r2, #60	; 0x3c
 800d2fc:	db20      	blt.n	800d340 <__ieee754_atan2+0x118>
 800d2fe:	4652      	mov	r2, sl
 800d300:	464b      	mov	r3, r9
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f3 fa11 	bl	800072c <__aeabi_ddiv>
 800d30a:	f7ff ff5b 	bl	800d1c4 <fabs>
 800d30e:	f7ff fdcf 	bl	800ceb0 <atan>
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
 800d316:	2e01      	cmp	r6, #1
 800d318:	d015      	beq.n	800d346 <__ieee754_atan2+0x11e>
 800d31a:	2e02      	cmp	r6, #2
 800d31c:	d017      	beq.n	800d34e <__ieee754_atan2+0x126>
 800d31e:	2e00      	cmp	r6, #0
 800d320:	d0c1      	beq.n	800d2a6 <__ieee754_atan2+0x7e>
 800d322:	a31f      	add	r3, pc, #124	; (adr r3, 800d3a0 <__ieee754_atan2+0x178>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	4620      	mov	r0, r4
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7f2 ff1c 	bl	8000168 <__aeabi_dsub>
 800d330:	a31d      	add	r3, pc, #116	; (adr r3, 800d3a8 <__ieee754_atan2+0x180>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	e016      	b.n	800d366 <__ieee754_atan2+0x13e>
 800d338:	a51d      	add	r5, pc, #116	; (adr r5, 800d3b0 <__ieee754_atan2+0x188>)
 800d33a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d33e:	e7ea      	b.n	800d316 <__ieee754_atan2+0xee>
 800d340:	2400      	movs	r4, #0
 800d342:	2500      	movs	r5, #0
 800d344:	e7e7      	b.n	800d316 <__ieee754_atan2+0xee>
 800d346:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d34a:	461d      	mov	r5, r3
 800d34c:	e7ab      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d34e:	a314      	add	r3, pc, #80	; (adr r3, 800d3a0 <__ieee754_atan2+0x178>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	4620      	mov	r0, r4
 800d356:	4629      	mov	r1, r5
 800d358:	f7f2 ff06 	bl	8000168 <__aeabi_dsub>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	a111      	add	r1, pc, #68	; (adr r1, 800d3a8 <__ieee754_atan2+0x180>)
 800d362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d366:	f7f2 feff 	bl	8000168 <__aeabi_dsub>
 800d36a:	e77f      	b.n	800d26c <__ieee754_atan2+0x44>
 800d36c:	a50e      	add	r5, pc, #56	; (adr r5, 800d3a8 <__ieee754_atan2+0x180>)
 800d36e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d372:	e798      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d374:	a510      	add	r5, pc, #64	; (adr r5, 800d3b8 <__ieee754_atan2+0x190>)
 800d376:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d37a:	e794      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d37c:	2400      	movs	r4, #0
 800d37e:	2500      	movs	r5, #0
 800d380:	e791      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d382:	a50b      	add	r5, pc, #44	; (adr r5, 800d3b0 <__ieee754_atan2+0x188>)
 800d384:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d388:	e78d      	b.n	800d2a6 <__ieee754_atan2+0x7e>
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w
 800d390:	54442d18 	.word	0x54442d18
 800d394:	c00921fb 	.word	0xc00921fb
 800d398:	54442d18 	.word	0x54442d18
 800d39c:	bff921fb 	.word	0xbff921fb
 800d3a0:	33145c07 	.word	0x33145c07
 800d3a4:	3ca1a626 	.word	0x3ca1a626
 800d3a8:	54442d18 	.word	0x54442d18
 800d3ac:	400921fb 	.word	0x400921fb
 800d3b0:	54442d18 	.word	0x54442d18
 800d3b4:	3ff921fb 	.word	0x3ff921fb
 800d3b8:	54442d18 	.word	0x54442d18
 800d3bc:	3fe921fb 	.word	0x3fe921fb
 800d3c0:	0800e510 	.word	0x0800e510
 800d3c4:	0800e528 	.word	0x0800e528
 800d3c8:	7ff00000 	.word	0x7ff00000

0800d3cc <__ieee754_sqrt>:
 800d3cc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d520 <__ieee754_sqrt+0x154>
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	ea3c 0c01 	bics.w	ip, ip, r1
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4606      	mov	r6, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	460a      	mov	r2, r1
 800d3e0:	4607      	mov	r7, r0
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	d10e      	bne.n	800d404 <__ieee754_sqrt+0x38>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	f7f3 f876 	bl	80004d8 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	f7f2 feba 	bl	800016c <__adddf3>
 800d3f8:	4606      	mov	r6, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4629      	mov	r1, r5
 800d400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d404:	2900      	cmp	r1, #0
 800d406:	dc0d      	bgt.n	800d424 <__ieee754_sqrt+0x58>
 800d408:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d40c:	ea5c 0707 	orrs.w	r7, ip, r7
 800d410:	d0f4      	beq.n	800d3fc <__ieee754_sqrt+0x30>
 800d412:	b139      	cbz	r1, 800d424 <__ieee754_sqrt+0x58>
 800d414:	4602      	mov	r2, r0
 800d416:	f7f2 fea7 	bl	8000168 <__aeabi_dsub>
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	f7f3 f985 	bl	800072c <__aeabi_ddiv>
 800d422:	e7e9      	b.n	800d3f8 <__ieee754_sqrt+0x2c>
 800d424:	1512      	asrs	r2, r2, #20
 800d426:	d074      	beq.n	800d512 <__ieee754_sqrt+0x146>
 800d428:	2000      	movs	r0, #0
 800d42a:	07d5      	lsls	r5, r2, #31
 800d42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d430:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d434:	bf5e      	ittt	pl
 800d436:	0fe3      	lsrpl	r3, r4, #31
 800d438:	0064      	lslpl	r4, r4, #1
 800d43a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d43e:	0fe3      	lsrs	r3, r4, #31
 800d440:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d444:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d448:	2516      	movs	r5, #22
 800d44a:	4601      	mov	r1, r0
 800d44c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d450:	1076      	asrs	r6, r6, #1
 800d452:	0064      	lsls	r4, r4, #1
 800d454:	188f      	adds	r7, r1, r2
 800d456:	429f      	cmp	r7, r3
 800d458:	bfde      	ittt	le
 800d45a:	1bdb      	suble	r3, r3, r7
 800d45c:	18b9      	addle	r1, r7, r2
 800d45e:	1880      	addle	r0, r0, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	3d01      	subs	r5, #1
 800d464:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d468:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d46c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d470:	d1f0      	bne.n	800d454 <__ieee754_sqrt+0x88>
 800d472:	462a      	mov	r2, r5
 800d474:	f04f 0e20 	mov.w	lr, #32
 800d478:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d47c:	428b      	cmp	r3, r1
 800d47e:	eb07 0c05 	add.w	ip, r7, r5
 800d482:	dc02      	bgt.n	800d48a <__ieee754_sqrt+0xbe>
 800d484:	d113      	bne.n	800d4ae <__ieee754_sqrt+0xe2>
 800d486:	45a4      	cmp	ip, r4
 800d488:	d811      	bhi.n	800d4ae <__ieee754_sqrt+0xe2>
 800d48a:	f1bc 0f00 	cmp.w	ip, #0
 800d48e:	eb0c 0507 	add.w	r5, ip, r7
 800d492:	da43      	bge.n	800d51c <__ieee754_sqrt+0x150>
 800d494:	2d00      	cmp	r5, #0
 800d496:	db41      	blt.n	800d51c <__ieee754_sqrt+0x150>
 800d498:	f101 0801 	add.w	r8, r1, #1
 800d49c:	1a5b      	subs	r3, r3, r1
 800d49e:	4641      	mov	r1, r8
 800d4a0:	45a4      	cmp	ip, r4
 800d4a2:	bf88      	it	hi
 800d4a4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d4a8:	eba4 040c 	sub.w	r4, r4, ip
 800d4ac:	443a      	add	r2, r7
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	f1be 0e01 	subs.w	lr, lr, #1
 800d4b4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d4b8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d4bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d4c0:	d1dc      	bne.n	800d47c <__ieee754_sqrt+0xb0>
 800d4c2:	4323      	orrs	r3, r4
 800d4c4:	d006      	beq.n	800d4d4 <__ieee754_sqrt+0x108>
 800d4c6:	1c54      	adds	r4, r2, #1
 800d4c8:	bf0b      	itete	eq
 800d4ca:	4672      	moveq	r2, lr
 800d4cc:	3201      	addne	r2, #1
 800d4ce:	3001      	addeq	r0, #1
 800d4d0:	f022 0201 	bicne.w	r2, r2, #1
 800d4d4:	1043      	asrs	r3, r0, #1
 800d4d6:	07c1      	lsls	r1, r0, #31
 800d4d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d4dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d4e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d4e4:	bf48      	it	mi
 800d4e6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d4f0:	e782      	b.n	800d3f8 <__ieee754_sqrt+0x2c>
 800d4f2:	0ae3      	lsrs	r3, r4, #11
 800d4f4:	3915      	subs	r1, #21
 800d4f6:	0564      	lsls	r4, r4, #21
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d0fa      	beq.n	800d4f2 <__ieee754_sqrt+0x126>
 800d4fc:	02de      	lsls	r6, r3, #11
 800d4fe:	d50a      	bpl.n	800d516 <__ieee754_sqrt+0x14a>
 800d500:	f1c2 0020 	rsb	r0, r2, #32
 800d504:	fa24 f000 	lsr.w	r0, r4, r0
 800d508:	1e55      	subs	r5, r2, #1
 800d50a:	4094      	lsls	r4, r2
 800d50c:	4303      	orrs	r3, r0
 800d50e:	1b4a      	subs	r2, r1, r5
 800d510:	e78a      	b.n	800d428 <__ieee754_sqrt+0x5c>
 800d512:	4611      	mov	r1, r2
 800d514:	e7f0      	b.n	800d4f8 <__ieee754_sqrt+0x12c>
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	3201      	adds	r2, #1
 800d51a:	e7ef      	b.n	800d4fc <__ieee754_sqrt+0x130>
 800d51c:	4688      	mov	r8, r1
 800d51e:	e7bd      	b.n	800d49c <__ieee754_sqrt+0xd0>
 800d520:	7ff00000 	.word	0x7ff00000

0800d524 <_init>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr

0800d530 <_fini>:
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d532:	bf00      	nop
 800d534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d536:	bc08      	pop	{r3}
 800d538:	469e      	mov	lr, r3
 800d53a:	4770      	bx	lr
